
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_start>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   0:	200007a0 	.word	0x200007a0
}
   4:	0000172d 	.word	0x0000172d
   8:	000040d3 	.word	0x000040d3
   c:	000016e5 	.word	0x000016e5
  10:	000016e5 	.word	0x000016e5
  14:	000016e5 	.word	0x000016e5
  18:	000016e5 	.word	0x000016e5
	...
  2c:	00001381 	.word	0x00001381
  30:	000016e5 	.word	0x000016e5
  34:	00000000 	.word	0x00000000
  38:	00001329 	.word	0x00001329
  3c:	000016e5 	.word	0x000016e5

00000040 <_irq_vector_table>:
  40:	0000146d 0000146d 0000146d 0000146d     m...m...m...m...
  50:	0000146d 0000146d 0000146d 0000146d     m...m...m...m...
  60:	0000146d 0000146d 0000146d 0000146d     m...m...m...m...
  70:	0000146d 0000146d 0000146d 0000146d     m...m...m...m...
  80:	0000146d 0000146d 0000146d 0000146d     m...m...m...m...
  90:	0000146d 0000146d 0000146d 0000146d     m...m...m...m...
  a0:	0000146d 0000146d 0000146d 0000146d     m...m...m...m...
  b0:	0000146d 0000146d                       m...m...

Disassembly of section text:

000000b8 <__aeabi_uldivmod>:
      b8:	b953      	cbnz	r3, d0 <CONFIG_FLASH_SIZE+0x10>
      ba:	b94a      	cbnz	r2, d0 <CONFIG_FLASH_SIZE+0x10>
      bc:	2900      	cmp	r1, #0
      be:	bf08      	it	eq
      c0:	2800      	cmpeq	r0, #0
      c2:	bf1c      	itt	ne
      c4:	f04f 31ff 	movne.w	r1, #4294967295
      c8:	f04f 30ff 	movne.w	r0, #4294967295
      cc:	f000 b96c 	b.w	3a8 <__aeabi_idiv0>
      d0:	f1ad 0c08 	sub.w	ip, sp, #8
      d4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
      d8:	f000 f806 	bl	e8 <__udivmoddi4>
      dc:	f8dd e004 	ldr.w	lr, [sp, #4]
      e0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
      e4:	b004      	add	sp, #16
      e6:	4770      	bx	lr

000000e8 <__udivmoddi4>:
      e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
      ec:	9e08      	ldr	r6, [sp, #32]
      ee:	460d      	mov	r5, r1
      f0:	4604      	mov	r4, r0
      f2:	468e      	mov	lr, r1
      f4:	2b00      	cmp	r3, #0
      f6:	f040 8082 	bne.w	1fe <CONFIG_IDLE_STACK_SIZE+0xfe>
      fa:	428a      	cmp	r2, r1
      fc:	4617      	mov	r7, r2
      fe:	d946      	bls.n	18e <CONFIG_IDLE_STACK_SIZE+0x8e>
     100:	fab2 f282 	clz	r2, r2
     104:	b14a      	cbz	r2, 11a <CONFIG_IDLE_STACK_SIZE+0x1a>
     106:	f1c2 0120 	rsb	r1, r2, #32
     10a:	fa05 f302 	lsl.w	r3, r5, r2
     10e:	fa20 f101 	lsr.w	r1, r0, r1
     112:	4097      	lsls	r7, r2
     114:	ea41 0e03 	orr.w	lr, r1, r3
     118:	4094      	lsls	r4, r2
     11a:	ea4f 4817 	mov.w	r8, r7, lsr #16
     11e:	0c23      	lsrs	r3, r4, #16
     120:	fbbe fcf8 	udiv	ip, lr, r8
     124:	b2b9      	uxth	r1, r7
     126:	fb08 ee1c 	mls	lr, r8, ip, lr
     12a:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
     12e:	fb0c f001 	mul.w	r0, ip, r1
     132:	4298      	cmp	r0, r3
     134:	d90a      	bls.n	14c <CONFIG_IDLE_STACK_SIZE+0x4c>
     136:	18fb      	adds	r3, r7, r3
     138:	f10c 35ff 	add.w	r5, ip, #4294967295
     13c:	f080 8116 	bcs.w	36c <CONFIG_IDLE_STACK_SIZE+0x26c>
     140:	4298      	cmp	r0, r3
     142:	f240 8113 	bls.w	36c <CONFIG_IDLE_STACK_SIZE+0x26c>
     146:	f1ac 0c02 	sub.w	ip, ip, #2
     14a:	443b      	add	r3, r7
     14c:	1a1b      	subs	r3, r3, r0
     14e:	b2a4      	uxth	r4, r4
     150:	fbb3 f0f8 	udiv	r0, r3, r8
     154:	fb08 3310 	mls	r3, r8, r0, r3
     158:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     15c:	fb00 f101 	mul.w	r1, r0, r1
     160:	42a1      	cmp	r1, r4
     162:	d909      	bls.n	178 <CONFIG_IDLE_STACK_SIZE+0x78>
     164:	193c      	adds	r4, r7, r4
     166:	f100 33ff 	add.w	r3, r0, #4294967295
     16a:	f080 8101 	bcs.w	370 <CONFIG_IDLE_STACK_SIZE+0x270>
     16e:	42a1      	cmp	r1, r4
     170:	f240 80fe 	bls.w	370 <CONFIG_IDLE_STACK_SIZE+0x270>
     174:	3802      	subs	r0, #2
     176:	443c      	add	r4, r7
     178:	1a64      	subs	r4, r4, r1
     17a:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
     17e:	2100      	movs	r1, #0
     180:	b11e      	cbz	r6, 18a <CONFIG_IDLE_STACK_SIZE+0x8a>
     182:	40d4      	lsrs	r4, r2
     184:	2300      	movs	r3, #0
     186:	e9c6 4300 	strd	r4, r3, [r6]
     18a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     18e:	b902      	cbnz	r2, 192 <CONFIG_IDLE_STACK_SIZE+0x92>
     190:	deff      	udf	#255	; 0xff
     192:	fab2 f282 	clz	r2, r2
     196:	2a00      	cmp	r2, #0
     198:	d14f      	bne.n	23a <CONFIG_IDLE_STACK_SIZE+0x13a>
     19a:	1bcb      	subs	r3, r1, r7
     19c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     1a0:	fa1f f887 	uxth.w	r8, r7
     1a4:	2101      	movs	r1, #1
     1a6:	fbb3 fcfe 	udiv	ip, r3, lr
     1aa:	0c25      	lsrs	r5, r4, #16
     1ac:	fb0e 331c 	mls	r3, lr, ip, r3
     1b0:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
     1b4:	fb08 f30c 	mul.w	r3, r8, ip
     1b8:	42ab      	cmp	r3, r5
     1ba:	d907      	bls.n	1cc <CONFIG_IDLE_STACK_SIZE+0xcc>
     1bc:	197d      	adds	r5, r7, r5
     1be:	f10c 30ff 	add.w	r0, ip, #4294967295
     1c2:	d202      	bcs.n	1ca <CONFIG_IDLE_STACK_SIZE+0xca>
     1c4:	42ab      	cmp	r3, r5
     1c6:	f200 80e7 	bhi.w	398 <CONFIG_IDLE_STACK_SIZE+0x298>
     1ca:	4684      	mov	ip, r0
     1cc:	1aed      	subs	r5, r5, r3
     1ce:	b2a3      	uxth	r3, r4
     1d0:	fbb5 f0fe 	udiv	r0, r5, lr
     1d4:	fb0e 5510 	mls	r5, lr, r0, r5
     1d8:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
     1dc:	fb08 f800 	mul.w	r8, r8, r0
     1e0:	45a0      	cmp	r8, r4
     1e2:	d907      	bls.n	1f4 <CONFIG_IDLE_STACK_SIZE+0xf4>
     1e4:	193c      	adds	r4, r7, r4
     1e6:	f100 33ff 	add.w	r3, r0, #4294967295
     1ea:	d202      	bcs.n	1f2 <CONFIG_IDLE_STACK_SIZE+0xf2>
     1ec:	45a0      	cmp	r8, r4
     1ee:	f200 80d7 	bhi.w	3a0 <CONFIG_IDLE_STACK_SIZE+0x2a0>
     1f2:	4618      	mov	r0, r3
     1f4:	eba4 0408 	sub.w	r4, r4, r8
     1f8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
     1fc:	e7c0      	b.n	180 <CONFIG_IDLE_STACK_SIZE+0x80>
     1fe:	428b      	cmp	r3, r1
     200:	d908      	bls.n	214 <CONFIG_IDLE_STACK_SIZE+0x114>
     202:	2e00      	cmp	r6, #0
     204:	f000 80af 	beq.w	366 <CONFIG_IDLE_STACK_SIZE+0x266>
     208:	2100      	movs	r1, #0
     20a:	e9c6 0500 	strd	r0, r5, [r6]
     20e:	4608      	mov	r0, r1
     210:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     214:	fab3 f183 	clz	r1, r3
     218:	2900      	cmp	r1, #0
     21a:	d14b      	bne.n	2b4 <CONFIG_IDLE_STACK_SIZE+0x1b4>
     21c:	42ab      	cmp	r3, r5
     21e:	d302      	bcc.n	226 <CONFIG_IDLE_STACK_SIZE+0x126>
     220:	4282      	cmp	r2, r0
     222:	f200 80b7 	bhi.w	394 <CONFIG_IDLE_STACK_SIZE+0x294>
     226:	1a84      	subs	r4, r0, r2
     228:	eb65 0303 	sbc.w	r3, r5, r3
     22c:	2001      	movs	r0, #1
     22e:	469e      	mov	lr, r3
     230:	2e00      	cmp	r6, #0
     232:	d0aa      	beq.n	18a <CONFIG_IDLE_STACK_SIZE+0x8a>
     234:	e9c6 4e00 	strd	r4, lr, [r6]
     238:	e7a7      	b.n	18a <CONFIG_IDLE_STACK_SIZE+0x8a>
     23a:	f1c2 0c20 	rsb	ip, r2, #32
     23e:	fa01 f302 	lsl.w	r3, r1, r2
     242:	4097      	lsls	r7, r2
     244:	fa20 f00c 	lsr.w	r0, r0, ip
     248:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     24c:	fa21 fc0c 	lsr.w	ip, r1, ip
     250:	4318      	orrs	r0, r3
     252:	fbbc f1fe 	udiv	r1, ip, lr
     256:	0c05      	lsrs	r5, r0, #16
     258:	fb0e cc11 	mls	ip, lr, r1, ip
     25c:	fa1f f887 	uxth.w	r8, r7
     260:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
     264:	fb01 f308 	mul.w	r3, r1, r8
     268:	42ab      	cmp	r3, r5
     26a:	fa04 f402 	lsl.w	r4, r4, r2
     26e:	d909      	bls.n	284 <CONFIG_IDLE_STACK_SIZE+0x184>
     270:	197d      	adds	r5, r7, r5
     272:	f101 3cff 	add.w	ip, r1, #4294967295
     276:	f080 808b 	bcs.w	390 <CONFIG_IDLE_STACK_SIZE+0x290>
     27a:	42ab      	cmp	r3, r5
     27c:	f240 8088 	bls.w	390 <CONFIG_IDLE_STACK_SIZE+0x290>
     280:	3902      	subs	r1, #2
     282:	443d      	add	r5, r7
     284:	1aeb      	subs	r3, r5, r3
     286:	b285      	uxth	r5, r0
     288:	fbb3 f0fe 	udiv	r0, r3, lr
     28c:	fb0e 3310 	mls	r3, lr, r0, r3
     290:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
     294:	fb00 f308 	mul.w	r3, r0, r8
     298:	42ab      	cmp	r3, r5
     29a:	d907      	bls.n	2ac <CONFIG_IDLE_STACK_SIZE+0x1ac>
     29c:	197d      	adds	r5, r7, r5
     29e:	f100 3cff 	add.w	ip, r0, #4294967295
     2a2:	d271      	bcs.n	388 <CONFIG_IDLE_STACK_SIZE+0x288>
     2a4:	42ab      	cmp	r3, r5
     2a6:	d96f      	bls.n	388 <CONFIG_IDLE_STACK_SIZE+0x288>
     2a8:	3802      	subs	r0, #2
     2aa:	443d      	add	r5, r7
     2ac:	1aeb      	subs	r3, r5, r3
     2ae:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
     2b2:	e778      	b.n	1a6 <CONFIG_IDLE_STACK_SIZE+0xa6>
     2b4:	f1c1 0c20 	rsb	ip, r1, #32
     2b8:	408b      	lsls	r3, r1
     2ba:	fa22 f70c 	lsr.w	r7, r2, ip
     2be:	431f      	orrs	r7, r3
     2c0:	fa20 f40c 	lsr.w	r4, r0, ip
     2c4:	fa05 f301 	lsl.w	r3, r5, r1
     2c8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     2cc:	fa25 f50c 	lsr.w	r5, r5, ip
     2d0:	431c      	orrs	r4, r3
     2d2:	0c23      	lsrs	r3, r4, #16
     2d4:	fbb5 f9fe 	udiv	r9, r5, lr
     2d8:	fa1f f887 	uxth.w	r8, r7
     2dc:	fb0e 5519 	mls	r5, lr, r9, r5
     2e0:	ea43 4505 	orr.w	r5, r3, r5, lsl #16
     2e4:	fb09 fa08 	mul.w	sl, r9, r8
     2e8:	45aa      	cmp	sl, r5
     2ea:	fa02 f201 	lsl.w	r2, r2, r1
     2ee:	fa00 f301 	lsl.w	r3, r0, r1
     2f2:	d908      	bls.n	306 <CONFIG_IDLE_STACK_SIZE+0x206>
     2f4:	197d      	adds	r5, r7, r5
     2f6:	f109 30ff 	add.w	r0, r9, #4294967295
     2fa:	d247      	bcs.n	38c <CONFIG_IDLE_STACK_SIZE+0x28c>
     2fc:	45aa      	cmp	sl, r5
     2fe:	d945      	bls.n	38c <CONFIG_IDLE_STACK_SIZE+0x28c>
     300:	f1a9 0902 	sub.w	r9, r9, #2
     304:	443d      	add	r5, r7
     306:	eba5 050a 	sub.w	r5, r5, sl
     30a:	b2a4      	uxth	r4, r4
     30c:	fbb5 f0fe 	udiv	r0, r5, lr
     310:	fb0e 5510 	mls	r5, lr, r0, r5
     314:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
     318:	fb00 f808 	mul.w	r8, r0, r8
     31c:	45a0      	cmp	r8, r4
     31e:	d907      	bls.n	330 <CONFIG_IDLE_STACK_SIZE+0x230>
     320:	193c      	adds	r4, r7, r4
     322:	f100 35ff 	add.w	r5, r0, #4294967295
     326:	d22d      	bcs.n	384 <CONFIG_IDLE_STACK_SIZE+0x284>
     328:	45a0      	cmp	r8, r4
     32a:	d92b      	bls.n	384 <CONFIG_IDLE_STACK_SIZE+0x284>
     32c:	3802      	subs	r0, #2
     32e:	443c      	add	r4, r7
     330:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
     334:	eba4 0408 	sub.w	r4, r4, r8
     338:	fba0 8902 	umull	r8, r9, r0, r2
     33c:	454c      	cmp	r4, r9
     33e:	46c6      	mov	lr, r8
     340:	464d      	mov	r5, r9
     342:	d319      	bcc.n	378 <CONFIG_IDLE_STACK_SIZE+0x278>
     344:	d016      	beq.n	374 <CONFIG_IDLE_STACK_SIZE+0x274>
     346:	b15e      	cbz	r6, 360 <CONFIG_IDLE_STACK_SIZE+0x260>
     348:	ebb3 020e 	subs.w	r2, r3, lr
     34c:	eb64 0405 	sbc.w	r4, r4, r5
     350:	fa04 fc0c 	lsl.w	ip, r4, ip
     354:	40ca      	lsrs	r2, r1
     356:	ea4c 0202 	orr.w	r2, ip, r2
     35a:	40cc      	lsrs	r4, r1
     35c:	e9c6 2400 	strd	r2, r4, [r6]
     360:	2100      	movs	r1, #0
     362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     366:	4631      	mov	r1, r6
     368:	4630      	mov	r0, r6
     36a:	e70e      	b.n	18a <CONFIG_IDLE_STACK_SIZE+0x8a>
     36c:	46ac      	mov	ip, r5
     36e:	e6ed      	b.n	14c <CONFIG_IDLE_STACK_SIZE+0x4c>
     370:	4618      	mov	r0, r3
     372:	e701      	b.n	178 <CONFIG_IDLE_STACK_SIZE+0x78>
     374:	4543      	cmp	r3, r8
     376:	d2e6      	bcs.n	346 <CONFIG_IDLE_STACK_SIZE+0x246>
     378:	ebb8 0e02 	subs.w	lr, r8, r2
     37c:	eb69 0507 	sbc.w	r5, r9, r7
     380:	3801      	subs	r0, #1
     382:	e7e0      	b.n	346 <CONFIG_IDLE_STACK_SIZE+0x246>
     384:	4628      	mov	r0, r5
     386:	e7d3      	b.n	330 <CONFIG_IDLE_STACK_SIZE+0x230>
     388:	4660      	mov	r0, ip
     38a:	e78f      	b.n	2ac <CONFIG_IDLE_STACK_SIZE+0x1ac>
     38c:	4681      	mov	r9, r0
     38e:	e7ba      	b.n	306 <CONFIG_IDLE_STACK_SIZE+0x206>
     390:	4661      	mov	r1, ip
     392:	e777      	b.n	284 <CONFIG_IDLE_STACK_SIZE+0x184>
     394:	4608      	mov	r0, r1
     396:	e74b      	b.n	230 <CONFIG_IDLE_STACK_SIZE+0x130>
     398:	f1ac 0c02 	sub.w	ip, ip, #2
     39c:	443d      	add	r5, r7
     39e:	e715      	b.n	1cc <CONFIG_IDLE_STACK_SIZE+0xcc>
     3a0:	3802      	subs	r0, #2
     3a2:	443c      	add	r4, r7
     3a4:	e726      	b.n	1f4 <CONFIG_IDLE_STACK_SIZE+0xf4>
     3a6:	bf00      	nop

000003a8 <__aeabi_idiv0>:
     3a8:	4770      	bx	lr
     3aa:	bf00      	nop

000003ac <main>:
#include <sys/printk.h>
#include "myuart.h"


void main(void)
{
     3ac:	b500      	push	{lr}
     3ae:	b085      	sub	sp, #20
	unsigned char a[] = "hello world\r\n";
     3b0:	4b0c      	ldr	r3, [pc, #48]	; (3e4 <main+0x38>)
     3b2:	466c      	mov	r4, sp
     3b4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
     3b6:	c407      	stmia	r4!, {r0, r1, r2}
     3b8:	8023      	strh	r3, [r4, #0]

	NRFX_DELAY_US(1000000);
     3ba:	480b      	ldr	r0, [pc, #44]	; (3e8 <main+0x3c>)
     3bc:	f004 fe70 	bl	50a0 <nrfx_busy_wait>
	uart_init();
     3c0:	f000 f81a 	bl	3f8 <uart_init>

	while (1){
		uart_tx(uart, a, sizeof(a), 10000);
     3c4:	4b09      	ldr	r3, [pc, #36]	; (3ec <main+0x40>)
     3c6:	6818      	ldr	r0, [r3, #0]
static inline int z_impl_uart_tx(const struct device *dev, const uint8_t *buf,
				 size_t len, int32_t timeout)

{
#ifdef CONFIG_UART_ASYNC_API
	const struct uart_driver_api *api =
     3c8:	6883      	ldr	r3, [r0, #8]
			(const struct uart_driver_api *)dev->api;

	return api->tx(dev, buf, len, timeout);
     3ca:	685c      	ldr	r4, [r3, #4]
     3cc:	f242 7310 	movw	r3, #10000	; 0x2710
     3d0:	220e      	movs	r2, #14
     3d2:	4669      	mov	r1, sp
     3d4:	47a0      	blx	r4
		printk("hello world!\r\n");
     3d6:	4806      	ldr	r0, [pc, #24]	; (3f0 <main+0x44>)
     3d8:	f003 fc55 	bl	3c86 <printk>
		NRFX_DELAY_US(2000000);
     3dc:	4805      	ldr	r0, [pc, #20]	; (3f4 <main+0x48>)
     3de:	f004 fe5f 	bl	50a0 <nrfx_busy_wait>
	while (1){
     3e2:	e7ef      	b.n	3c4 <main+0x18>
     3e4:	000056e8 	.word	0x000056e8
     3e8:	000f4240 	.word	0x000f4240
     3ec:	200002b4 	.word	0x200002b4
     3f0:	000056d8 	.word	0x000056d8
     3f4:	001e8480 	.word	0x001e8480

000003f8 <uart_init>:

static void uart_cb(const struct device *dev, struct uart_event *evt, void *user_data);


int uart_init(void)
{
     3f8:	b510      	push	{r4, lr}
		/* coverity[OVERRUN] */
		return (const struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
     3fa:	480e      	ldr	r0, [pc, #56]	; (434 <CONFIG_MAIN_STACK_SIZE+0x34>)
     3fc:	f002 fbc4 	bl	2b88 <z_impl_device_get_binding>
	int err;
	static struct uart_data_t rx;

	uart = device_get_binding(DT_LABEL(DT_NODELABEL(uart0)));
     400:	4b0d      	ldr	r3, [pc, #52]	; (438 <CONFIG_MAIN_STACK_SIZE+0x38>)
     402:	6018      	str	r0, [r3, #0]
	if (!uart) {
     404:	b190      	cbz	r0, 42c <CONFIG_MAIN_STACK_SIZE+0x2c>
	const struct uart_driver_api *api =
     406:	6883      	ldr	r3, [r0, #8]
	if (api->callback_set == NULL) {
     408:	681b      	ldr	r3, [r3, #0]
     40a:	b163      	cbz	r3, 426 <CONFIG_MAIN_STACK_SIZE+0x26>
	return api->callback_set(dev, callback, user_data);
     40c:	2200      	movs	r2, #0
     40e:	490b      	ldr	r1, [pc, #44]	; (43c <CONFIG_MAIN_STACK_SIZE+0x3c>)
     410:	4798      	blx	r3
		return -ENXIO;
	}

	err = uart_callback_set(uart, uart_cb, NULL);
	if (err) {
     412:	b938      	cbnz	r0, 424 <CONFIG_MAIN_STACK_SIZE+0x24>
		return err;
	}

	return uart_rx_enable(uart, rx.data, sizeof(rx.data),
     414:	4b08      	ldr	r3, [pc, #32]	; (438 <CONFIG_MAIN_STACK_SIZE+0x38>)
     416:	6818      	ldr	r0, [r3, #0]
static inline int z_impl_uart_rx_enable(const struct device *dev,
					uint8_t *buf,
					size_t len, int32_t timeout)
{
#ifdef CONFIG_UART_ASYNC_API
	const struct uart_driver_api *api =
     418:	6883      	ldr	r3, [r0, #8]
				(const struct uart_driver_api *)dev->api;

	return api->rx_enable(dev, buf, len, timeout);
     41a:	68dc      	ldr	r4, [r3, #12]
     41c:	2332      	movs	r3, #50	; 0x32
     41e:	2214      	movs	r2, #20
     420:	4907      	ldr	r1, [pc, #28]	; (440 <CONFIG_MAIN_STACK_SIZE+0x40>)
     422:	47a0      	blx	r4
			      UART_RX_TIMEOUT);
}
     424:	bd10      	pop	{r4, pc}
		return -ENOSYS;
     426:	f06f 0057 	mvn.w	r0, #87	; 0x57
		return err;
     42a:	e7fb      	b.n	424 <CONFIG_MAIN_STACK_SIZE+0x24>
		return -ENXIO;
     42c:	f06f 0005 	mvn.w	r0, #5
     430:	e7f8      	b.n	424 <CONFIG_MAIN_STACK_SIZE+0x24>
     432:	bf00      	nop
     434:	000056f8 	.word	0x000056f8
     438:	200002b4 	.word	0x200002b4
     43c:	00003c09 	.word	0x00003c09
     440:	2000029c 	.word	0x2000029c

00000444 <char_out>:
struct out_context {
	int count;
};

static int char_out(int c, void *ctx_p)
{
     444:	b508      	push	{r3, lr}
	struct out_context *ctx = ctx_p;

	ctx->count++;
     446:	680b      	ldr	r3, [r1, #0]
     448:	3301      	adds	r3, #1
     44a:	600b      	str	r3, [r1, #0]
	return _char_out(c);
     44c:	4b01      	ldr	r3, [pc, #4]	; (454 <char_out+0x10>)
     44e:	681b      	ldr	r3, [r3, #0]
     450:	4798      	blx	r3
}
     452:	bd08      	pop	{r3, pc}
     454:	20000000 	.word	0x20000000

00000458 <vprintk>:
#endif
	}
}
#else
void vprintk(const char *fmt, va_list ap)
{
     458:	b500      	push	{lr}
     45a:	b083      	sub	sp, #12
     45c:	4602      	mov	r2, r0
     45e:	460b      	mov	r3, r1
	struct out_context ctx = { 0 };
     460:	2100      	movs	r1, #0
     462:	9101      	str	r1, [sp, #4]
#ifdef CONFIG_PRINTK_SYNC
	k_spinlock_key_t key = k_spin_lock(&lock);
#endif

	cbvprintf(char_out, &ctx, fmt, ap);
     464:	a901      	add	r1, sp, #4
     466:	4803      	ldr	r0, [pc, #12]	; (474 <vprintk+0x1c>)
     468:	f000 f8c8 	bl	5fc <cbvprintf>

#ifdef CONFIG_PRINTK_SYNC
	k_spin_unlock(&lock, key);
#endif
}
     46c:	b003      	add	sp, #12
     46e:	f85d fb04 	ldr.w	pc, [sp], #4
     472:	bf00      	nop
     474:	00000445 	.word	0x00000445

00000478 <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
     478:	b510      	push	{r4, lr}
     47a:	b084      	sub	sp, #16
     47c:	4604      	mov	r4, r0
	struct str_context ctx = { str, size, 0 };
     47e:	9001      	str	r0, [sp, #4]
     480:	9102      	str	r1, [sp, #8]
     482:	2100      	movs	r1, #0
     484:	9103      	str	r1, [sp, #12]

	cbvprintf(str_out, &ctx, fmt, ap);
     486:	a901      	add	r1, sp, #4
     488:	4805      	ldr	r0, [pc, #20]	; (4a0 <vsnprintk+0x28>)
     48a:	f000 f8b7 	bl	5fc <cbvprintf>

	if (ctx.count < ctx.max) {
     48e:	9b03      	ldr	r3, [sp, #12]
     490:	9a02      	ldr	r2, [sp, #8]
     492:	4293      	cmp	r3, r2
     494:	da01      	bge.n	49a <vsnprintk+0x22>
		str[ctx.count] = '\0';
     496:	2200      	movs	r2, #0
     498:	54e2      	strb	r2, [r4, r3]
	}

	return ctx.count;
}
     49a:	9803      	ldr	r0, [sp, #12]
     49c:	b004      	add	sp, #16
     49e:	bd10      	pop	{r4, pc}
     4a0:	00003c57 	.word	0x00003c57

000004a4 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
     4a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
     4a8:	b083      	sub	sp, #12
     4aa:	4604      	mov	r4, r0
     4ac:	4608      	mov	r0, r1
     4ae:	4615      	mov	r5, r2
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     4b0:	8b23      	ldrh	r3, [r4, #24]
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
     4b2:	f013 0f08 	tst.w	r3, #8
     4b6:	d105      	bne.n	4c4 <process_event+0x20>
     4b8:	f003 0607 	and.w	r6, r3, #7
 *
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
     4bc:	2300      	movs	r3, #0
     4be:	9300      	str	r3, [sp, #0]
	list->tail = NULL;
     4c0:	9301      	str	r3, [sp, #4]
}
     4c2:	e069      	b.n	598 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xb0>
		if (evt == EVT_COMPLETE) {
     4c4:	2901      	cmp	r1, #1
     4c6:	d009      	beq.n	4dc <process_event+0x38>
			mgr->flags |= ONOFF_FLAG_COMPLETE;
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
     4c8:	f043 0320 	orr.w	r3, r3, #32
     4cc:	8323      	strh	r3, [r4, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
     4ce:	f385 8811 	msr	BASEPRI, r5
     4d2:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
     4d6:	b003      	add	sp, #12
     4d8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			mgr->flags |= ONOFF_FLAG_COMPLETE;
     4dc:	f043 0310 	orr.w	r3, r3, #16
     4e0:	8323      	strh	r3, [r4, #24]
     4e2:	e7f4      	b.n	4ce <process_event+0x2a>
			evt = process_recheck(mgr);
     4e4:	4620      	mov	r0, r4
     4e6:	f003 fc11 	bl	3d0c <process_recheck>
     4ea:	e057      	b.n	59c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xb4>
			res = mgr->last_res;
     4ec:	f8d4 9014 	ldr.w	r9, [r4, #20]
			process_complete(mgr, &clients, res);
     4f0:	464a      	mov	r2, r9
     4f2:	4669      	mov	r1, sp
     4f4:	4620      	mov	r0, r4
     4f6:	f003 fc22 	bl	3d3e <process_complete>
		onoff_transition_fn transit = NULL;
     4fa:	2700      	movs	r7, #0
     4fc:	e05a      	b.n	5b4 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xcc>
			transit = mgr->transitions->start;
     4fe:	6923      	ldr	r3, [r4, #16]
     500:	681f      	ldr	r7, [r3, #0]
			set_state(mgr, ONOFF_STATE_TO_ON);
     502:	2106      	movs	r1, #6
     504:	4620      	mov	r0, r4
     506:	f003 fbda 	bl	3cbe <set_state>
		res = 0;
     50a:	f04f 0900 	mov.w	r9, #0
     50e:	e051      	b.n	5b4 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xcc>
			transit = mgr->transitions->stop;
     510:	6923      	ldr	r3, [r4, #16]
     512:	685f      	ldr	r7, [r3, #4]
			set_state(mgr, ONOFF_STATE_TO_OFF);
     514:	2104      	movs	r1, #4
     516:	4620      	mov	r0, r4
     518:	f003 fbd1 	bl	3cbe <set_state>
		res = 0;
     51c:	f04f 0900 	mov.w	r9, #0
     520:	e048      	b.n	5b4 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xcc>
			transit = mgr->transitions->reset;
     522:	6923      	ldr	r3, [r4, #16]
     524:	689f      	ldr	r7, [r3, #8]
			set_state(mgr, ONOFF_STATE_RESETTING);
     526:	2105      	movs	r1, #5
     528:	4620      	mov	r0, r4
     52a:	f003 fbc8 	bl	3cbe <set_state>
		res = 0;
     52e:	f04f 0900 	mov.w	r9, #0
     532:	e03f      	b.n	5b4 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xcc>
				   && !sys_slist_is_empty(&mgr->monitors);
     534:	2200      	movs	r2, #0
     536:	e046      	b.n	5c6 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xde>
     538:	2200      	movs	r2, #0
     53a:	e044      	b.n	5c6 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xde>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
     53c:	f043 0308 	orr.w	r3, r3, #8
			mgr->flags = flags;
     540:	8323      	strh	r3, [r4, #24]
     542:	f385 8811 	msr	BASEPRI, r5
     546:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
     54a:	2900      	cmp	r1, #0
     54c:	d144      	bne.n	5d8 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xf0>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
     54e:	9b00      	ldr	r3, [sp, #0]
			if (!sys_slist_is_empty(&clients)) {
     550:	b12b      	cbz	r3, 55e <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x76>
				notify_all(mgr, &clients, state, res);
     552:	464b      	mov	r3, r9
     554:	4642      	mov	r2, r8
     556:	4669      	mov	r1, sp
     558:	4620      	mov	r0, r4
     55a:	f003 fc66 	bl	3e2a <notify_all>
			if (transit != NULL) {
     55e:	b117      	cbz	r7, 566 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x7e>
				transit(mgr, transition_complete);
     560:	4925      	ldr	r1, [pc, #148]	; (5f8 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x110>)
     562:	4620      	mov	r0, r4
     564:	47b8      	blx	r7
	__asm__ volatile(
     566:	f04f 0320 	mov.w	r3, #32
     56a:	f3ef 8511 	mrs	r5, BASEPRI
     56e:	f383 8812 	msr	BASEPRI_MAX, r3
     572:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
     576:	8b23      	ldrh	r3, [r4, #24]
     578:	f023 0308 	bic.w	r3, r3, #8
     57c:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
     57e:	8b23      	ldrh	r3, [r4, #24]
     580:	f013 0f10 	tst.w	r3, #16
     584:	d02e      	beq.n	5e4 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xfc>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
     586:	f023 0310 	bic.w	r3, r3, #16
     58a:	8323      	strh	r3, [r4, #24]
			evt = EVT_COMPLETE;
     58c:	2001      	movs	r0, #1
		state = mgr->flags & ONOFF_STATE_MASK;
     58e:	8b26      	ldrh	r6, [r4, #24]
     590:	f006 0607 	and.w	r6, r6, #7
	} while (evt != EVT_NOP);
     594:	2800      	cmp	r0, #0
     596:	d09a      	beq.n	4ce <process_event+0x2a>
		if (evt == EVT_RECHECK) {
     598:	2802      	cmp	r0, #2
     59a:	d0a3      	beq.n	4e4 <process_event+0x40>
		if (evt == EVT_NOP) {
     59c:	2800      	cmp	r0, #0
     59e:	d096      	beq.n	4ce <process_event+0x2a>
		if (evt == EVT_COMPLETE) {
     5a0:	2801      	cmp	r0, #1
     5a2:	d0a3      	beq.n	4ec <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x4>
		} else if (evt == EVT_START) {
     5a4:	2803      	cmp	r0, #3
     5a6:	d0aa      	beq.n	4fe <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x16>
		} else if (evt == EVT_STOP) {
     5a8:	2804      	cmp	r0, #4
     5aa:	d0b1      	beq.n	510 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x28>
		} else if (evt == EVT_RESET) {
     5ac:	2805      	cmp	r0, #5
     5ae:	d0b8      	beq.n	522 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x3a>
		onoff_transition_fn transit = NULL;
     5b0:	2700      	movs	r7, #0
		res = 0;
     5b2:	46b9      	mov	r9, r7
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
     5b4:	8b23      	ldrh	r3, [r4, #24]
     5b6:	f003 0807 	and.w	r8, r3, #7
				   && !sys_slist_is_empty(&mgr->monitors);
     5ba:	45b0      	cmp	r8, r6
     5bc:	d0ba      	beq.n	534 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x4c>
     5be:	68a2      	ldr	r2, [r4, #8]
     5c0:	2a00      	cmp	r2, #0
     5c2:	d0b9      	beq.n	538 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x50>
     5c4:	2201      	movs	r2, #1
		if (do_monitors
     5c6:	4611      	mov	r1, r2
     5c8:	2a00      	cmp	r2, #0
     5ca:	d1b7      	bne.n	53c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x54>
     5cc:	9a00      	ldr	r2, [sp, #0]
		    || !sys_slist_is_empty(&clients)
     5ce:	2a00      	cmp	r2, #0
     5d0:	d1b4      	bne.n	53c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x54>
		    || (transit != NULL)) {
     5d2:	2f00      	cmp	r7, #0
     5d4:	d1b2      	bne.n	53c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x54>
     5d6:	e7d2      	b.n	57e <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x96>
				notify_monitors(mgr, state, res);
     5d8:	464a      	mov	r2, r9
     5da:	4641      	mov	r1, r8
     5dc:	4620      	mov	r0, r4
     5de:	f003 fb76 	bl	3cce <notify_monitors>
     5e2:	e7b4      	b.n	54e <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x66>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
     5e4:	f013 0f20 	tst.w	r3, #32
     5e8:	d004      	beq.n	5f4 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x10c>
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
     5ea:	f023 0320 	bic.w	r3, r3, #32
     5ee:	8323      	strh	r3, [r4, #24]
			evt = EVT_RECHECK;
     5f0:	2002      	movs	r0, #2
     5f2:	e7cc      	b.n	58e <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xa6>
		evt = EVT_NOP;
     5f4:	2000      	movs	r0, #0
     5f6:	e7ca      	b.n	58e <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xa6>
     5f8:	00003e59 	.word	0x00003e59

000005fc <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
     5fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     600:	b093      	sub	sp, #76	; 0x4c
     602:	4606      	mov	r6, r0
     604:	460d      	mov	r5, r1
     606:	4692      	mov	sl, r2
     608:	9303      	str	r3, [sp, #12]
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
     60a:	2400      	movs	r4, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
     60c:	f89a 0000 	ldrb.w	r0, [sl]
     610:	2800      	cmp	r0, #0
     612:	f000 84d6 	beq.w	fc2 <CONFIG_ISR_STACK_SIZE+0x7c2>
		if (*fp != '%') {
     616:	2825      	cmp	r0, #37	; 0x25
     618:	d008      	beq.n	62c <cbvprintf+0x30>
			OUTC(*fp++);
     61a:	f10a 0a01 	add.w	sl, sl, #1
     61e:	4629      	mov	r1, r5
     620:	47b0      	blx	r6
     622:	2800      	cmp	r0, #0
     624:	f2c0 84ce 	blt.w	fc4 <CONFIG_ISR_STACK_SIZE+0x7c4>
     628:	3401      	adds	r4, #1
			continue;
     62a:	e7ef      	b.n	60c <cbvprintf+0x10>
		 * mitigate LLVM code generation bug.
		 */
		struct {
			union argument_value value;
			struct conversion conv;
		} state = {
     62c:	2300      	movs	r3, #0
     62e:	9306      	str	r3, [sp, #24]
     630:	9307      	str	r3, [sp, #28]
     632:	930b      	str	r3, [sp, #44]	; 0x2c
	*conv = (struct conversion) {
     634:	9308      	str	r3, [sp, #32]
     636:	9309      	str	r3, [sp, #36]	; 0x24
     638:	930a      	str	r3, [sp, #40]	; 0x28
	++sp;
     63a:	f10a 0801 	add.w	r8, sl, #1
	if (*sp == '%') {
     63e:	f89a 3001 	ldrb.w	r3, [sl, #1]
     642:	2b25      	cmp	r3, #37	; 0x25
     644:	d001      	beq.n	64a <cbvprintf+0x4e>
	bool loop = true;
     646:	2701      	movs	r7, #1
     648:	e02c      	b.n	6a4 <cbvprintf+0xa8>
		conv->specifier = *sp++;
     64a:	f10a 0802 	add.w	r8, sl, #2
     64e:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
		return sp;
     652:	e1a8      	b.n	9a6 <CONFIG_ISR_STACK_SIZE+0x1a6>
			conv->flag_dash = true;
     654:	f89d 3020 	ldrb.w	r3, [sp, #32]
     658:	f043 0304 	orr.w	r3, r3, #4
     65c:	f88d 3020 	strb.w	r3, [sp, #32]
		if (loop) {
     660:	b1ff      	cbz	r7, 6a2 <cbvprintf+0xa6>
			++sp;
     662:	f108 0801 	add.w	r8, r8, #1
     666:	e01c      	b.n	6a2 <cbvprintf+0xa6>
			conv->flag_plus = true;
     668:	f89d 3020 	ldrb.w	r3, [sp, #32]
     66c:	f043 0308 	orr.w	r3, r3, #8
     670:	f88d 3020 	strb.w	r3, [sp, #32]
			break;
     674:	e7f4      	b.n	660 <cbvprintf+0x64>
			conv->flag_space = true;
     676:	f89d 3020 	ldrb.w	r3, [sp, #32]
     67a:	f043 0310 	orr.w	r3, r3, #16
     67e:	f88d 3020 	strb.w	r3, [sp, #32]
			break;
     682:	e7ed      	b.n	660 <cbvprintf+0x64>
			conv->flag_hash = true;
     684:	f89d 3020 	ldrb.w	r3, [sp, #32]
     688:	f043 0320 	orr.w	r3, r3, #32
     68c:	f88d 3020 	strb.w	r3, [sp, #32]
			break;
     690:	e7e6      	b.n	660 <cbvprintf+0x64>
			conv->flag_zero = true;
     692:	f89d 3020 	ldrb.w	r3, [sp, #32]
     696:	f043 0340 	orr.w	r3, r3, #64	; 0x40
     69a:	f88d 3020 	strb.w	r3, [sp, #32]
			break;
     69e:	e7df      	b.n	660 <cbvprintf+0x64>
		switch (*sp) {
     6a0:	2700      	movs	r7, #0
	} while (loop);
     6a2:	b34f      	cbz	r7, 6f8 <cbvprintf+0xfc>
		switch (*sp) {
     6a4:	f898 3000 	ldrb.w	r3, [r8]
     6a8:	3b20      	subs	r3, #32
     6aa:	2b10      	cmp	r3, #16
     6ac:	d8f8      	bhi.n	6a0 <cbvprintf+0xa4>
     6ae:	a201      	add	r2, pc, #4	; (adr r2, 6b4 <cbvprintf+0xb8>)
     6b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
     6b4:	00000677 	.word	0x00000677
     6b8:	000006a1 	.word	0x000006a1
     6bc:	000006a1 	.word	0x000006a1
     6c0:	00000685 	.word	0x00000685
     6c4:	000006a1 	.word	0x000006a1
     6c8:	000006a1 	.word	0x000006a1
     6cc:	000006a1 	.word	0x000006a1
     6d0:	000006a1 	.word	0x000006a1
     6d4:	000006a1 	.word	0x000006a1
     6d8:	000006a1 	.word	0x000006a1
     6dc:	000006a1 	.word	0x000006a1
     6e0:	00000669 	.word	0x00000669
     6e4:	000006a1 	.word	0x000006a1
     6e8:	00000655 	.word	0x00000655
     6ec:	000006a1 	.word	0x000006a1
     6f0:	000006a1 	.word	0x000006a1
     6f4:	00000693 	.word	0x00000693
	if (conv->flag_zero && conv->flag_dash) {
     6f8:	f89d 3020 	ldrb.w	r3, [sp, #32]
     6fc:	f003 0344 	and.w	r3, r3, #68	; 0x44
     700:	2b44      	cmp	r3, #68	; 0x44
     702:	d06d      	beq.n	7e0 <cbvprintf+0x1e4>
	sp = extract_width(conv, sp);
     704:	f8cd 8014 	str.w	r8, [sp, #20]
	conv->width_present = true;
     708:	f89d 3020 	ldrb.w	r3, [sp, #32]
     70c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
     710:	f88d 3020 	strb.w	r3, [sp, #32]
	if (*sp == '*') {
     714:	f898 3000 	ldrb.w	r3, [r8]
     718:	2b2a      	cmp	r3, #42	; 0x2a
     71a:	d068      	beq.n	7ee <cbvprintf+0x1f2>
	size_t width = extract_decimal(&sp);
     71c:	a805      	add	r0, sp, #20
     71e:	f003 fc2b 	bl	3f78 <extract_decimal>
	if (sp != wp) {
     722:	9b05      	ldr	r3, [sp, #20]
     724:	4598      	cmp	r8, r3
     726:	d012      	beq.n	74e <cbvprintf+0x152>
		conv->width_present = true;
     728:	f89d 3020 	ldrb.w	r3, [sp, #32]
     72c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
     730:	f88d 3020 	strb.w	r3, [sp, #32]
		conv->width_value = width;
     734:	9009      	str	r0, [sp, #36]	; 0x24
		conv->unsupported |= ((conv->width_value < 0)
     736:	f3c3 0340 	ubfx	r3, r3, #1, #1
				      || (width != (size_t)conv->width_value));
     73a:	2800      	cmp	r0, #0
     73c:	db60      	blt.n	800 <CONFIG_ISR_STACK_SIZE>
     73e:	2200      	movs	r2, #0
		conv->unsupported |= ((conv->width_value < 0)
     740:	4313      	orrs	r3, r2
     742:	f89d 2020 	ldrb.w	r2, [sp, #32]
     746:	f363 0241 	bfi	r2, r3, #1, #1
     74a:	f88d 2020 	strb.w	r2, [sp, #32]
	return sp;
     74e:	9b05      	ldr	r3, [sp, #20]
	sp = extract_prec(conv, sp);
     750:	9305      	str	r3, [sp, #20]
	conv->prec_present = (*sp == '.');
     752:	781b      	ldrb	r3, [r3, #0]
     754:	2b2e      	cmp	r3, #46	; 0x2e
     756:	bf14      	ite	ne
     758:	2300      	movne	r3, #0
     75a:	2301      	moveq	r3, #1
     75c:	f89d 2021 	ldrb.w	r2, [sp, #33]	; 0x21
     760:	f363 0241 	bfi	r2, r3, #1, #1
     764:	f88d 2021 	strb.w	r2, [sp, #33]	; 0x21
	if (!conv->prec_present) {
     768:	2b00      	cmp	r3, #0
     76a:	d04b      	beq.n	804 <CONFIG_ISR_STACK_SIZE+0x4>
	++sp;
     76c:	9b05      	ldr	r3, [sp, #20]
     76e:	1c5a      	adds	r2, r3, #1
     770:	9205      	str	r2, [sp, #20]
	if (*sp == '*') {
     772:	785b      	ldrb	r3, [r3, #1]
     774:	2b2a      	cmp	r3, #42	; 0x2a
     776:	d048      	beq.n	80a <CONFIG_ISR_STACK_SIZE+0xa>
	size_t prec = extract_decimal(&sp);
     778:	a805      	add	r0, sp, #20
     77a:	f003 fbfd 	bl	3f78 <extract_decimal>
	conv->prec_value = prec;
     77e:	900a      	str	r0, [sp, #40]	; 0x28
	conv->unsupported |= ((conv->prec_value < 0)
     780:	f89d 3020 	ldrb.w	r3, [sp, #32]
     784:	f3c3 0340 	ubfx	r3, r3, #1, #1
			      || (prec != (size_t)conv->prec_value));
     788:	2800      	cmp	r0, #0
     78a:	db47      	blt.n	81c <CONFIG_ISR_STACK_SIZE+0x1c>
     78c:	2200      	movs	r2, #0
	conv->unsupported |= ((conv->prec_value < 0)
     78e:	4313      	orrs	r3, r2
     790:	f89d 2020 	ldrb.w	r2, [sp, #32]
     794:	f363 0241 	bfi	r2, r3, #1, #1
     798:	f88d 2020 	strb.w	r2, [sp, #32]
	return sp;
     79c:	f8dd 8014 	ldr.w	r8, [sp, #20]
	switch (*sp) {
     7a0:	f898 3000 	ldrb.w	r3, [r8]
     7a4:	3b4c      	subs	r3, #76	; 0x4c
     7a6:	2b2e      	cmp	r3, #46	; 0x2e
     7a8:	f200 80dc 	bhi.w	964 <CONFIG_ISR_STACK_SIZE+0x164>
     7ac:	e8df f003 	tbb	[pc, r3]
     7b0:	dadadaca 	.word	0xdadadaca
     7b4:	dadadada 	.word	0xdadadada
     7b8:	dadadada 	.word	0xdadadada
     7bc:	dadadada 	.word	0xdadadada
     7c0:	dadadada 	.word	0xdadadada
     7c4:	dadadada 	.word	0xdadadada
     7c8:	dadadada 	.word	0xdadadada
     7cc:	da6ada38 	.word	0xda6ada38
     7d0:	dadada51 	.word	0xdadada51
     7d4:	dadadada 	.word	0xdadadada
     7d8:	dadadac0 	.word	0xdadadac0
     7dc:	dada      	.short	0xdada
     7de:	b6          	.byte	0xb6
     7df:	00          	.byte	0x00
		conv->flag_zero = false;
     7e0:	f89d 3020 	ldrb.w	r3, [sp, #32]
     7e4:	f36f 1386 	bfc	r3, #6, #1
     7e8:	f88d 3020 	strb.w	r3, [sp, #32]
     7ec:	e78a      	b.n	704 <cbvprintf+0x108>
		conv->width_star = true;
     7ee:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
     7f2:	f043 0301 	orr.w	r3, r3, #1
     7f6:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		return ++sp;
     7fa:	4643      	mov	r3, r8
     7fc:	3301      	adds	r3, #1
     7fe:	e7a7      	b.n	750 <cbvprintf+0x154>
				      || (width != (size_t)conv->width_value));
     800:	2201      	movs	r2, #1
     802:	e79d      	b.n	740 <cbvprintf+0x144>
		return sp;
     804:	f8dd 8014 	ldr.w	r8, [sp, #20]
     808:	e7ca      	b.n	7a0 <cbvprintf+0x1a4>
		conv->prec_star = true;
     80a:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
     80e:	f043 0304 	orr.w	r3, r3, #4
     812:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		return ++sp;
     816:	f102 0801 	add.w	r8, r2, #1
     81a:	e7c1      	b.n	7a0 <cbvprintf+0x1a4>
			      || (prec != (size_t)conv->prec_value));
     81c:	2201      	movs	r2, #1
     81e:	e7b6      	b.n	78e <cbvprintf+0x192>
		if (*++sp == 'h') {
     820:	f108 0201 	add.w	r2, r8, #1
     824:	f898 3001 	ldrb.w	r3, [r8, #1]
     828:	2b68      	cmp	r3, #104	; 0x68
     82a:	d008      	beq.n	83e <CONFIG_ISR_STACK_SIZE+0x3e>
			conv->length_mod = LENGTH_H;
     82c:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
     830:	2102      	movs	r1, #2
     832:	f361 03c6 	bfi	r3, r1, #3, #4
     836:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		if (*++sp == 'h') {
     83a:	4690      	mov	r8, r2
     83c:	e02b      	b.n	896 <CONFIG_ISR_STACK_SIZE+0x96>
			conv->length_mod = LENGTH_HH;
     83e:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
     842:	2201      	movs	r2, #1
     844:	f362 03c6 	bfi	r3, r2, #3, #4
     848:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
			++sp;
     84c:	f108 0802 	add.w	r8, r8, #2
     850:	e021      	b.n	896 <CONFIG_ISR_STACK_SIZE+0x96>
		if (*++sp == 'l') {
     852:	f108 0201 	add.w	r2, r8, #1
     856:	f898 3001 	ldrb.w	r3, [r8, #1]
     85a:	2b6c      	cmp	r3, #108	; 0x6c
     85c:	d008      	beq.n	870 <CONFIG_ISR_STACK_SIZE+0x70>
			conv->length_mod = LENGTH_L;
     85e:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
     862:	2103      	movs	r1, #3
     864:	f361 03c6 	bfi	r3, r1, #3, #4
     868:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		if (*++sp == 'l') {
     86c:	4690      	mov	r8, r2
     86e:	e012      	b.n	896 <CONFIG_ISR_STACK_SIZE+0x96>
			conv->length_mod = LENGTH_LL;
     870:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
     874:	2204      	movs	r2, #4
     876:	f362 03c6 	bfi	r3, r2, #3, #4
     87a:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
			++sp;
     87e:	f108 0802 	add.w	r8, r8, #2
     882:	e008      	b.n	896 <CONFIG_ISR_STACK_SIZE+0x96>
		conv->length_mod = LENGTH_J;
     884:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
     888:	2205      	movs	r2, #5
     88a:	f362 03c6 	bfi	r3, r2, #3, #4
     88e:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		++sp;
     892:	f108 0801 	add.w	r8, r8, #1
	conv->specifier = *sp++;
     896:	f818 3b01 	ldrb.w	r3, [r8], #1
     89a:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
	switch (conv->specifier) {
     89e:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
     8a2:	2a37      	cmp	r2, #55	; 0x37
     8a4:	f200 8150 	bhi.w	b48 <CONFIG_ISR_STACK_SIZE+0x348>
     8a8:	e8df f012 	tbh	[pc, r2, lsl #1]
     8ac:	014e0126 	.word	0x014e0126
     8b0:	014e014e 	.word	0x014e014e
     8b4:	01260126 	.word	0x01260126
     8b8:	014e0126 	.word	0x014e0126
     8bc:	014e014e 	.word	0x014e014e
     8c0:	014e014e 	.word	0x014e014e
     8c4:	014e014e 	.word	0x014e014e
     8c8:	014e014e 	.word	0x014e014e
     8cc:	014e014e 	.word	0x014e014e
     8d0:	014e014e 	.word	0x014e014e
     8d4:	014e014e 	.word	0x014e014e
     8d8:	0113014e 	.word	0x0113014e
     8dc:	014e014e 	.word	0x014e014e
     8e0:	014e014e 	.word	0x014e014e
     8e4:	014e014e 	.word	0x014e014e
     8e8:	014e014e 	.word	0x014e014e
     8ec:	014e0126 	.word	0x014e0126
     8f0:	00630113 	.word	0x00630113
     8f4:	01260126 	.word	0x01260126
     8f8:	014e0126 	.word	0x014e0126
     8fc:	014e0063 	.word	0x014e0063
     900:	014e014e 	.word	0x014e014e
     904:	012f014e 	.word	0x012f014e
     908:	013f0113 	.word	0x013f0113
     90c:	014e014e 	.word	0x014e014e
     910:	014e013f 	.word	0x014e013f
     914:	014e0113 	.word	0x014e0113
     918:	0113014e 	.word	0x0113014e
		conv->length_mod = LENGTH_Z;
     91c:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
     920:	2206      	movs	r2, #6
     922:	f362 03c6 	bfi	r3, r2, #3, #4
     926:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		++sp;
     92a:	f108 0801 	add.w	r8, r8, #1
		break;
     92e:	e7b2      	b.n	896 <CONFIG_ISR_STACK_SIZE+0x96>
		conv->length_mod = LENGTH_T;
     930:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
     934:	2207      	movs	r2, #7
     936:	f362 03c6 	bfi	r3, r2, #3, #4
     93a:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		++sp;
     93e:	f108 0801 	add.w	r8, r8, #1
		break;
     942:	e7a8      	b.n	896 <CONFIG_ISR_STACK_SIZE+0x96>
		conv->length_mod = LENGTH_UPPER_L;
     944:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
     948:	2208      	movs	r2, #8
     94a:	f362 03c6 	bfi	r3, r2, #3, #4
     94e:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		++sp;
     952:	f108 0801 	add.w	r8, r8, #1
		conv->unsupported = true;
     956:	f89d 3020 	ldrb.w	r3, [sp, #32]
     95a:	f043 0302 	orr.w	r3, r3, #2
     95e:	f88d 3020 	strb.w	r3, [sp, #32]
		break;
     962:	e798      	b.n	896 <CONFIG_ISR_STACK_SIZE+0x96>
		conv->length_mod = LENGTH_NONE;
     964:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
     968:	f36f 03c6 	bfc	r3, #3, #4
     96c:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		break;
     970:	e791      	b.n	896 <CONFIG_ISR_STACK_SIZE+0x96>
		conv->specifier_cat = SPECIFIER_SINT;
     972:	f89d 2022 	ldrb.w	r2, [sp, #34]	; 0x22
     976:	2101      	movs	r1, #1
     978:	f361 0202 	bfi	r2, r1, #0, #3
     97c:	f88d 2022 	strb.w	r2, [sp, #34]	; 0x22
		if (conv->length_mod == LENGTH_UPPER_L) {
     980:	f89d 2021 	ldrb.w	r2, [sp, #33]	; 0x21
     984:	f002 0278 	and.w	r2, r2, #120	; 0x78
     988:	2a40      	cmp	r2, #64	; 0x40
     98a:	f000 80aa 	beq.w	ae2 <CONFIG_ISR_STACK_SIZE+0x2e2>
		if (conv->specifier == 'c') {
     98e:	2b63      	cmp	r3, #99	; 0x63
     990:	f000 80ae 	beq.w	af0 <CONFIG_ISR_STACK_SIZE+0x2f0>
	conv->unsupported |= unsupported;
     994:	f89d 3020 	ldrb.w	r3, [sp, #32]
     998:	f3c3 0240 	ubfx	r2, r3, #1, #1
     99c:	4317      	orrs	r7, r2
     99e:	f367 0341 	bfi	r3, r7, #1, #1
     9a2:	f88d 3020 	strb.w	r3, [sp, #32]
		fp = extract_conversion(conv, sp);

		/* If dynamic width is specified, process it,
		 * otherwise set width if present.
		 */
		if (conv->width_star) {
     9a6:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
     9aa:	f013 0f01 	tst.w	r3, #1
     9ae:	f000 80da 	beq.w	b66 <CONFIG_ISR_STACK_SIZE+0x366>
			width = va_arg(ap, int);
     9b2:	9b03      	ldr	r3, [sp, #12]
     9b4:	1d1a      	adds	r2, r3, #4
     9b6:	9203      	str	r2, [sp, #12]
     9b8:	681f      	ldr	r7, [r3, #0]

			if (width < 0) {
     9ba:	2f00      	cmp	r7, #0
     9bc:	f2c0 80cb 	blt.w	b56 <CONFIG_ISR_STACK_SIZE+0x356>

		/* If dynamic precision is specified, process it, otherwise
		 * set precision if present.  For floating point where
		 * precision is not present use 6.
		 */
		if (conv->prec_star) {
     9c0:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
     9c4:	f013 0f04 	tst.w	r3, #4
     9c8:	f000 80df 	beq.w	b8a <CONFIG_ISR_STACK_SIZE+0x38a>
			int arg = va_arg(ap, int);
     9cc:	9b03      	ldr	r3, [sp, #12]
     9ce:	1d1a      	adds	r2, r3, #4
     9d0:	9203      	str	r2, [sp, #12]
     9d2:	f8d3 b000 	ldr.w	fp, [r3]

			if (arg < 0) {
     9d6:	f1bb 0f00 	cmp.w	fp, #0
     9da:	f2c0 80cd 	blt.w	b78 <CONFIG_ISR_STACK_SIZE+0x378>
		}

		/* Reuse width and precision memory in conv for value
		 * padding counts.
		 */
		conv->pad0_value = 0;
     9de:	2300      	movs	r3, #0
     9e0:	9309      	str	r3, [sp, #36]	; 0x24
		conv->pad0_pre_exp = 0;
     9e2:	930a      	str	r3, [sp, #40]	; 0x28
		 * This can't be extracted to a helper function because
		 * passing a pointer to va_list doesn't work on x86_64.  See
		 * https://stackoverflow.com/a/8048892.
		 */
		enum specifier_cat_enum specifier_cat
			= (enum specifier_cat_enum)conv->specifier_cat;
     9e4:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
     9e8:	f003 0307 	and.w	r3, r3, #7
		enum length_mod_enum length_mod
			= (enum length_mod_enum)conv->length_mod;
     9ec:	f89d 1021 	ldrb.w	r1, [sp, #33]	; 0x21
     9f0:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		/* Extract the value based on the argument category and length.
		 *
		 * Note that the length modifier doesn't affect the value of a
		 * pointer argument.
		 */
		if (specifier_cat == SPECIFIER_SINT) {
     9f4:	2b01      	cmp	r3, #1
     9f6:	f000 80d1 	beq.w	b9c <CONFIG_ISR_STACK_SIZE+0x39c>
			if (length_mod == LENGTH_HH) {
				value->sint = (char)value->sint;
			} else if (length_mod == LENGTH_H) {
				value->sint = (short)value->sint;
			}
		} else if (specifier_cat == SPECIFIER_UINT) {
     9fa:	2b02      	cmp	r3, #2
     9fc:	f000 8116 	beq.w	c2c <CONFIG_ISR_STACK_SIZE+0x42c>
			if (length_mod == LENGTH_HH) {
				value->uint = (unsigned char)value->uint;
			} else if (length_mod == LENGTH_H) {
				value->uint = (unsigned short)value->uint;
			}
		} else if (specifier_cat == SPECIFIER_FP) {
     a00:	2b04      	cmp	r3, #4
     a02:	f000 8167 	beq.w	cd4 <CONFIG_ISR_STACK_SIZE+0x4d4>
			if (length_mod == LENGTH_UPPER_L) {
				value->ldbl = va_arg(ap, long double);
			} else {
				value->dbl = va_arg(ap, double);
			}
		} else if (specifier_cat == SPECIFIER_PTR) {
     a06:	2b03      	cmp	r3, #3
     a08:	f000 817e 	beq.w	d08 <CONFIG_ISR_STACK_SIZE+0x508>
		/* We've now consumed all arguments related to this
		 * specification.  If the conversion is invalid, or is
		 * something we don't support, then output the original
		 * specification and move on.
		 */
		if (conv->invalid || conv->unsupported) {
     a0c:	f89d 9020 	ldrb.w	r9, [sp, #32]
     a10:	f019 0303 	ands.w	r3, r9, #3
     a14:	9302      	str	r3, [sp, #8]
     a16:	f040 817d 	bne.w	d14 <CONFIG_ISR_STACK_SIZE+0x514>
		}

		/* Do formatting, either into the buffer or
		 * referencing external data.
		 */
		switch (conv->specifier) {
     a1a:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
     a1e:	3b25      	subs	r3, #37	; 0x25
     a20:	2b53      	cmp	r3, #83	; 0x53
     a22:	f200 8233 	bhi.w	e8c <CONFIG_ISR_STACK_SIZE+0x68c>
     a26:	e8df f013 	tbh	[pc, r3, lsl #1]
     a2a:	0181      	.short	0x0181
     a2c:	02310231 	.word	0x02310231
     a30:	02310231 	.word	0x02310231
     a34:	02310231 	.word	0x02310231
     a38:	02310231 	.word	0x02310231
     a3c:	02310231 	.word	0x02310231
     a40:	02310231 	.word	0x02310231
     a44:	02310231 	.word	0x02310231
     a48:	02310231 	.word	0x02310231
     a4c:	02310231 	.word	0x02310231
     a50:	02310231 	.word	0x02310231
     a54:	02310231 	.word	0x02310231
     a58:	02310231 	.word	0x02310231
     a5c:	02310231 	.word	0x02310231
     a60:	02310231 	.word	0x02310231
     a64:	02310231 	.word	0x02310231
     a68:	02310231 	.word	0x02310231
     a6c:	02310231 	.word	0x02310231
     a70:	02310231 	.word	0x02310231
     a74:	02310231 	.word	0x02310231
     a78:	02310231 	.word	0x02310231
     a7c:	02310231 	.word	0x02310231
     a80:	02310231 	.word	0x02310231
     a84:	02310231 	.word	0x02310231
     a88:	02310231 	.word	0x02310231
     a8c:	02310231 	.word	0x02310231
     a90:	023101c7 	.word	0x023101c7
     a94:	02310231 	.word	0x02310231
     a98:	02310231 	.word	0x02310231
     a9c:	02310231 	.word	0x02310231
     aa0:	02310231 	.word	0x02310231
     aa4:	01a10231 	.word	0x01a10231
     aa8:	023101ab 	.word	0x023101ab
     aac:	02310231 	.word	0x02310231
     ab0:	01ab0231 	.word	0x01ab0231
     ab4:	02310231 	.word	0x02310231
     ab8:	02310231 	.word	0x02310231
     abc:	01c70208 	.word	0x01c70208
     ac0:	023101ea 	.word	0x023101ea
     ac4:	018f0231 	.word	0x018f0231
     ac8:	01c70231 	.word	0x01c70231
     acc:	02310231 	.word	0x02310231
     ad0:	01c7      	.short	0x01c7
		conv->specifier_cat = SPECIFIER_UINT;
     ad2:	f89d 2022 	ldrb.w	r2, [sp, #34]	; 0x22
     ad6:	2102      	movs	r1, #2
     ad8:	f361 0202 	bfi	r2, r1, #0, #3
     adc:	f88d 2022 	strb.w	r2, [sp, #34]	; 0x22
     ae0:	e74e      	b.n	980 <CONFIG_ISR_STACK_SIZE+0x180>
			conv->invalid = true;
     ae2:	f89d 1020 	ldrb.w	r1, [sp, #32]
     ae6:	f041 0101 	orr.w	r1, r1, #1
     aea:	f88d 1020 	strb.w	r1, [sp, #32]
     aee:	e74e      	b.n	98e <CONFIG_ISR_STACK_SIZE+0x18e>
			unsupported = (conv->length_mod != LENGTH_NONE);
     af0:	1e17      	subs	r7, r2, #0
     af2:	bf18      	it	ne
     af4:	2701      	movne	r7, #1
     af6:	e74d      	b.n	994 <CONFIG_ISR_STACK_SIZE+0x194>
		conv->specifier_cat = SPECIFIER_FP;
     af8:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
     afc:	2204      	movs	r2, #4
     afe:	f362 0302 	bfi	r3, r2, #0, #3
     b02:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
			unsupported = true;
     b06:	2701      	movs	r7, #1
			break;
     b08:	e744      	b.n	994 <CONFIG_ISR_STACK_SIZE+0x194>
		conv->specifier_cat = SPECIFIER_PTR;
     b0a:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
     b0e:	2203      	movs	r2, #3
     b10:	f362 0302 	bfi	r3, r2, #0, #3
     b14:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
		if (conv->length_mod == LENGTH_UPPER_L) {
     b18:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
     b1c:	f003 0378 	and.w	r3, r3, #120	; 0x78
     b20:	2b40      	cmp	r3, #64	; 0x40
     b22:	f47f af37 	bne.w	994 <CONFIG_ISR_STACK_SIZE+0x194>
			unsupported = true;
     b26:	2701      	movs	r7, #1
     b28:	e734      	b.n	994 <CONFIG_ISR_STACK_SIZE+0x194>
		conv->specifier_cat = SPECIFIER_PTR;
     b2a:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
     b2e:	2203      	movs	r2, #3
     b30:	f362 0302 	bfi	r3, r2, #0, #3
     b34:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
		if (conv->length_mod != LENGTH_NONE) {
     b38:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
     b3c:	f013 0f78 	tst.w	r3, #120	; 0x78
     b40:	f43f af28 	beq.w	994 <CONFIG_ISR_STACK_SIZE+0x194>
			unsupported = true;
     b44:	2701      	movs	r7, #1
     b46:	e725      	b.n	994 <CONFIG_ISR_STACK_SIZE+0x194>
		conv->invalid = true;
     b48:	f89d 3020 	ldrb.w	r3, [sp, #32]
     b4c:	f043 0301 	orr.w	r3, r3, #1
     b50:	f88d 3020 	strb.w	r3, [sp, #32]
		break;
     b54:	e71e      	b.n	994 <CONFIG_ISR_STACK_SIZE+0x194>
				conv->flag_dash = true;
     b56:	f89d 3020 	ldrb.w	r3, [sp, #32]
     b5a:	f043 0304 	orr.w	r3, r3, #4
     b5e:	f88d 3020 	strb.w	r3, [sp, #32]
				width = -width;
     b62:	427f      	negs	r7, r7
     b64:	e72c      	b.n	9c0 <CONFIG_ISR_STACK_SIZE+0x1c0>
		} else if (conv->width_present) {
     b66:	f99d 3020 	ldrsb.w	r3, [sp, #32]
     b6a:	2b00      	cmp	r3, #0
     b6c:	db02      	blt.n	b74 <CONFIG_ISR_STACK_SIZE+0x374>
		int width = -1;
     b6e:	f04f 37ff 	mov.w	r7, #4294967295
     b72:	e725      	b.n	9c0 <CONFIG_ISR_STACK_SIZE+0x1c0>
			width = conv->width_value;
     b74:	9f09      	ldr	r7, [sp, #36]	; 0x24
     b76:	e723      	b.n	9c0 <CONFIG_ISR_STACK_SIZE+0x1c0>
				conv->prec_present = false;
     b78:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
     b7c:	f36f 0341 	bfc	r3, #1, #1
     b80:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		int precision = -1;
     b84:	f04f 3bff 	mov.w	fp, #4294967295
     b88:	e729      	b.n	9de <CONFIG_ISR_STACK_SIZE+0x1de>
		} else if (conv->prec_present) {
     b8a:	f013 0f02 	tst.w	r3, #2
     b8e:	d002      	beq.n	b96 <CONFIG_ISR_STACK_SIZE+0x396>
			precision = conv->prec_value;
     b90:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
     b94:	e723      	b.n	9de <CONFIG_ISR_STACK_SIZE+0x1de>
		int precision = -1;
     b96:	f04f 3bff 	mov.w	fp, #4294967295
     b9a:	e720      	b.n	9de <CONFIG_ISR_STACK_SIZE+0x1de>
			switch (length_mod) {
     b9c:	1ecb      	subs	r3, r1, #3
     b9e:	2b04      	cmp	r3, #4
     ba0:	d804      	bhi.n	bac <CONFIG_ISR_STACK_SIZE+0x3ac>
     ba2:	e8df f003 	tbb	[pc, r3]
     ba6:	1d0b      	.short	0x1d0b
     ba8:	3529      	.short	0x3529
     baa:	35          	.byte	0x35
     bab:	00          	.byte	0x00
				value->sint = va_arg(ap, int);
     bac:	9b03      	ldr	r3, [sp, #12]
     bae:	1d1a      	adds	r2, r3, #4
     bb0:	9203      	str	r2, [sp, #12]
     bb2:	681a      	ldr	r2, [r3, #0]
     bb4:	17d3      	asrs	r3, r2, #31
     bb6:	e9cd 2306 	strd	r2, r3, [sp, #24]
				break;
     bba:	e006      	b.n	bca <CONFIG_ISR_STACK_SIZE+0x3ca>
					value->sint = va_arg(ap, long);
     bbc:	9b03      	ldr	r3, [sp, #12]
     bbe:	1d1a      	adds	r2, r3, #4
     bc0:	9203      	str	r2, [sp, #12]
     bc2:	681a      	ldr	r2, [r3, #0]
     bc4:	17d3      	asrs	r3, r2, #31
     bc6:	e9cd 2306 	strd	r2, r3, [sp, #24]
			if (length_mod == LENGTH_HH) {
     bca:	2901      	cmp	r1, #1
     bcc:	d028      	beq.n	c20 <CONFIG_ISR_STACK_SIZE+0x420>
			} else if (length_mod == LENGTH_H) {
     bce:	2902      	cmp	r1, #2
     bd0:	f47f af1c 	bne.w	a0c <CONFIG_ISR_STACK_SIZE+0x20c>
				value->sint = (short)value->sint;
     bd4:	f9bd 2018 	ldrsh.w	r2, [sp, #24]
     bd8:	17d3      	asrs	r3, r2, #31
     bda:	e9cd 2306 	strd	r2, r3, [sp, #24]
     bde:	e715      	b.n	a0c <CONFIG_ISR_STACK_SIZE+0x20c>
					(sint_value_type)va_arg(ap, long long);
     be0:	9b03      	ldr	r3, [sp, #12]
     be2:	3307      	adds	r3, #7
     be4:	f023 0307 	bic.w	r3, r3, #7
     be8:	f103 0208 	add.w	r2, r3, #8
     bec:	9203      	str	r2, [sp, #12]
     bee:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->sint =
     bf2:	e9cd 2306 	strd	r2, r3, [sp, #24]
				break;
     bf6:	e7e8      	b.n	bca <CONFIG_ISR_STACK_SIZE+0x3ca>
					(sint_value_type)va_arg(ap, intmax_t);
     bf8:	9b03      	ldr	r3, [sp, #12]
     bfa:	3307      	adds	r3, #7
     bfc:	f023 0307 	bic.w	r3, r3, #7
     c00:	f103 0208 	add.w	r2, r3, #8
     c04:	9203      	str	r2, [sp, #12]
     c06:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->sint =
     c0a:	e9cd 2306 	strd	r2, r3, [sp, #24]
				break;
     c0e:	e7dc      	b.n	bca <CONFIG_ISR_STACK_SIZE+0x3ca>
					(sint_value_type)va_arg(ap, ptrdiff_t);
     c10:	9b03      	ldr	r3, [sp, #12]
     c12:	1d1a      	adds	r2, r3, #4
     c14:	9203      	str	r2, [sp, #12]
     c16:	681a      	ldr	r2, [r3, #0]
     c18:	17d3      	asrs	r3, r2, #31
				value->sint =
     c1a:	e9cd 2306 	strd	r2, r3, [sp, #24]
				break;
     c1e:	e7d4      	b.n	bca <CONFIG_ISR_STACK_SIZE+0x3ca>
				value->sint = (char)value->sint;
     c20:	f89d 3018 	ldrb.w	r3, [sp, #24]
     c24:	9306      	str	r3, [sp, #24]
     c26:	2300      	movs	r3, #0
     c28:	9307      	str	r3, [sp, #28]
     c2a:	e6ef      	b.n	a0c <CONFIG_ISR_STACK_SIZE+0x20c>
			switch (length_mod) {
     c2c:	1ecb      	subs	r3, r1, #3
     c2e:	2b04      	cmp	r3, #4
     c30:	d804      	bhi.n	c3c <CONFIG_ISR_STACK_SIZE+0x43c>
     c32:	e8df f003 	tbb	[pc, r3]
     c36:	1f0b      	.short	0x1f0b
     c38:	4135      	.short	0x4135
     c3a:	41          	.byte	0x41
     c3b:	00          	.byte	0x00
				value->uint = va_arg(ap, unsigned int);
     c3c:	9b03      	ldr	r3, [sp, #12]
     c3e:	1d1a      	adds	r2, r3, #4
     c40:	9203      	str	r2, [sp, #12]
     c42:	681b      	ldr	r3, [r3, #0]
     c44:	9306      	str	r3, [sp, #24]
     c46:	2300      	movs	r3, #0
     c48:	9307      	str	r3, [sp, #28]
				break;
     c4a:	e01e      	b.n	c8a <CONFIG_ISR_STACK_SIZE+0x48a>
				    && (conv->specifier == 'c')) {
     c4c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
				if ((!WCHAR_IS_SIGNED)
     c50:	2b63      	cmp	r3, #99	; 0x63
     c52:	d007      	beq.n	c64 <CONFIG_ISR_STACK_SIZE+0x464>
					value->uint = va_arg(ap, unsigned long);
     c54:	9b03      	ldr	r3, [sp, #12]
     c56:	1d1a      	adds	r2, r3, #4
     c58:	9203      	str	r2, [sp, #12]
     c5a:	681b      	ldr	r3, [r3, #0]
     c5c:	9306      	str	r3, [sp, #24]
     c5e:	2300      	movs	r3, #0
     c60:	9307      	str	r3, [sp, #28]
     c62:	e012      	b.n	c8a <CONFIG_ISR_STACK_SIZE+0x48a>
					value->uint = (wchar_t)va_arg(ap,
     c64:	9b03      	ldr	r3, [sp, #12]
     c66:	1d1a      	adds	r2, r3, #4
     c68:	9203      	str	r2, [sp, #12]
     c6a:	681b      	ldr	r3, [r3, #0]
     c6c:	9306      	str	r3, [sp, #24]
     c6e:	2300      	movs	r3, #0
     c70:	9307      	str	r3, [sp, #28]
     c72:	e00a      	b.n	c8a <CONFIG_ISR_STACK_SIZE+0x48a>
					(uint_value_type)va_arg(ap,
     c74:	9b03      	ldr	r3, [sp, #12]
     c76:	3307      	adds	r3, #7
     c78:	f023 0307 	bic.w	r3, r3, #7
     c7c:	f103 0208 	add.w	r2, r3, #8
     c80:	9203      	str	r2, [sp, #12]
     c82:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->uint =
     c86:	e9cd 2306 	strd	r2, r3, [sp, #24]
			if (length_mod == LENGTH_HH) {
     c8a:	2901      	cmp	r1, #1
     c8c:	d01c      	beq.n	cc8 <CONFIG_ISR_STACK_SIZE+0x4c8>
			} else if (length_mod == LENGTH_H) {
     c8e:	2902      	cmp	r1, #2
     c90:	f47f aebc 	bne.w	a0c <CONFIG_ISR_STACK_SIZE+0x20c>
				value->uint = (unsigned short)value->uint;
     c94:	f8bd 3018 	ldrh.w	r3, [sp, #24]
     c98:	9306      	str	r3, [sp, #24]
     c9a:	2300      	movs	r3, #0
     c9c:	9307      	str	r3, [sp, #28]
     c9e:	e6b5      	b.n	a0c <CONFIG_ISR_STACK_SIZE+0x20c>
					(uint_value_type)va_arg(ap,
     ca0:	9b03      	ldr	r3, [sp, #12]
     ca2:	3307      	adds	r3, #7
     ca4:	f023 0307 	bic.w	r3, r3, #7
     ca8:	f103 0208 	add.w	r2, r3, #8
     cac:	9203      	str	r2, [sp, #12]
     cae:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->uint =
     cb2:	e9cd 2306 	strd	r2, r3, [sp, #24]
				break;
     cb6:	e7e8      	b.n	c8a <CONFIG_ISR_STACK_SIZE+0x48a>
					(uint_value_type)va_arg(ap, size_t);
     cb8:	9b03      	ldr	r3, [sp, #12]
     cba:	1d1a      	adds	r2, r3, #4
     cbc:	9203      	str	r2, [sp, #12]
     cbe:	681b      	ldr	r3, [r3, #0]
				value->uint =
     cc0:	9306      	str	r3, [sp, #24]
     cc2:	2300      	movs	r3, #0
     cc4:	9307      	str	r3, [sp, #28]
				break;
     cc6:	e7e0      	b.n	c8a <CONFIG_ISR_STACK_SIZE+0x48a>
				value->uint = (unsigned char)value->uint;
     cc8:	f89d 3018 	ldrb.w	r3, [sp, #24]
     ccc:	9306      	str	r3, [sp, #24]
     cce:	2300      	movs	r3, #0
     cd0:	9307      	str	r3, [sp, #28]
     cd2:	e69b      	b.n	a0c <CONFIG_ISR_STACK_SIZE+0x20c>
			if (length_mod == LENGTH_UPPER_L) {
     cd4:	2908      	cmp	r1, #8
     cd6:	d00b      	beq.n	cf0 <CONFIG_ISR_STACK_SIZE+0x4f0>
				value->dbl = va_arg(ap, double);
     cd8:	9b03      	ldr	r3, [sp, #12]
     cda:	3307      	adds	r3, #7
     cdc:	f023 0307 	bic.w	r3, r3, #7
     ce0:	f103 0208 	add.w	r2, r3, #8
     ce4:	9203      	str	r2, [sp, #12]
     ce6:	e9d3 2300 	ldrd	r2, r3, [r3]
     cea:	e9cd 2306 	strd	r2, r3, [sp, #24]
     cee:	e68d      	b.n	a0c <CONFIG_ISR_STACK_SIZE+0x20c>
				value->ldbl = va_arg(ap, long double);
     cf0:	9b03      	ldr	r3, [sp, #12]
     cf2:	3307      	adds	r3, #7
     cf4:	f023 0307 	bic.w	r3, r3, #7
     cf8:	f103 0208 	add.w	r2, r3, #8
     cfc:	9203      	str	r2, [sp, #12]
     cfe:	e9d3 2300 	ldrd	r2, r3, [r3]
     d02:	e9cd 2306 	strd	r2, r3, [sp, #24]
     d06:	e681      	b.n	a0c <CONFIG_ISR_STACK_SIZE+0x20c>
			value->ptr = va_arg(ap, void *);
     d08:	9b03      	ldr	r3, [sp, #12]
     d0a:	1d1a      	adds	r2, r3, #4
     d0c:	9203      	str	r2, [sp, #12]
     d0e:	681b      	ldr	r3, [r3, #0]
     d10:	9306      	str	r3, [sp, #24]
     d12:	e67b      	b.n	a0c <CONFIG_ISR_STACK_SIZE+0x20c>
			OUTS(sp, fp);
     d14:	4643      	mov	r3, r8
     d16:	4652      	mov	r2, sl
     d18:	4629      	mov	r1, r5
     d1a:	4630      	mov	r0, r6
     d1c:	f003 f9a9 	bl	4072 <outs>
     d20:	2800      	cmp	r0, #0
     d22:	f2c0 814f 	blt.w	fc4 <CONFIG_ISR_STACK_SIZE+0x7c4>
     d26:	4404      	add	r4, r0
		fp = extract_conversion(conv, sp);
     d28:	46c2      	mov	sl, r8
			continue;
     d2a:	e46f      	b.n	60c <cbvprintf+0x10>
		case '%':
			OUTC('%');
     d2c:	4629      	mov	r1, r5
     d2e:	2025      	movs	r0, #37	; 0x25
     d30:	47b0      	blx	r6
     d32:	2800      	cmp	r0, #0
     d34:	f2c0 8146 	blt.w	fc4 <CONFIG_ISR_STACK_SIZE+0x7c4>
     d38:	3401      	adds	r4, #1
		char sign = 0;
     d3a:	f8dd 9008 	ldr.w	r9, [sp, #8]
		const char *bpe = buf + sizeof(buf);
     d3e:	f10d 0b46 	add.w	fp, sp, #70	; 0x46
		const char *bps = NULL;
     d42:	f04f 0a00 	mov.w	sl, #0
			break;
     d46:	e0a7      	b.n	e98 <CONFIG_ISR_STACK_SIZE+0x698>
		case 's': {
			bps = (const char *)value->ptr;
     d48:	f8dd a018 	ldr.w	sl, [sp, #24]

			size_t len;

			if (precision >= 0) {
     d4c:	f1bb 0f00 	cmp.w	fp, #0
     d50:	db08      	blt.n	d64 <CONFIG_ISR_STACK_SIZE+0x564>
				len = strnlen(bps, precision);
     d52:	4659      	mov	r1, fp
     d54:	4650      	mov	r0, sl
     d56:	f003 fa77 	bl	4248 <strnlen>
			} else {
				len = strlen(bps);
			}

			bpe = bps + len;
     d5a:	eb0a 0b00 	add.w	fp, sl, r0
		char sign = 0;
     d5e:	f8dd 9008 	ldr.w	r9, [sp, #8]
			precision = -1;

			break;
     d62:	e099      	b.n	e98 <CONFIG_ISR_STACK_SIZE+0x698>
				len = strlen(bps);
     d64:	4650      	mov	r0, sl
     d66:	f003 fa67 	bl	4238 <strlen>
     d6a:	e7f6      	b.n	d5a <CONFIG_ISR_STACK_SIZE+0x55a>
		}
		case 'c':
			bps = buf;
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
     d6c:	9b06      	ldr	r3, [sp, #24]
     d6e:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
		char sign = 0;
     d72:	f8dd 9008 	ldr.w	r9, [sp, #8]
			bpe = buf + 1;
     d76:	f10d 0b31 	add.w	fp, sp, #49	; 0x31
			bps = buf;
     d7a:	f10d 0a30 	add.w	sl, sp, #48	; 0x30
			break;
     d7e:	e08b      	b.n	e98 <CONFIG_ISR_STACK_SIZE+0x698>
		case 'd':
		case 'i':
			if (conv->flag_plus) {
     d80:	f019 0f08 	tst.w	r9, #8
     d84:	d105      	bne.n	d92 <CONFIG_ISR_STACK_SIZE+0x592>
				sign = '+';
			} else if (conv->flag_space) {
     d86:	f019 0910 	ands.w	r9, r9, #16
     d8a:	d004      	beq.n	d96 <CONFIG_ISR_STACK_SIZE+0x596>
				sign = ' ';
     d8c:	f04f 0920 	mov.w	r9, #32
     d90:	e001      	b.n	d96 <CONFIG_ISR_STACK_SIZE+0x596>
				sign = '+';
     d92:	f04f 092b 	mov.w	r9, #43	; 0x2b

			/* sint/uint overlay in the union, and so
			 * can't appear in read and write operations
			 * in the same statement.
			 */
			sint = value->sint;
     d96:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
			if (sint < 0) {
     d9a:	2a00      	cmp	r2, #0
     d9c:	f173 0100 	sbcs.w	r1, r3, #0
     da0:	db02      	blt.n	da8 <CONFIG_ISR_STACK_SIZE+0x5a8>
				sign = '-';
				value->uint = (uint_value_type)-sint;
			} else {
				value->uint = (uint_value_type)sint;
     da2:	e9cd 2306 	strd	r2, r3, [sp, #24]
     da6:	e009      	b.n	dbc <CONFIG_ISR_STACK_SIZE+0x5bc>
				value->uint = (uint_value_type)-sint;
     da8:	4252      	negs	r2, r2
     daa:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     dae:	e9cd 2306 	strd	r2, r3, [sp, #24]
				sign = '-';
     db2:	f04f 092d 	mov.w	r9, #45	; 0x2d
     db6:	e001      	b.n	dbc <CONFIG_ISR_STACK_SIZE+0x5bc>
		switch (conv->specifier) {
     db8:	f8dd 9008 	ldr.w	r9, [sp, #8]
			__fallthrough;
		case 'o':
		case 'u':
		case 'x':
		case 'X':
			bps = encode_uint(value->uint, conv, buf, bpe);
     dbc:	f10d 0346 	add.w	r3, sp, #70	; 0x46
     dc0:	9300      	str	r3, [sp, #0]
     dc2:	ab0c      	add	r3, sp, #48	; 0x30
     dc4:	aa08      	add	r2, sp, #32
     dc6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
     dca:	f003 f8e8 	bl	3f9e <encode_uint>
     dce:	4682      	mov	sl, r0
			/* Update pad0 values based on precision and converted
			 * length.  Note that a non-empty sign is not in the
			 * converted sequence, but it does not affect the
			 * padding size.
			 */
			if (precision >= 0) {
     dd0:	f1bb 0f00 	cmp.w	fp, #0
     dd4:	f2c0 8090 	blt.w	ef8 <CONFIG_ISR_STACK_SIZE+0x6f8>
				size_t len = bpe - bps;
     dd8:	f10d 0346 	add.w	r3, sp, #70	; 0x46
     ddc:	eba3 030a 	sub.w	r3, r3, sl

				/* Zero-padding flag is ignored for integer
				 * conversions with precision.
				 */
				conv->flag_zero = false;
     de0:	f89d 2020 	ldrb.w	r2, [sp, #32]
     de4:	f36f 1286 	bfc	r2, #6, #1
     de8:	f88d 2020 	strb.w	r2, [sp, #32]

				/* Set pad0_value to satisfy precision */
				if (len < (size_t)precision) {
     dec:	459b      	cmp	fp, r3
     dee:	f240 8086 	bls.w	efe <CONFIG_ISR_STACK_SIZE+0x6fe>
					conv->pad0_value = precision - (int)len;
     df2:	ebab 0303 	sub.w	r3, fp, r3
     df6:	9309      	str	r3, [sp, #36]	; 0x24
		const char *bpe = buf + sizeof(buf);
     df8:	f10d 0b46 	add.w	fp, sp, #70	; 0x46
     dfc:	e04c      	b.n	e98 <CONFIG_ISR_STACK_SIZE+0x698>
		case 'p':
			/* Implementation-defined: null is "(nil)", non-null
			 * has 0x prefix followed by significant address hex
			 * digits, no leading zeros.
			 */
			if (value->ptr != NULL) {
     dfe:	9806      	ldr	r0, [sp, #24]
     e00:	b930      	cbnz	r0, e10 <CONFIG_ISR_STACK_SIZE+0x610>
		char sign = 0;
     e02:	f8dd 9008 	ldr.w	r9, [sp, #8]

				goto prec_int_pad0;
			}

			bps = "(nil)";
			bpe = bps + 5;
     e06:	f8df b1c4 	ldr.w	fp, [pc, #452]	; fcc <CONFIG_ISR_STACK_SIZE+0x7cc>
			bps = "(nil)";
     e0a:	f1ab 0a05 	sub.w	sl, fp, #5
     e0e:	e043      	b.n	e98 <CONFIG_ISR_STACK_SIZE+0x698>
				bps = encode_uint((uintptr_t)value->ptr, conv,
     e10:	f10d 0346 	add.w	r3, sp, #70	; 0x46
     e14:	9300      	str	r3, [sp, #0]
     e16:	ab0c      	add	r3, sp, #48	; 0x30
     e18:	aa08      	add	r2, sp, #32
     e1a:	2100      	movs	r1, #0
     e1c:	f003 f8bf 	bl	3f9e <encode_uint>
     e20:	4682      	mov	sl, r0
				conv->altform_0c = true;
     e22:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
     e26:	f043 0310 	orr.w	r3, r3, #16
     e2a:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
				conv->specifier = 'x';
     e2e:	2378      	movs	r3, #120	; 0x78
     e30:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
		char sign = 0;
     e34:	f8dd 9008 	ldr.w	r9, [sp, #8]
				goto prec_int_pad0;
     e38:	e7ca      	b.n	dd0 <CONFIG_ISR_STACK_SIZE+0x5d0>

			break;
		case 'n':
			if (IS_ENABLED(CONFIG_CBPRINTF_N_SPECIFIER)) {
				store_count(conv, value->ptr, count);
     e3a:	9a06      	ldr	r2, [sp, #24]
	switch ((enum length_mod_enum)conv->length_mod) {
     e3c:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
     e40:	f3c3 03c3 	ubfx	r3, r3, #3, #4
     e44:	2b07      	cmp	r3, #7
     e46:	d806      	bhi.n	e56 <CONFIG_ISR_STACK_SIZE+0x656>
     e48:	e8df f003 	tbb	[pc, r3]
     e4c:	100e0c04 	.word	0x100e0c04
     e50:	1e1c1712 	.word	0x1e1c1712
		*(int *)dp = count;
     e54:	6014      	str	r4, [r2, #0]
		char sign = 0;
     e56:	f8dd 9008 	ldr.w	r9, [sp, #8]
		const char *bpe = buf + sizeof(buf);
     e5a:	f10d 0b46 	add.w	fp, sp, #70	; 0x46
		const char *bps = NULL;
     e5e:	f04f 0a00 	mov.w	sl, #0
}
     e62:	e019      	b.n	e98 <CONFIG_ISR_STACK_SIZE+0x698>
		*(signed char *)dp = (signed char)count;
     e64:	7014      	strb	r4, [r2, #0]
		break;
     e66:	e7f6      	b.n	e56 <CONFIG_ISR_STACK_SIZE+0x656>
		*(short *)dp = (short)count;
     e68:	8014      	strh	r4, [r2, #0]
		break;
     e6a:	e7f4      	b.n	e56 <CONFIG_ISR_STACK_SIZE+0x656>
		*(long *)dp = (long)count;
     e6c:	6014      	str	r4, [r2, #0]
		break;
     e6e:	e7f2      	b.n	e56 <CONFIG_ISR_STACK_SIZE+0x656>
		*(long long *)dp = (long long)count;
     e70:	4620      	mov	r0, r4
     e72:	17e1      	asrs	r1, r4, #31
     e74:	e9c2 0100 	strd	r0, r1, [r2]
		break;
     e78:	e7ed      	b.n	e56 <CONFIG_ISR_STACK_SIZE+0x656>
		*(intmax_t *)dp = (intmax_t)count;
     e7a:	4620      	mov	r0, r4
     e7c:	17e1      	asrs	r1, r4, #31
     e7e:	e9c2 0100 	strd	r0, r1, [r2]
		break;
     e82:	e7e8      	b.n	e56 <CONFIG_ISR_STACK_SIZE+0x656>
		*(size_t *)dp = (size_t)count;
     e84:	6014      	str	r4, [r2, #0]
		break;
     e86:	e7e6      	b.n	e56 <CONFIG_ISR_STACK_SIZE+0x656>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
     e88:	6014      	str	r4, [r2, #0]
		break;
     e8a:	e7e4      	b.n	e56 <CONFIG_ISR_STACK_SIZE+0x656>
		switch (conv->specifier) {
     e8c:	f8dd 9008 	ldr.w	r9, [sp, #8]
     e90:	f10d 0b46 	add.w	fp, sp, #70	; 0x46
     e94:	f04f 0a00 	mov.w	sl, #0
		}

		/* If we don't have a converted value to emit, move
		 * on.
		 */
		if (bps == NULL) {
     e98:	f1ba 0f00 	cmp.w	sl, #0
     e9c:	f000 808e 	beq.w	fbc <CONFIG_ISR_STACK_SIZE+0x7bc>
		 *   * any exponent content from the converted value
		 * * for non-FP:
		 *   * any pad0_prefix
		 *   * the converted value
		 */
		size_t nj_len = (bpe - bps);
     ea0:	ebab 020a 	sub.w	r2, fp, sl
		int pad_len = 0;

		if (sign != 0) {
     ea4:	f1b9 0f00 	cmp.w	r9, #0
     ea8:	d000      	beq.n	eac <CONFIG_ISR_STACK_SIZE+0x6ac>
			nj_len += 1U;
     eaa:	3201      	adds	r2, #1
		}

		if (conv->altform_0c) {
     eac:	f89d 1022 	ldrb.w	r1, [sp, #34]	; 0x22
     eb0:	f011 0f10 	tst.w	r1, #16
     eb4:	d026      	beq.n	f04 <CONFIG_ISR_STACK_SIZE+0x704>
			nj_len += 2U;
     eb6:	3202      	adds	r2, #2
		} else if (conv->altform_0) {
			nj_len += 1U;
		}

		nj_len += conv->pad0_value;
     eb8:	9b09      	ldr	r3, [sp, #36]	; 0x24
     eba:	4413      	add	r3, r2
		if (conv->pad_fp) {
     ebc:	f011 0f40 	tst.w	r1, #64	; 0x40
     ec0:	d001      	beq.n	ec6 <CONFIG_ISR_STACK_SIZE+0x6c6>
			nj_len += conv->pad0_pre_exp;
     ec2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
     ec4:	4413      	add	r3, r2
		 * result in no padding.
		 *
		 * If a non-negative padding width is present and we're doing
		 * right-justification, emit the padding now.
		 */
		if (width > 0) {
     ec6:	2f00      	cmp	r7, #0
     ec8:	dd32      	ble.n	f30 <CONFIG_ISR_STACK_SIZE+0x730>
			width -= (int)nj_len;
     eca:	1aff      	subs	r7, r7, r3

			if (!conv->flag_dash) {
     ecc:	f89d 3020 	ldrb.w	r3, [sp, #32]
     ed0:	f013 0f04 	tst.w	r3, #4
     ed4:	d12c      	bne.n	f30 <CONFIG_ISR_STACK_SIZE+0x730>
				char pad = ' ';

				/* If we're zero-padding we have to emit the
				 * sign first.
				 */
				if (conv->flag_zero) {
     ed6:	f013 0f40 	tst.w	r3, #64	; 0x40
     eda:	d018      	beq.n	f0e <CONFIG_ISR_STACK_SIZE+0x70e>
					if (sign != 0) {
     edc:	f1b9 0f00 	cmp.w	r9, #0
     ee0:	d018      	beq.n	f14 <CONFIG_ISR_STACK_SIZE+0x714>
						OUTC(sign);
     ee2:	4629      	mov	r1, r5
     ee4:	4648      	mov	r0, r9
     ee6:	47b0      	blx	r6
     ee8:	2800      	cmp	r0, #0
     eea:	db6b      	blt.n	fc4 <CONFIG_ISR_STACK_SIZE+0x7c4>
     eec:	3401      	adds	r4, #1
						sign = 0;
     eee:	f8dd 9008 	ldr.w	r9, [sp, #8]
					}
					pad = '0';
     ef2:	2330      	movs	r3, #48	; 0x30
     ef4:	9302      	str	r3, [sp, #8]
     ef6:	e00f      	b.n	f18 <CONFIG_ISR_STACK_SIZE+0x718>
		const char *bpe = buf + sizeof(buf);
     ef8:	f10d 0b46 	add.w	fp, sp, #70	; 0x46
     efc:	e7cc      	b.n	e98 <CONFIG_ISR_STACK_SIZE+0x698>
     efe:	f10d 0b46 	add.w	fp, sp, #70	; 0x46
     f02:	e7c9      	b.n	e98 <CONFIG_ISR_STACK_SIZE+0x698>
		} else if (conv->altform_0) {
     f04:	f011 0f08 	tst.w	r1, #8
     f08:	d0d6      	beq.n	eb8 <CONFIG_ISR_STACK_SIZE+0x6b8>
			nj_len += 1U;
     f0a:	3201      	adds	r2, #1
     f0c:	e7d4      	b.n	eb8 <CONFIG_ISR_STACK_SIZE+0x6b8>
				char pad = ' ';
     f0e:	2320      	movs	r3, #32
     f10:	9302      	str	r3, [sp, #8]
     f12:	e001      	b.n	f18 <CONFIG_ISR_STACK_SIZE+0x718>
					pad = '0';
     f14:	2330      	movs	r3, #48	; 0x30
     f16:	9302      	str	r3, [sp, #8]
     f18:	463b      	mov	r3, r7
				}

				while (width-- > 0) {
     f1a:	1e5f      	subs	r7, r3, #1
     f1c:	2b00      	cmp	r3, #0
     f1e:	dd07      	ble.n	f30 <CONFIG_ISR_STACK_SIZE+0x730>
					OUTC(pad);
     f20:	4629      	mov	r1, r5
     f22:	9802      	ldr	r0, [sp, #8]
     f24:	47b0      	blx	r6
     f26:	2800      	cmp	r0, #0
     f28:	db4c      	blt.n	fc4 <CONFIG_ISR_STACK_SIZE+0x7c4>
     f2a:	3401      	adds	r4, #1
				while (width-- > 0) {
     f2c:	463b      	mov	r3, r7
     f2e:	e7f4      	b.n	f1a <CONFIG_ISR_STACK_SIZE+0x71a>
		}

		/* If we have a sign that hasn't been emitted, now's the
		 * time....
		 */
		if (sign != 0) {
     f30:	f1b9 0f00 	cmp.w	r9, #0
     f34:	d005      	beq.n	f42 <CONFIG_ISR_STACK_SIZE+0x742>
			OUTC(sign);
     f36:	4629      	mov	r1, r5
     f38:	4648      	mov	r0, r9
     f3a:	47b0      	blx	r6
     f3c:	2800      	cmp	r0, #0
     f3e:	db41      	blt.n	fc4 <CONFIG_ISR_STACK_SIZE+0x7c4>
     f40:	3401      	adds	r4, #1
				OUTC('0');
			}

			OUTS(cp, bpe);
		} else {
			if (conv->altform_0c | conv->altform_0) {
     f42:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
     f46:	f3c3 1200 	ubfx	r2, r3, #4, #1
     f4a:	f3c3 03c0 	ubfx	r3, r3, #3, #1
     f4e:	4313      	orrs	r3, r2
     f50:	d005      	beq.n	f5e <CONFIG_ISR_STACK_SIZE+0x75e>
				OUTC('0');
     f52:	4629      	mov	r1, r5
     f54:	2030      	movs	r0, #48	; 0x30
     f56:	47b0      	blx	r6
     f58:	2800      	cmp	r0, #0
     f5a:	db33      	blt.n	fc4 <CONFIG_ISR_STACK_SIZE+0x7c4>
     f5c:	3401      	adds	r4, #1
			}

			if (conv->altform_0c) {
     f5e:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
     f62:	f013 0f10 	tst.w	r3, #16
     f66:	d006      	beq.n	f76 <CONFIG_ISR_STACK_SIZE+0x776>
				OUTC(conv->specifier);
     f68:	4629      	mov	r1, r5
     f6a:	f89d 0023 	ldrb.w	r0, [sp, #35]	; 0x23
     f6e:	47b0      	blx	r6
     f70:	2800      	cmp	r0, #0
     f72:	db27      	blt.n	fc4 <CONFIG_ISR_STACK_SIZE+0x7c4>
     f74:	3401      	adds	r4, #1
			}

			pad_len = conv->pad0_value;
     f76:	9b09      	ldr	r3, [sp, #36]	; 0x24
			while (pad_len-- > 0) {
     f78:	f103 39ff 	add.w	r9, r3, #4294967295
     f7c:	2b00      	cmp	r3, #0
     f7e:	dd07      	ble.n	f90 <CONFIG_ISR_STACK_SIZE+0x790>
				OUTC('0');
     f80:	4629      	mov	r1, r5
     f82:	2030      	movs	r0, #48	; 0x30
     f84:	47b0      	blx	r6
     f86:	2800      	cmp	r0, #0
     f88:	db1c      	blt.n	fc4 <CONFIG_ISR_STACK_SIZE+0x7c4>
     f8a:	3401      	adds	r4, #1
			while (pad_len-- > 0) {
     f8c:	464b      	mov	r3, r9
     f8e:	e7f3      	b.n	f78 <CONFIG_ISR_STACK_SIZE+0x778>
			}

			OUTS(bps, bpe);
     f90:	465b      	mov	r3, fp
     f92:	4652      	mov	r2, sl
     f94:	4629      	mov	r1, r5
     f96:	4630      	mov	r0, r6
     f98:	f003 f86b 	bl	4072 <outs>
     f9c:	2800      	cmp	r0, #0
     f9e:	db11      	blt.n	fc4 <CONFIG_ISR_STACK_SIZE+0x7c4>
     fa0:	4404      	add	r4, r0
		}

		/* Finish left justification */
		while (width > 0) {
     fa2:	2f00      	cmp	r7, #0
     fa4:	dd07      	ble.n	fb6 <CONFIG_ISR_STACK_SIZE+0x7b6>
			OUTC(' ');
     fa6:	4629      	mov	r1, r5
     fa8:	2020      	movs	r0, #32
     faa:	47b0      	blx	r6
     fac:	2800      	cmp	r0, #0
     fae:	db09      	blt.n	fc4 <CONFIG_ISR_STACK_SIZE+0x7c4>
     fb0:	3401      	adds	r4, #1
			--width;
     fb2:	3f01      	subs	r7, #1
     fb4:	e7f5      	b.n	fa2 <CONFIG_ISR_STACK_SIZE+0x7a2>
		fp = extract_conversion(conv, sp);
     fb6:	46c2      	mov	sl, r8
     fb8:	f7ff bb28 	b.w	60c <cbvprintf+0x10>
     fbc:	46c2      	mov	sl, r8
     fbe:	f7ff bb25 	b.w	60c <cbvprintf+0x10>
		}
	}

	return count;
     fc2:	4620      	mov	r0, r4
#undef OUTS
#undef OUTC
}
     fc4:	b013      	add	sp, #76	; 0x4c
     fc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     fca:	bf00      	nop
     fcc:	00005705 	.word	0x00005705

00000fd0 <pm_system_resume>:
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}

void pm_system_resume(void)
{
     fd0:	b570      	push	{r4, r5, r6, lr}
     fd2:	b084      	sub	sp, #16
	uint8_t id = _current_cpu->id;
     fd4:	4b2c      	ldr	r3, [pc, #176]	; (1088 <CONFIG_FPROTECT_BLOCK_SIZE+0x88>)
     fd6:	7d1c      	ldrb	r4, [r3, #20]
 *
 * @return true if the bit was set, false if it wasn't.
 */
static inline bool atomic_test_and_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
     fd8:	f004 031f 	and.w	r3, r4, #31
     fdc:	2201      	movs	r2, #1
     fde:	409a      	lsls	r2, r3
	atomic_val_t old;

	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
     fe0:	0961      	lsrs	r1, r4, #5
     fe2:	4b2a      	ldr	r3, [pc, #168]	; (108c <CONFIG_FPROTECT_BLOCK_SIZE+0x8c>)
     fe4:	eb03 0381 	add.w	r3, r3, r1, lsl #2
     fe8:	43d0      	mvns	r0, r2
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
     fea:	f3bf 8f5b 	dmb	ish
     fee:	e853 1f00 	ldrex	r1, [r3]
     ff2:	ea01 0500 	and.w	r5, r1, r0
     ff6:	e843 5600 	strex	r6, r5, [r3]
     ffa:	2e00      	cmp	r6, #0
     ffc:	d1f7      	bne.n	fee <pm_system_resume+0x1e>
     ffe:	f3bf 8f5b 	dmb	ish
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
    1002:	420a      	tst	r2, r1
    1004:	d03d      	beq.n	1082 <CONFIG_FPROTECT_BLOCK_SIZE+0x82>
		exit_pos_ops(z_power_states[id]);
    1006:	eb04 0344 	add.w	r3, r4, r4, lsl #1
    100a:	009a      	lsls	r2, r3, #2
    100c:	4b20      	ldr	r3, [pc, #128]	; (1090 <CONFIG_FPROTECT_BLOCK_SIZE+0x90>)
    100e:	4413      	add	r3, r2
    1010:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
    1014:	ab04      	add	r3, sp, #16
    1016:	e903 0007 	stmdb	r3, {r0, r1, r2}
	if (pm_power_state_exit_post_ops != NULL) {
    101a:	4b1e      	ldr	r3, [pc, #120]	; (1094 <CONFIG_FPROTECT_BLOCK_SIZE+0x94>)
    101c:	b163      	cbz	r3, 1038 <CONFIG_FPROTECT_BLOCK_SIZE+0x38>
		pm_power_state_exit_post_ops(info);
    101e:	f003 f989 	bl	4334 <pm_power_state_exit_post_ops>
    1022:	f04f 0320 	mov.w	r3, #32
    1026:	f3ef 8611 	mrs	r6, BASEPRI
    102a:	f383 8812 	msr	BASEPRI_MAX, r3
    102e:	f3bf 8f6f 	isb	sy
    1032:	4b19      	ldr	r3, [pc, #100]	; (1098 <CONFIG_FPROTECT_BLOCK_SIZE+0x98>)
    1034:	681d      	ldr	r5, [r3, #0]
    1036:	e00a      	b.n	104e <CONFIG_FPROTECT_BLOCK_SIZE+0x4e>
	__asm__ volatile(
    1038:	2300      	movs	r3, #0
    103a:	f383 8811 	msr	BASEPRI, r3
    103e:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
    1042:	e7ee      	b.n	1022 <CONFIG_FPROTECT_BLOCK_SIZE+0x22>
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    1044:	462b      	mov	r3, r5
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next(sys_snode_t *node);

Z_GENLIST_PEEK_NEXT(slist, snode)
    1046:	b10d      	cbz	r5, 104c <CONFIG_FPROTECT_BLOCK_SIZE+0x4c>
	return node->next;
    1048:	682b      	ldr	r3, [r5, #0]
    104a:	b16b      	cbz	r3, 1068 <CONFIG_FPROTECT_BLOCK_SIZE+0x68>
{
    104c:	461d      	mov	r5, r3
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    104e:	b15d      	cbz	r5, 1068 <CONFIG_FPROTECT_BLOCK_SIZE+0x68>
			callback = notifier->state_exit;
    1050:	68aa      	ldr	r2, [r5, #8]
		if (callback) {
    1052:	2a00      	cmp	r2, #0
    1054:	d0f6      	beq.n	1044 <CONFIG_FPROTECT_BLOCK_SIZE+0x44>
			callback(z_power_states[_current_cpu->id].state);
    1056:	4b0c      	ldr	r3, [pc, #48]	; (1088 <CONFIG_FPROTECT_BLOCK_SIZE+0x88>)
    1058:	7d1b      	ldrb	r3, [r3, #20]
    105a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    105e:	0099      	lsls	r1, r3, #2
    1060:	4b0b      	ldr	r3, [pc, #44]	; (1090 <CONFIG_FPROTECT_BLOCK_SIZE+0x90>)
    1062:	5c58      	ldrb	r0, [r3, r1]
    1064:	4790      	blx	r2
    1066:	e7ed      	b.n	1044 <CONFIG_FPROTECT_BLOCK_SIZE+0x44>
	__asm__ volatile(
    1068:	f386 8811 	msr	BASEPRI, r6
    106c:	f3bf 8f6f 	isb	sy
		pm_state_notify(false);
		z_power_states[id] = (struct pm_state_info){PM_STATE_ACTIVE,
    1070:	4807      	ldr	r0, [pc, #28]	; (1090 <CONFIG_FPROTECT_BLOCK_SIZE+0x90>)
    1072:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    1076:	00a2      	lsls	r2, r4, #2
    1078:	1881      	adds	r1, r0, r2
    107a:	2300      	movs	r3, #0
    107c:	5083      	str	r3, [r0, r2]
    107e:	604b      	str	r3, [r1, #4]
    1080:	608b      	str	r3, [r1, #8]
			0, 0};
	}
}
    1082:	b004      	add	sp, #16
    1084:	bd70      	pop	{r4, r5, r6, pc}
    1086:	bf00      	nop
    1088:	2000035c 	.word	0x2000035c
    108c:	200002c0 	.word	0x200002c0
    1090:	200002c4 	.word	0x200002c4
    1094:	00004335 	.word	0x00004335
    1098:	200002b8 	.word	0x200002b8

0000109c <pm_system_suspend>:

	return ret;
}

bool pm_system_suspend(int32_t ticks)
{
    109c:	b5f0      	push	{r4, r5, r6, r7, lr}
    109e:	b089      	sub	sp, #36	; 0x24
    10a0:	4605      	mov	r5, r0
	bool ret = true;
	uint8_t id = _current_cpu->id;
    10a2:	4b55      	ldr	r3, [pc, #340]	; (11f8 <pm_system_suspend+0x15c>)
    10a4:	7d1c      	ldrb	r4, [r3, #20]
 *
 * @return true if the bit was set, false if it wasn't.
 */
static inline bool atomic_test_and_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    10a6:	f004 031f 	and.w	r3, r4, #31
    10aa:	2201      	movs	r2, #1
    10ac:	409a      	lsls	r2, r3
	atomic_val_t old;

	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
    10ae:	0961      	lsrs	r1, r4, #5
    10b0:	4b52      	ldr	r3, [pc, #328]	; (11fc <pm_system_suspend+0x160>)
    10b2:	eb03 0381 	add.w	r3, r3, r1, lsl #2
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    10b6:	f3bf 8f5b 	dmb	ish
    10ba:	e853 1f00 	ldrex	r1, [r3]
    10be:	ea41 0002 	orr.w	r0, r1, r2
    10c2:	e843 0600 	strex	r6, r0, [r3]
    10c6:	2e00      	cmp	r6, #0
    10c8:	d1f7      	bne.n	10ba <pm_system_suspend+0x1e>
    10ca:	f3bf 8f5b 	dmb	ish

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	if (!atomic_test_and_set_bit(z_power_states_forced, id)) {
    10ce:	420a      	tst	r2, r1
    10d0:	d017      	beq.n	1102 <pm_system_suspend+0x66>
		z_power_states[id] = pm_policy_next_state(id, ticks);
	}

	if (z_power_states[id].state == PM_STATE_ACTIVE) {
    10d2:	eb04 0344 	add.w	r3, r4, r4, lsl #1
    10d6:	4a4a      	ldr	r2, [pc, #296]	; (1200 <pm_system_suspend+0x164>)
    10d8:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
    10dc:	2b00      	cmp	r3, #0
    10de:	f000 8088 	beq.w	11f2 <pm_system_suspend+0x156>
				   z_power_states[id].state);
		ret = false;
		goto end;
	}

	if (ticks != K_TICKS_FOREVER) {
    10e2:	f1b5 3fff 	cmp.w	r5, #4294967295
    10e6:	d11c      	bne.n	1122 <pm_system_suspend+0x86>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
    10e8:	f002 f83a 	bl	3160 <k_sched_lock>
	__asm__ volatile(
    10ec:	f04f 0320 	mov.w	r3, #32
    10f0:	f3ef 8611 	mrs	r6, BASEPRI
    10f4:	f383 8812 	msr	BASEPRI_MAX, r3
    10f8:	f3bf 8f6f 	isb	sy
	return list->head;
    10fc:	4b41      	ldr	r3, [pc, #260]	; (1204 <pm_system_suspend+0x168>)
    10fe:	681d      	ldr	r5, [r3, #0]
    1100:	e02a      	b.n	1158 <pm_system_suspend+0xbc>
		z_power_states[id] = pm_policy_next_state(id, ticks);
    1102:	eb04 0644 	add.w	r6, r4, r4, lsl #1
    1106:	4b3e      	ldr	r3, [pc, #248]	; (1200 <pm_system_suspend+0x164>)
    1108:	eb03 0686 	add.w	r6, r3, r6, lsl #2
    110c:	466f      	mov	r7, sp
    110e:	462a      	mov	r2, r5
    1110:	4621      	mov	r1, r4
    1112:	4638      	mov	r0, r7
    1114:	f002 ffc8 	bl	40a8 <pm_policy_next_state>
    1118:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
    111c:	e886 0007 	stmia.w	r6, {r0, r1, r2}
    1120:	e7d7      	b.n	10d2 <pm_system_suspend+0x36>
		     k_us_to_ticks_ceil32(
    1122:	eb04 0344 	add.w	r3, r4, r4, lsl #1
    1126:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    112a:	689b      	ldr	r3, [r3, #8]
		} else {
			return t * ((uint64_t)to_hz / from_hz);
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
    112c:	0c59      	lsrs	r1, r3, #17
    112e:	03d8      	lsls	r0, r3, #15
    1130:	4e35      	ldr	r6, [pc, #212]	; (1208 <pm_system_suspend+0x16c>)
    1132:	4a36      	ldr	r2, [pc, #216]	; (120c <pm_system_suspend+0x170>)
    1134:	2300      	movs	r3, #0
    1136:	1980      	adds	r0, r0, r6
    1138:	f04f 0600 	mov.w	r6, #0
    113c:	eb46 0101 	adc.w	r1, r6, r1
    1140:	f7fe ffba 	bl	b8 <__aeabi_uldivmod>
		z_set_timeout_expiry(ticks -
    1144:	2101      	movs	r1, #1
    1146:	1a28      	subs	r0, r5, r0
    1148:	f004 f998 	bl	547c <z_set_timeout_expiry>
    114c:	e7cc      	b.n	10e8 <pm_system_suspend+0x4c>
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    114e:	462b      	mov	r3, r5
Z_GENLIST_PEEK_NEXT(slist, snode)
    1150:	b10d      	cbz	r5, 1156 <pm_system_suspend+0xba>
	return node->next;
    1152:	682b      	ldr	r3, [r5, #0]
    1154:	b16b      	cbz	r3, 1172 <pm_system_suspend+0xd6>
{
    1156:	461d      	mov	r5, r3
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    1158:	b15d      	cbz	r5, 1172 <pm_system_suspend+0xd6>
			callback = notifier->state_entry;
    115a:	686a      	ldr	r2, [r5, #4]
		if (callback) {
    115c:	2a00      	cmp	r2, #0
    115e:	d0f6      	beq.n	114e <pm_system_suspend+0xb2>
			callback(z_power_states[_current_cpu->id].state);
    1160:	4b25      	ldr	r3, [pc, #148]	; (11f8 <pm_system_suspend+0x15c>)
    1162:	7d1b      	ldrb	r3, [r3, #20]
    1164:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    1168:	4925      	ldr	r1, [pc, #148]	; (1200 <pm_system_suspend+0x164>)
    116a:	f811 0023 	ldrb.w	r0, [r1, r3, lsl #2]
    116e:	4790      	blx	r2
    1170:	e7ed      	b.n	114e <pm_system_suspend+0xb2>
	__asm__ volatile(
    1172:	f386 8811 	msr	BASEPRI, r6
    1176:	f3bf 8f6f 	isb	sy
 *
 * @return N/A
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    117a:	f004 031f 	and.w	r3, r4, #31
    117e:	2101      	movs	r1, #1
    1180:	4099      	lsls	r1, r3

	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    1182:	0963      	lsrs	r3, r4, #5
    1184:	4a22      	ldr	r2, [pc, #136]	; (1210 <pm_system_suspend+0x174>)
    1186:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    118a:	f3bf 8f5b 	dmb	ish
    118e:	e853 2f00 	ldrex	r2, [r3]
    1192:	430a      	orrs	r2, r1
    1194:	e843 2000 	strex	r0, r2, [r3]
    1198:	2800      	cmp	r0, #0
    119a:	d1f8      	bne.n	118e <pm_system_suspend+0xf2>
    119c:	f3bf 8f5b 	dmb	ish
	pm_stats_start();
	/* Enter power state */
	pm_state_notify(true);
	atomic_set_bit(z_post_ops_required, id);
	pm_state_set(z_power_states[id]);
    11a0:	eb04 0344 	add.w	r3, r4, r4, lsl #1
    11a4:	4a16      	ldr	r2, [pc, #88]	; (1200 <pm_system_suspend+0x164>)
    11a6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    11aa:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
    11ae:	ab08      	add	r3, sp, #32
    11b0:	e903 0007 	stmdb	r3, {r0, r1, r2}
	if (pm_power_state_set != NULL) {
    11b4:	4b17      	ldr	r3, [pc, #92]	; (1214 <pm_system_suspend+0x178>)
    11b6:	b10b      	cbz	r3, 11bc <pm_system_suspend+0x120>
		pm_power_state_set(info);
    11b8:	f003 f8a9 	bl	430e <pm_power_state_set>
	if (atomic_add(&z_cpus_active, 1) == 0) {
		pm_resume_devices();
	}
#endif
	pm_stats_update(z_power_states[id].state);
	pm_system_resume();
    11bc:	f7ff ff08 	bl	fd0 <pm_system_resume>
	k_sched_unlock();
    11c0:	f002 f96c 	bl	349c <k_sched_unlock>
	bool ret = true;
    11c4:	2001      	movs	r0, #1
	atomic_val_t mask = ATOMIC_MASK(bit);
    11c6:	f004 021f 	and.w	r2, r4, #31
    11ca:	2301      	movs	r3, #1
    11cc:	4093      	lsls	r3, r2
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    11ce:	0964      	lsrs	r4, r4, #5
    11d0:	4a0a      	ldr	r2, [pc, #40]	; (11fc <pm_system_suspend+0x160>)
    11d2:	eb02 0484 	add.w	r4, r2, r4, lsl #2
    11d6:	43db      	mvns	r3, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    11d8:	f3bf 8f5b 	dmb	ish
    11dc:	e854 2f00 	ldrex	r2, [r4]
    11e0:	401a      	ands	r2, r3
    11e2:	e844 2100 	strex	r1, r2, [r4]
    11e6:	2900      	cmp	r1, #0
    11e8:	d1f8      	bne.n	11dc <pm_system_suspend+0x140>
    11ea:	f3bf 8f5b 	dmb	ish
				   z_power_states[id].state);

end:
	atomic_clear_bit(z_power_states_forced, id);
	return ret;
}
    11ee:	b009      	add	sp, #36	; 0x24
    11f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		ret = false;
    11f2:	2000      	movs	r0, #0
    11f4:	e7e7      	b.n	11c6 <pm_system_suspend+0x12a>
    11f6:	bf00      	nop
    11f8:	2000035c 	.word	0x2000035c
    11fc:	200002d0 	.word	0x200002d0
    1200:	200002c4 	.word	0x200002c4
    1204:	200002b8 	.word	0x200002b8
    1208:	000f423f 	.word	0x000f423f
    120c:	000f4240 	.word	0x000f4240
    1210:	200002c0 	.word	0x200002c0
    1214:	0000430f 	.word	0x0000430f

00001218 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    1218:	4901      	ldr	r1, [pc, #4]	; (1220 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    121a:	2210      	movs	r2, #16
	str	r2, [r1]
    121c:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    121e:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    1220:	e000ed10 	.word	0xe000ed10

00001224 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    1224:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    1226:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    1228:	f380 8811 	msr	BASEPRI, r0
	isb
    122c:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
    1230:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
    1234:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    1236:	b662      	cpsie	i
	isb
    1238:	f3bf 8f6f 	isb	sy

	bx	lr
    123c:	4770      	bx	lr
    123e:	bf00      	nop

00001240 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    1240:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    1242:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    1244:	f381 8811 	msr	BASEPRI, r1

	wfe
    1248:	bf20      	wfe

	msr	BASEPRI, r0
    124a:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    124e:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    1250:	4770      	bx	lr
    1252:	bf00      	nop

00001254 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    1254:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    1256:	2b00      	cmp	r3, #0
    1258:	db08      	blt.n	126c <arch_irq_enable+0x18>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    125a:	f000 001f 	and.w	r0, r0, #31
    125e:	095b      	lsrs	r3, r3, #5
    1260:	2201      	movs	r2, #1
    1262:	fa02 f000 	lsl.w	r0, r2, r0
    1266:	4a02      	ldr	r2, [pc, #8]	; (1270 <arch_irq_enable+0x1c>)
    1268:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
    126c:	4770      	bx	lr
    126e:	bf00      	nop
    1270:	e000e100 	.word	0xe000e100

00001274 <arch_irq_is_enabled>:
	NVIC_DisableIRQ((IRQn_Type)irq);
}

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    1274:	0942      	lsrs	r2, r0, #5
    1276:	4b05      	ldr	r3, [pc, #20]	; (128c <arch_irq_is_enabled+0x18>)
    1278:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    127c:	f000 001f 	and.w	r0, r0, #31
    1280:	2301      	movs	r3, #1
    1282:	fa03 f000 	lsl.w	r0, r3, r0
}
    1286:	4010      	ands	r0, r2
    1288:	4770      	bx	lr
    128a:	bf00      	nop
    128c:	e000e100 	.word	0xe000e100

00001290 <z_arm_irq_priority_set>:
	 * via flags
	 */
	if (IS_ENABLED(CONFIG_ZERO_LATENCY_IRQS) && (flags & IRQ_ZERO_LATENCY)) {
		prio = _EXC_ZERO_LATENCY_IRQS_PRIO;
	} else {
		prio += _IRQ_PRIO_OFFSET;
    1290:	3101      	adds	r1, #1
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    1292:	b243      	sxtb	r3, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    1294:	2b00      	cmp	r3, #0
    1296:	db08      	blt.n	12aa <z_arm_irq_priority_set+0x1a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1298:	0149      	lsls	r1, r1, #5
    129a:	b2c9      	uxtb	r1, r1
    129c:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    12a0:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    12a4:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
    12a8:	4770      	bx	lr
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    12aa:	f000 000f 	and.w	r0, r0, #15
    12ae:	0149      	lsls	r1, r1, #5
    12b0:	b2c9      	uxtb	r1, r1
    12b2:	4b01      	ldr	r3, [pc, #4]	; (12b8 <z_arm_irq_priority_set+0x28>)
    12b4:	5419      	strb	r1, [r3, r0]
}
    12b6:	4770      	bx	lr
    12b8:	e000ed14 	.word	0xe000ed14

000012bc <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    12bc:	bf30      	wfi
    b z_SysNmiOnReset
    12be:	f7ff bffd 	b.w	12bc <z_SysNmiOnReset>
    12c2:	bf00      	nop

000012c4 <z_arm_prep_c>:
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
    12c4:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    12c6:	4b08      	ldr	r3, [pc, #32]	; (12e8 <z_arm_prep_c+0x24>)
    12c8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    12cc:	4a07      	ldr	r2, [pc, #28]	; (12ec <z_arm_prep_c+0x28>)
    12ce:	6093      	str	r3, [r2, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    12d0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    12d4:	f3bf 8f6f 	isb	sy
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    12d8:	f001 fd2e 	bl	2d38 <z_bss_zero>
	z_data_copy();
    12dc:	f002 fa4c 	bl	3778 <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    12e0:	f000 fa0a 	bl	16f8 <z_arm_interrupt_init>
	z_cstart();
    12e4:	f001 fd34 	bl	2d50 <z_cstart>
    12e8:	00000000 	.word	0x00000000
    12ec:	e000ed00 	.word	0xe000ed00

000012f0 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    12f0:	4a0a      	ldr	r2, [pc, #40]	; (131c <arch_swap+0x2c>)
    12f2:	6893      	ldr	r3, [r2, #8]
    12f4:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
	_current->arch.swap_return_value = _k_neg_eagain;
    12f8:	4909      	ldr	r1, [pc, #36]	; (1320 <arch_swap+0x30>)
    12fa:	6809      	ldr	r1, [r1, #0]
    12fc:	f8c3 10ac 	str.w	r1, [r3, #172]	; 0xac

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    1300:	4908      	ldr	r1, [pc, #32]	; (1324 <arch_swap+0x34>)
    1302:	684b      	ldr	r3, [r1, #4]
    1304:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    1308:	604b      	str	r3, [r1, #4]
    130a:	2300      	movs	r3, #0
    130c:	f383 8811 	msr	BASEPRI, r3
    1310:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    1314:	6893      	ldr	r3, [r2, #8]
}
    1316:	f8d3 00ac 	ldr.w	r0, [r3, #172]	; 0xac
    131a:	4770      	bx	lr
    131c:	2000035c 	.word	0x2000035c
    1320:	000057e8 	.word	0x000057e8
    1324:	e000ed00 	.word	0xe000ed00

00001328 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    1328:	4913      	ldr	r1, [pc, #76]	; (1378 <z_arm_pendsv+0x50>)
    ldr r2, [r1, #_kernel_offset_to_current]
    132a:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    132c:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
    1330:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    1332:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    1336:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    133a:	2020      	movs	r0, #32
    msr BASEPRI_MAX, r0
    133c:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    1340:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    1344:	4f0d      	ldr	r7, [pc, #52]	; (137c <z_arm_pendsv+0x54>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    1346:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    134a:	69ca      	ldr	r2, [r1, #28]

    str r2, [r1, #_kernel_offset_to_current]
    134c:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    134e:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    1350:	f8d2 00a8 	ldr.w	r0, [r2, #168]	; 0xa8
    movs r3, #0
    1354:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    1356:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    135a:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
    135e:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
    1360:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
    1362:	f000 fa6b 	bl	183c <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
    1366:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    136a:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
    136e:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    1372:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
    1376:	4770      	bx	lr
    ldr r1, =_kernel
    1378:	2000035c 	.word	0x2000035c
    ldr v4, =_SCS_ICSR
    137c:	e000ed04 	.word	0xe000ed04

00001380 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
    1380:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    1384:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    1386:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    138a:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    138e:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    1390:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    1394:	2902      	cmp	r1, #2
    beq _oops
    1396:	d0ff      	beq.n	1398 <_oops>

00001398 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    1398:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
    139a:	f002 fe8e 	bl	40ba <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
    139e:	bd01      	pop	{r0, pc}

000013a0 <arch_new_thread>:
 * of the ESF.
 */
void arch_new_thread(struct k_thread *thread, k_thread_stack_t *stack,
		     char *stack_ptr, k_thread_entry_t entry,
		     void *p1, void *p2, void *p3)
{
    13a0:	b410      	push	{r4}
		thread->stack_info.size -= FP_GUARD_EXTRA_SIZE;
	}
#endif /* FP_GUARD_EXTRA_SIZE */
#endif /* CONFIG_MPU_STACK_GUARD */

	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    13a2:	f1a2 0420 	sub.w	r4, r2, #32
		iframe->pc = (uint32_t)arch_user_mode_enter;
	} else {
		iframe->pc = (uint32_t)z_thread_entry;
	}
#else
	iframe->pc = (uint32_t)z_thread_entry;
    13a6:	490d      	ldr	r1, [pc, #52]	; (13dc <arch_new_thread+0x3c>)
#endif

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
    13a8:	f021 0101 	bic.w	r1, r1, #1
    13ac:	f842 1c08 	str.w	r1, [r2, #-8]
#endif
	iframe->a1 = (uint32_t)entry;
    13b0:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    13b4:	9b01      	ldr	r3, [sp, #4]
    13b6:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->a3 = (uint32_t)p2;
    13ba:	9b02      	ldr	r3, [sp, #8]
    13bc:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    13c0:	9b03      	ldr	r3, [sp, #12]
    13c2:	f842 3c14 	str.w	r3, [r2, #-20]

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    13c6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    13ca:	f842 3c04 	str.w	r3, [r2, #-4]
#if defined(CONFIG_COMPILER_ISA_THUMB2)
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
    13ce:	6504      	str	r4, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
    13d0:	2300      	movs	r3, #0
    13d2:	f8c0 30a8 	str.w	r3, [r0, #168]	; 0xa8
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    13d6:	bc10      	pop	{r4}
    13d8:	4770      	bx	lr
    13da:	bf00      	nop
    13dc:	00003f65 	.word	0x00003f65

000013e0 <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
    13e0:	4b16      	ldr	r3, [pc, #88]	; (143c <z_check_thread_stack_fail+0x5c>)
    13e2:	689a      	ldr	r2, [r3, #8]

	if (thread == NULL) {
    13e4:	b1da      	cbz	r2, 141e <z_check_thread_stack_fail+0x3e>
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
    13e6:	f110 0f16 	cmn.w	r0, #22
    13ea:	d01a      	beq.n	1422 <z_check_thread_stack_fail+0x42>
{
    13ec:	b410      	push	{r4}
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
    13ee:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
    13f2:	f1a3 0420 	sub.w	r4, r3, #32
    13f6:	4284      	cmp	r4, r0
    13f8:	d805      	bhi.n	1406 <z_check_thread_stack_fail+0x26>
    13fa:	4283      	cmp	r3, r0
    13fc:	d908      	bls.n	1410 <z_check_thread_stack_fail+0x30>
    13fe:	428b      	cmp	r3, r1
    1400:	d808      	bhi.n	1414 <z_check_thread_stack_fail+0x34>
    1402:	2100      	movs	r1, #0
    1404:	e000      	b.n	1408 <z_check_thread_stack_fail+0x28>
    1406:	2100      	movs	r1, #0
    1408:	b931      	cbnz	r1, 1418 <z_check_thread_stack_fail+0x38>
		return (uint32_t)Z_THREAD_STACK_BUFFER(z_main_stack);
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
    140a:	2000      	movs	r0, #0
}
    140c:	bc10      	pop	{r4}
    140e:	4770      	bx	lr
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
    1410:	2100      	movs	r1, #0
    1412:	e7f9      	b.n	1408 <z_check_thread_stack_fail+0x28>
    1414:	2101      	movs	r1, #1
    1416:	e7f7      	b.n	1408 <z_check_thread_stack_fail+0x28>
		return thread->stack_info.start;
    1418:	f8d2 0098 	ldr.w	r0, [r2, #152]	; 0x98
    141c:	e7f6      	b.n	140c <z_check_thread_stack_fail+0x2c>
		return 0;
    141e:	2000      	movs	r0, #0
    1420:	4770      	bx	lr
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
    1422:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
    1426:	428b      	cmp	r3, r1
    1428:	bf94      	ite	ls
    142a:	2100      	movls	r1, #0
    142c:	2101      	movhi	r1, #1
    142e:	b909      	cbnz	r1, 1434 <z_check_thread_stack_fail+0x54>
	return 0;
    1430:	2000      	movs	r0, #0
}
    1432:	4770      	bx	lr
		return thread->stack_info.start;
    1434:	f8d2 0098 	ldr.w	r0, [r2, #152]	; 0x98
    1438:	4770      	bx	lr
    143a:	bf00      	nop
    143c:	2000035c 	.word	0x2000035c

00001440 <arch_switch_to_main_thread>:
#endif /* CONFIG_FPU */
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
    1440:	b508      	push	{r3, lr}
    1442:	460d      	mov	r5, r1
    1444:	4614      	mov	r4, r2
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    1446:	4b08      	ldr	r3, [pc, #32]	; (1468 <arch_switch_to_main_thread+0x28>)
    1448:	6098      	str	r0, [r3, #8]
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
    144a:	f000 f9f7 	bl	183c <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    144e:	4620      	mov	r0, r4
    1450:	f385 8809 	msr	PSP, r5
    1454:	2100      	movs	r1, #0
    1456:	b663      	cpsie	if
    1458:	f381 8811 	msr	BASEPRI, r1
    145c:	f3bf 8f6f 	isb	sy
    1460:	2200      	movs	r2, #0
    1462:	2300      	movs	r3, #0
    1464:	f002 fd7e 	bl	3f64 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    1468:	2000035c 	.word	0x2000035c

0000146c <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    146c:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    146e:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    1470:	4a0b      	ldr	r2, [pc, #44]	; (14a0 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    1472:	6990      	ldr	r0, [r2, #24]
	cmp r0, #0
    1474:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    1476:	bf1e      	ittt	ne
	movne	r1, #0
    1478:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    147a:	6191      	strne	r1, [r2, #24]
		blne	z_pm_save_idle_exit
    147c:	f003 fe6b 	blne	5156 <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    1480:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    1482:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    1486:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    148a:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    148e:	4905      	ldr	r1, [pc, #20]	; (14a4 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    1490:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    1492:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    1494:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    1496:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    149a:	4903      	ldr	r1, [pc, #12]	; (14a8 <_isr_wrapper+0x3c>)
	bx r1
    149c:	4708      	bx	r1
    149e:	0000      	.short	0x0000
	ldr r2, =_kernel
    14a0:	2000035c 	.word	0x2000035c
	ldr r1, =_sw_isr_table
    14a4:	00005594 	.word	0x00005594
	ldr r1, =z_arm_int_exit
    14a8:	000014ad 	.word	0x000014ad

000014ac <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    14ac:	4b04      	ldr	r3, [pc, #16]	; (14c0 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    14ae:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    14b0:	69d8      	ldr	r0, [r3, #28]
	cmp r0, r1
    14b2:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    14b4:	d003      	beq.n	14be <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    14b6:	4903      	ldr	r1, [pc, #12]	; (14c4 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    14b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    14bc:	600a      	str	r2, [r1, #0]

000014be <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    14be:	4770      	bx	lr
	ldr r3, =_kernel
    14c0:	2000035c 	.word	0x2000035c
	ldr r1, =_SCS_ICSR
    14c4:	e000ed04 	.word	0xe000ed04

000014c8 <bus_fault>:
 * See z_arm_fault_dump() for example.
 *
 * @return N/A
 */
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
{
    14c8:	b510      	push	{r4, lr}
    14ca:	4614      	mov	r4, r2
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    14cc:	4b0f      	ldr	r3, [pc, #60]	; (150c <bus_fault+0x44>)
    14ce:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error");
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    14d0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    14d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    14d4:	f413 7f00 	tst.w	r3, #512	; 0x200
    14d8:	d00b      	beq.n	14f2 <bus_fault+0x2a>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
    14da:	4b0c      	ldr	r3, [pc, #48]	; (150c <bus_fault+0x44>)
    14dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    14de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    14e0:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    14e4:	d005      	beq.n	14f2 <bus_fault+0x2a>
			PR_EXC("  BFAR Address: 0x%x", bfar);
			if (from_hard_fault != 0) {
    14e6:	b121      	cbz	r1, 14f2 <bus_fault+0x2a>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    14e8:	4a08      	ldr	r2, [pc, #32]	; (150c <bus_fault+0x44>)
    14ea:	6a93      	ldr	r3, [r2, #40]	; 0x28
    14ec:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    14f0:	6293      	str	r3, [r2, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    14f2:	4b06      	ldr	r3, [pc, #24]	; (150c <bus_fault+0x44>)
    14f4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Imprecise data bus error");
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    14f6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    14f8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    14fa:	f442 427f 	orr.w	r2, r2, #65280	; 0xff00
    14fe:	629a      	str	r2, [r3, #40]	; 0x28

	*recoverable = memory_fault_recoverable(esf, true);
    1500:	2101      	movs	r1, #1
    1502:	f002 fdec 	bl	40de <memory_fault_recoverable>
    1506:	7020      	strb	r0, [r4, #0]

	return reason;
}
    1508:	2000      	movs	r0, #0
    150a:	bd10      	pop	{r4, pc}
    150c:	e000ed00 	.word	0xe000ed00

00001510 <usage_fault>:
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    1510:	4b07      	ldr	r3, [pc, #28]	; (1530 <usage_fault+0x20>)
    1512:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Division by zero");
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    1514:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    1516:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  No coprocessor instructions");
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    1518:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    151a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Illegal use of the EPSR");
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    151c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    151e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1520:	ea6f 4202 	mvn.w	r2, r2, lsl #16
    1524:	ea6f 4212 	mvn.w	r2, r2, lsr #16
    1528:	629a      	str	r2, [r3, #40]	; 0x28

	return reason;
}
    152a:	2000      	movs	r0, #0
    152c:	4770      	bx	lr
    152e:	bf00      	nop
    1530:	e000ed00 	.word	0xe000ed00

00001534 <mem_manage_fault>:
{
    1534:	b570      	push	{r4, r5, r6, lr}
    1536:	4605      	mov	r5, r0
    1538:	4616      	mov	r6, r2
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    153a:	4b1f      	ldr	r3, [pc, #124]	; (15b8 <mem_manage_fault+0x84>)
    153c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    153e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    1540:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1542:	f013 0f02 	tst.w	r3, #2
    1546:	d00c      	beq.n	1562 <mem_manage_fault+0x2e>
		uint32_t temp = SCB->MMFAR;
    1548:	4b1b      	ldr	r3, [pc, #108]	; (15b8 <mem_manage_fault+0x84>)
    154a:	6b58      	ldr	r0, [r3, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    154c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    154e:	f013 0f80 	tst.w	r3, #128	; 0x80
    1552:	d024      	beq.n	159e <mem_manage_fault+0x6a>
			if (from_hard_fault != 0) {
    1554:	b139      	cbz	r1, 1566 <mem_manage_fault+0x32>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    1556:	4a18      	ldr	r2, [pc, #96]	; (15b8 <mem_manage_fault+0x84>)
    1558:	6a93      	ldr	r3, [r2, #40]	; 0x28
    155a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    155e:	6293      	str	r3, [r2, #40]	; 0x28
    1560:	e001      	b.n	1566 <mem_manage_fault+0x32>
	uint32_t mmfar = -EINVAL;
    1562:	f06f 0015 	mvn.w	r0, #21
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    1566:	4b14      	ldr	r3, [pc, #80]	; (15b8 <mem_manage_fault+0x84>)
    1568:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    156a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    156c:	f013 0f10 	tst.w	r3, #16
    1570:	d104      	bne.n	157c <mem_manage_fault+0x48>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    1572:	4b11      	ldr	r3, [pc, #68]	; (15b8 <mem_manage_fault+0x84>)
    1574:	6a9c      	ldr	r4, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    1576:	f014 0402 	ands.w	r4, r4, #2
    157a:	d004      	beq.n	1586 <mem_manage_fault+0x52>
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
    157c:	4b0e      	ldr	r3, [pc, #56]	; (15b8 <mem_manage_fault+0x84>)
    157e:	685c      	ldr	r4, [r3, #4]
    1580:	f414 6400 	ands.w	r4, r4, #2048	; 0x800
    1584:	d10e      	bne.n	15a4 <mem_manage_fault+0x70>
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    1586:	4a0c      	ldr	r2, [pc, #48]	; (15b8 <mem_manage_fault+0x84>)
    1588:	6a93      	ldr	r3, [r2, #40]	; 0x28
    158a:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
    158e:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    1590:	2101      	movs	r1, #1
    1592:	4628      	mov	r0, r5
    1594:	f002 fda3 	bl	40de <memory_fault_recoverable>
    1598:	7030      	strb	r0, [r6, #0]
}
    159a:	4620      	mov	r0, r4
    159c:	bd70      	pop	{r4, r5, r6, pc}
	uint32_t mmfar = -EINVAL;
    159e:	f06f 0015 	mvn.w	r0, #21
    15a2:	e7e0      	b.n	1566 <mem_manage_fault+0x32>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
    15a4:	4629      	mov	r1, r5
    15a6:	f7ff ff1b 	bl	13e0 <z_check_thread_stack_fail>
			if (min_stack_ptr) {
    15aa:	4604      	mov	r4, r0
    15ac:	2800      	cmp	r0, #0
    15ae:	d0ea      	beq.n	1586 <mem_manage_fault+0x52>
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
    15b0:	f380 8809 	msr	PSP, r0
				reason = K_ERR_STACK_CHK_FAIL;
    15b4:	2402      	movs	r4, #2
    15b6:	e7e6      	b.n	1586 <mem_manage_fault+0x52>
    15b8:	e000ed00 	.word	0xe000ed00

000015bc <hard_fault>:
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t hard_fault(z_arch_esf_t *esf, bool *recoverable)
{
    15bc:	b510      	push	{r4, lr}
    15be:	4604      	mov	r4, r0
		reason = esf->basic.r0;
	}

	*recoverable = memory_fault_recoverable(esf, true);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	*recoverable = false;
    15c0:	2300      	movs	r3, #0
    15c2:	700b      	strb	r3, [r1, #0]

	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    15c4:	4b1b      	ldr	r3, [pc, #108]	; (1634 <hard_fault+0x78>)
    15c6:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
    15c8:	f010 0002 	ands.w	r0, r0, #2
    15cc:	d12d      	bne.n	162a <hard_fault+0x6e>
		PR_EXC("  Bus fault on vector table read");
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
    15ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    15d0:	2b00      	cmp	r3, #0
    15d2:	db2b      	blt.n	162c <hard_fault+0x70>
		PR_EXC("  Debug event");
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    15d4:	4b17      	ldr	r3, [pc, #92]	; (1634 <hard_fault+0x78>)
    15d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    15d8:	f013 4380 	ands.w	r3, r3, #1073741824	; 0x40000000
    15dc:	d027      	beq.n	162e <hard_fault+0x72>
	uint16_t *ret_addr = (uint16_t *)esf->basic.pc;
    15de:	69a3      	ldr	r3, [r4, #24]
	uint16_t fault_insn = *(ret_addr - 1);
    15e0:	f833 2c02 	ldrh.w	r2, [r3, #-2]
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
    15e4:	f64d 7302 	movw	r3, #57090	; 0xdf02
    15e8:	429a      	cmp	r2, r3
    15ea:	d010      	beq.n	160e <hard_fault+0x52>
		PR_EXC("  Fault escalation (see below)");
		if (z_arm_is_synchronous_svc(esf)) {
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
			reason = esf->basic.r0;
		} else if (SCB_MMFSR != 0) {
    15ec:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    15f0:	f603 6326 	addw	r3, r3, #3622	; 0xe26
    15f4:	781b      	ldrb	r3, [r3, #0]
    15f6:	b963      	cbnz	r3, 1612 <hard_fault+0x56>
			reason = mem_manage_fault(esf, 1, recoverable);
		} else if (SCB_BFSR != 0) {
    15f8:	4b0f      	ldr	r3, [pc, #60]	; (1638 <hard_fault+0x7c>)
    15fa:	781b      	ldrb	r3, [r3, #0]
    15fc:	b97b      	cbnz	r3, 161e <hard_fault+0x62>
			reason = bus_fault(esf, 1, recoverable);
		} else if (SCB_UFSR != 0) {
    15fe:	4b0f      	ldr	r3, [pc, #60]	; (163c <hard_fault+0x80>)
    1600:	881b      	ldrh	r3, [r3, #0]
    1602:	b29b      	uxth	r3, r3
    1604:	b193      	cbz	r3, 162c <hard_fault+0x70>
			reason = usage_fault(esf);
    1606:	4620      	mov	r0, r4
    1608:	f7ff ff82 	bl	1510 <usage_fault>
    160c:	e00e      	b.n	162c <hard_fault+0x70>
			reason = esf->basic.r0;
    160e:	6820      	ldr	r0, [r4, #0]
    1610:	e00c      	b.n	162c <hard_fault+0x70>
			reason = mem_manage_fault(esf, 1, recoverable);
    1612:	460a      	mov	r2, r1
    1614:	2101      	movs	r1, #1
    1616:	4620      	mov	r0, r4
    1618:	f7ff ff8c 	bl	1534 <mem_manage_fault>
    161c:	e006      	b.n	162c <hard_fault+0x70>
			reason = bus_fault(esf, 1, recoverable);
    161e:	460a      	mov	r2, r1
    1620:	2101      	movs	r1, #1
    1622:	4620      	mov	r0, r4
    1624:	f7ff ff50 	bl	14c8 <bus_fault>
    1628:	e000      	b.n	162c <hard_fault+0x70>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    162a:	2000      	movs	r0, #0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	return reason;
}
    162c:	bd10      	pop	{r4, pc}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    162e:	4618      	mov	r0, r3
	return reason;
    1630:	e7fc      	b.n	162c <hard_fault+0x70>
    1632:	bf00      	nop
    1634:	e000ed00 	.word	0xe000ed00
    1638:	e000ed29 	.word	0xe000ed29
    163c:	e000ed2a 	.word	0xe000ed2a

00001640 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    1640:	b570      	push	{r4, r5, r6, lr}
    1642:	b08a      	sub	sp, #40	; 0x28
    1644:	460c      	mov	r4, r1
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    1646:	4b22      	ldr	r3, [pc, #136]	; (16d0 <z_arm_fault+0x90>)
    1648:	6859      	ldr	r1, [r3, #4]
    164a:	f3c1 0108 	ubfx	r1, r1, #0, #9
    164e:	2300      	movs	r3, #0
    1650:	f383 8811 	msr	BASEPRI, r3
    1654:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    1658:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
    165c:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
    1660:	d115      	bne.n	168e <z_arm_fault+0x4e>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
    1662:	f002 030c 	and.w	r3, r2, #12
    1666:	2b08      	cmp	r3, #8
    1668:	d014      	beq.n	1694 <z_arm_fault+0x54>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    166a:	f012 0f08 	tst.w	r2, #8
    166e:	d00b      	beq.n	1688 <z_arm_fault+0x48>
	*nested_exc = false;
    1670:	2600      	movs	r6, #0

#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
    1672:	f10d 0227 	add.w	r2, sp, #39	; 0x27
    1676:	4620      	mov	r0, r4
    1678:	f002 fd36 	bl	40e8 <fault_handle>
    167c:	4605      	mov	r5, r0
	if (recoverable) {
    167e:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    1682:	b153      	cbz	r3, 169a <z_arm_fault+0x5a>
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
	}

	z_arm_fatal_error(reason, &esf_copy);
}
    1684:	b00a      	add	sp, #40	; 0x28
    1686:	bd70      	pop	{r4, r5, r6, pc}
			ptr_esf = (z_arch_esf_t *)msp;
    1688:	4604      	mov	r4, r0
			*nested_exc = true;
    168a:	2601      	movs	r6, #1
    168c:	e7f1      	b.n	1672 <z_arm_fault+0x32>
	*nested_exc = false;
    168e:	2600      	movs	r6, #0
		return NULL;
    1690:	4634      	mov	r4, r6
    1692:	e7ee      	b.n	1672 <z_arm_fault+0x32>
	*nested_exc = false;
    1694:	2600      	movs	r6, #0
		return NULL;
    1696:	4634      	mov	r4, r6
    1698:	e7eb      	b.n	1672 <z_arm_fault+0x32>
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    169a:	2220      	movs	r2, #32
    169c:	4621      	mov	r1, r4
    169e:	a801      	add	r0, sp, #4
    16a0:	f002 fde6 	bl	4270 <memcpy>
	if (nested_exc) {
    16a4:	b14e      	cbz	r6, 16ba <z_arm_fault+0x7a>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    16a6:	9b08      	ldr	r3, [sp, #32]
    16a8:	f3c3 0208 	ubfx	r2, r3, #0, #9
    16ac:	b95a      	cbnz	r2, 16c6 <z_arm_fault+0x86>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    16ae:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    16b2:	ea6f 2343 	mvn.w	r3, r3, lsl #9
    16b6:	9308      	str	r3, [sp, #32]
    16b8:	e005      	b.n	16c6 <z_arm_fault+0x86>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    16ba:	9b08      	ldr	r3, [sp, #32]
    16bc:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    16c0:	f023 0301 	bic.w	r3, r3, #1
    16c4:	9308      	str	r3, [sp, #32]
	z_arm_fatal_error(reason, &esf_copy);
    16c6:	a901      	add	r1, sp, #4
    16c8:	4628      	mov	r0, r5
    16ca:	f002 fcf2 	bl	40b2 <z_arm_fatal_error>
    16ce:	e7d9      	b.n	1684 <z_arm_fault+0x44>
    16d0:	e000ed00 	.word	0xe000ed00

000016d4 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    16d4:	4a02      	ldr	r2, [pc, #8]	; (16e0 <z_arm_fault_init+0xc>)
    16d6:	6953      	ldr	r3, [r2, #20]
    16d8:	f043 0310 	orr.w	r3, r3, #16
    16dc:	6153      	str	r3, [r2, #20]
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
    16de:	4770      	bx	lr
    16e0:	e000ed00 	.word	0xe000ed00

000016e4 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    16e4:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    16e8:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    16ec:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    16ee:	4672      	mov	r2, lr
	bl z_arm_fault
    16f0:	f7ff ffa6 	bl	1640 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    16f4:	bd01      	pop	{r0, pc}
    16f6:	bf00      	nop

000016f8 <z_arm_interrupt_init>:
 * @return N/A
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    16f8:	2200      	movs	r2, #0

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    16fa:	e006      	b.n	170a <z_arm_interrupt_init+0x12>
    16fc:	f002 010f 	and.w	r1, r2, #15
    1700:	4b09      	ldr	r3, [pc, #36]	; (1728 <z_arm_interrupt_init+0x30>)
    1702:	440b      	add	r3, r1
    1704:	2120      	movs	r1, #32
    1706:	7619      	strb	r1, [r3, #24]
    1708:	3201      	adds	r2, #1
    170a:	2a1d      	cmp	r2, #29
    170c:	dc0a      	bgt.n	1724 <z_arm_interrupt_init+0x2c>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
    170e:	b253      	sxtb	r3, r2
  if ((int32_t)(IRQn) >= 0)
    1710:	2b00      	cmp	r3, #0
    1712:	dbf3      	blt.n	16fc <z_arm_interrupt_init+0x4>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1714:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    1718:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    171c:	2120      	movs	r1, #32
    171e:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
    1722:	e7f1      	b.n	1708 <z_arm_interrupt_init+0x10>
	}
}
    1724:	4770      	bx	lr
    1726:	bf00      	nop
    1728:	e000ecfc 	.word	0xe000ecfc

0000172c <__start>:
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
    172c:	2000      	movs	r0, #0
    msr CONTROL, r0
    172e:	f380 8814 	msr	CONTROL, r0
    isb
    1732:	f3bf 8f6f 	isb	sy
#endif /* CONFIG_CPU_CORTEX_M_HAS_SPLIM */

#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
    1736:	f003 feff 	bl	5538 <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
    173a:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
    173c:	490d      	ldr	r1, [pc, #52]	; (1774 <__start+0x48>)
    str r0, [r1]
    173e:	6008      	str	r0, [r1, #0]
    dsb
    1740:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    1744:	480c      	ldr	r0, [pc, #48]	; (1778 <__start+0x4c>)
    msr msp, r0
    1746:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
    174a:	f000 f829 	bl	17a0 <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    174e:	2020      	movs	r0, #32
    msr BASEPRI, r0
    1750:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    1754:	4809      	ldr	r0, [pc, #36]	; (177c <__start+0x50>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    1756:	f44f 6102 	mov.w	r1, #2080	; 0x820
    adds r0, r0, r1
    175a:	1840      	adds	r0, r0, r1
    msr PSP, r0
    175c:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    1760:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    1764:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    1766:	4308      	orrs	r0, r1
    msr CONTROL, r0
    1768:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    176c:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    1770:	f7ff fda8 	bl	12c4 <z_arm_prep_c>
    ldr r1, =_SCS_MPU_CTRL
    1774:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    1778:	200007a0 	.word	0x200007a0
    ldr r0, =z_interrupt_stacks
    177c:	200008e0 	.word	0x200008e0

00001780 <z_arm_clear_arm_mpu_config>:
void z_arm_clear_arm_mpu_config(void)
{
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
    1780:	4b06      	ldr	r3, [pc, #24]	; (179c <z_arm_clear_arm_mpu_config+0x1c>)
    1782:	6818      	ldr	r0, [r3, #0]
	int num_regions =
    1784:	f3c0 2007 	ubfx	r0, r0, #8, #8

	for (i = 0; i < num_regions; i++) {
    1788:	2300      	movs	r3, #0
    178a:	4283      	cmp	r3, r0
    178c:	da05      	bge.n	179a <z_arm_clear_arm_mpu_config+0x1a>
/** Clear and disable the given MPU region.
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
    178e:	4a03      	ldr	r2, [pc, #12]	; (179c <z_arm_clear_arm_mpu_config+0x1c>)
    1790:	6093      	str	r3, [r2, #8]
  MPU->RASR = 0U;
    1792:	2100      	movs	r1, #0
    1794:	6111      	str	r1, [r2, #16]
    1796:	3301      	adds	r3, #1
    1798:	e7f7      	b.n	178a <z_arm_clear_arm_mpu_config+0xa>
		ARM_MPU_ClrRegion(i);
	}
}
    179a:	4770      	bx	lr
    179c:	e000ed90 	.word	0xe000ed90

000017a0 <z_arm_init_arch_hw_at_boot>:
 * components and core registers.
 *
 * @return N/A
 */
void z_arm_init_arch_hw_at_boot(void)
{
    17a0:	b510      	push	{r4, lr}
  __ASM volatile ("cpsid i" : : : "memory");
    17a2:	b672      	cpsid	i
  \details Assigns the given value to the Fault Mask register.
  \param [in]    faultMask  Fault Mask value to set
 */
__STATIC_FORCEINLINE void __set_FAULTMASK(uint32_t faultMask)
{
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
    17a4:	2400      	movs	r4, #0
    17a6:	f384 8813 	msr	FAULTMASK, r4

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
    17aa:	f7ff ffe9 	bl	1780 <z_arm_clear_arm_mpu_config>
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
    17ae:	4623      	mov	r3, r4
    17b0:	e008      	b.n	17c4 <z_arm_init_arch_hw_at_boot+0x24>
		NVIC->ICER[i] = 0xFFFFFFFF;
    17b2:	f103 0120 	add.w	r1, r3, #32
    17b6:	4a0e      	ldr	r2, [pc, #56]	; (17f0 <z_arm_init_arch_hw_at_boot+0x50>)
    17b8:	f04f 30ff 	mov.w	r0, #4294967295
    17bc:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
    17c0:	3301      	adds	r3, #1
    17c2:	b2db      	uxtb	r3, r3
    17c4:	2b07      	cmp	r3, #7
    17c6:	d9f4      	bls.n	17b2 <z_arm_init_arch_hw_at_boot+0x12>
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
    17c8:	2300      	movs	r3, #0
    17ca:	e008      	b.n	17de <z_arm_init_arch_hw_at_boot+0x3e>
		NVIC->ICPR[i] = 0xFFFFFFFF;
    17cc:	f103 0160 	add.w	r1, r3, #96	; 0x60
    17d0:	4a07      	ldr	r2, [pc, #28]	; (17f0 <z_arm_init_arch_hw_at_boot+0x50>)
    17d2:	f04f 30ff 	mov.w	r0, #4294967295
    17d6:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
    17da:	3301      	adds	r3, #1
    17dc:	b2db      	uxtb	r3, r3
    17de:	2b07      	cmp	r3, #7
    17e0:	d9f4      	bls.n	17cc <z_arm_init_arch_hw_at_boot+0x2c>
  __ASM volatile ("cpsie i" : : : "memory");
    17e2:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
    17e4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    17e8:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
    17ec:	bd10      	pop	{r4, pc}
    17ee:	bf00      	nop
    17f0:	e000e100 	.word	0xe000e100

000017f4 <z_impl_k_thread_abort>:
#include <kswap.h>
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
    17f4:	b508      	push	{r3, lr}
	if (_current == thread) {
    17f6:	4b08      	ldr	r3, [pc, #32]	; (1818 <z_impl_k_thread_abort+0x24>)
    17f8:	689b      	ldr	r3, [r3, #8]
    17fa:	4283      	cmp	r3, r0
    17fc:	d002      	beq.n	1804 <z_impl_k_thread_abort+0x10>
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
		}
	}

	z_thread_abort(thread);
    17fe:	f001 ff93 	bl	3728 <z_thread_abort>
}
    1802:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    1804:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    1808:	2b00      	cmp	r3, #0
    180a:	d0f8      	beq.n	17fe <z_impl_k_thread_abort+0xa>
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    180c:	4a03      	ldr	r2, [pc, #12]	; (181c <z_impl_k_thread_abort+0x28>)
    180e:	6853      	ldr	r3, [r2, #4]
    1810:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    1814:	6053      	str	r3, [r2, #4]
    1816:	e7f2      	b.n	17fe <z_impl_k_thread_abort+0xa>
    1818:	2000035c 	.word	0x2000035c
    181c:	e000ed00 	.word	0xe000ed00

00001820 <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
    1820:	b508      	push	{r3, lr}
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    1822:	4b03      	ldr	r3, [pc, #12]	; (1830 <z_arm_configure_static_mpu_regions+0x10>)
    1824:	4a03      	ldr	r2, [pc, #12]	; (1834 <z_arm_configure_static_mpu_regions+0x14>)
    1826:	2101      	movs	r1, #1
    1828:	4803      	ldr	r0, [pc, #12]	; (1838 <z_arm_configure_static_mpu_regions+0x18>)
    182a:	f002 fce3 	bl	41f4 <arm_core_mpu_configure_static_mpu_regions>
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
    182e:	bd08      	pop	{r3, pc}
    1830:	20006000 	.word	0x20006000
    1834:	20000000 	.word	0x20000000
    1838:	00005708 	.word	0x00005708

0000183c <z_arm_configure_dynamic_mpu_regions>:
 *
 * This function is not inherently thread-safe, but the memory domain
 * spinlock needs to be held anyway.
 */
void z_arm_configure_dynamic_mpu_regions(struct k_thread *thread)
{
    183c:	b508      	push	{r3, lr}
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
    183e:	f8d0 3098 	ldr.w	r3, [r0, #152]	; 0x98
    1842:	3b20      	subs	r3, #32
	}

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
    1844:	4804      	ldr	r0, [pc, #16]	; (1858 <z_arm_configure_dynamic_mpu_regions+0x1c>)
    1846:	6003      	str	r3, [r0, #0]
	dynamic_regions[region_num].size = guard_size;
    1848:	2320      	movs	r3, #32
    184a:	6043      	str	r3, [r0, #4]
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
    184c:	4b03      	ldr	r3, [pc, #12]	; (185c <z_arm_configure_dynamic_mpu_regions+0x20>)
    184e:	6083      	str	r3, [r0, #8]

	region_num++;
#endif /* CONFIG_MPU_STACK_GUARD */

	/* Configure the dynamic MPU regions */
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
    1850:	2101      	movs	r1, #1
    1852:	f002 fcd3 	bl	41fc <arm_core_mpu_configure_dynamic_mpu_regions>
						   region_num);
}
    1856:	bd08      	pop	{r3, pc}
    1858:	200002d4 	.word	0x200002d4
    185c:	150b0000 	.word	0x150b0000

00001860 <region_init>:
#endif /* CPU_CORTEX_M0PLUS | CPU_CORTEX_M3 | CPU_CORTEX_M4 */
}

static inline void set_region_number(uint32_t index)
{
	MPU->RNR = index;
    1860:	4a06      	ldr	r2, [pc, #24]	; (187c <region_init+0x1c>)
    1862:	6090      	str	r0, [r2, #8]

	set_region_base_address(region_conf->base & MPU_RBAR_ADDR_Msk);
	set_region_attributes(region_conf->attr.rasr);
	set_region_size(region_conf->size | MPU_RASR_ENABLE_Msk);
#else
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    1864:	680b      	ldr	r3, [r1, #0]
    1866:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
    186a:	4303      	orrs	r3, r0
    186c:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    1870:	60d3      	str	r3, [r2, #12]
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    1872:	688b      	ldr	r3, [r1, #8]
    1874:	f043 0301 	orr.w	r3, r3, #1
    1878:	6113      	str	r3, [r2, #16]
	LOG_DBG("[%d] 0x%08x 0x%08x",
		index, region_conf->base, region_conf->attr.rasr);
#endif
}
    187a:	4770      	bx	lr
    187c:	e000ed90 	.word	0xe000ed90

00001880 <mpu_configure_static_mpu_regions>:
 */
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
    1880:	b510      	push	{r4, lr}
	int mpu_reg_index = static_regions_num;
    1882:	4c03      	ldr	r4, [pc, #12]	; (1890 <mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
    1884:	2301      	movs	r3, #1
    1886:	7822      	ldrb	r2, [r4, #0]
    1888:	f002 fc8c 	bl	41a4 <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    188c:	7020      	strb	r0, [r4, #0]

	return mpu_reg_index;
}
    188e:	bd10      	pop	{r4, pc}
    1890:	20000398 	.word	0x20000398

00001894 <mpu_configure_dynamic_mpu_regions>:
 * If the dynamic MPU regions configuration has not been successfully
 * performed, the error signal is propagated to the caller of the function.
 */
static int mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	dynamic_regions[], uint8_t regions_num)
{
    1894:	b508      	push	{r3, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
    1896:	2300      	movs	r3, #0
    1898:	4a08      	ldr	r2, [pc, #32]	; (18bc <mpu_configure_dynamic_mpu_regions+0x28>)
    189a:	7812      	ldrb	r2, [r2, #0]
    189c:	f002 fc82 	bl	41a4 <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
    18a0:	f110 0f16 	cmn.w	r0, #22
    18a4:	d008      	beq.n	18b8 <mpu_configure_dynamic_mpu_regions+0x24>

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
    18a6:	4603      	mov	r3, r0
    18a8:	2b07      	cmp	r3, #7
    18aa:	dc05      	bgt.n	18b8 <mpu_configure_dynamic_mpu_regions+0x24>
  MPU->RNR = rnr;
    18ac:	4a04      	ldr	r2, [pc, #16]	; (18c0 <mpu_configure_dynamic_mpu_regions+0x2c>)
    18ae:	6093      	str	r3, [r2, #8]
  MPU->RASR = 0U;
    18b0:	2100      	movs	r1, #0
    18b2:	6111      	str	r1, [r2, #16]
    18b4:	3301      	adds	r3, #1
    18b6:	e7f7      	b.n	18a8 <mpu_configure_dynamic_mpu_regions+0x14>
			ARM_MPU_ClrRegion(i);
		}
	}

	return mpu_reg_index;
}
    18b8:	bd08      	pop	{r3, pc}
    18ba:	bf00      	nop
    18bc:	20000398 	.word	0x20000398
    18c0:	e000ed90 	.word	0xe000ed90

000018c4 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    18c4:	4b03      	ldr	r3, [pc, #12]	; (18d4 <arm_core_mpu_enable+0x10>)
    18c6:	2205      	movs	r2, #5
    18c8:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
    18ca:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    18ce:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    18d2:	4770      	bx	lr
    18d4:	e000ed90 	.word	0xe000ed90

000018d8 <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
    18d8:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    18dc:	4b01      	ldr	r3, [pc, #4]	; (18e4 <arm_core_mpu_disable+0xc>)
    18de:	2200      	movs	r2, #0
    18e0:	605a      	str	r2, [r3, #4]
}
    18e2:	4770      	bx	lr
    18e4:	e000ed90 	.word	0xe000ed90

000018e8 <z_arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
int z_arm_mpu_init(void)
{
    18e8:	b538      	push	{r3, r4, r5, lr}
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    18ea:	4b0e      	ldr	r3, [pc, #56]	; (1924 <z_arm_mpu_init+0x3c>)
    18ec:	681d      	ldr	r5, [r3, #0]
    18ee:	2d08      	cmp	r5, #8
    18f0:	d815      	bhi.n	191e <z_arm_mpu_init+0x36>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
    18f2:	f7ff fff1 	bl	18d8 <arm_core_mpu_disable>

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    18f6:	2400      	movs	r4, #0
    18f8:	42a5      	cmp	r5, r4
    18fa:	d90a      	bls.n	1912 <z_arm_mpu_init+0x2a>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
    18fc:	4b09      	ldr	r3, [pc, #36]	; (1924 <z_arm_mpu_init+0x3c>)
    18fe:	6859      	ldr	r1, [r3, #4]
    1900:	eb04 0244 	add.w	r2, r4, r4, lsl #1
    1904:	0093      	lsls	r3, r2, #2
    1906:	4419      	add	r1, r3
    1908:	4620      	mov	r0, r4
    190a:	f7ff ffa9 	bl	1860 <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    190e:	3401      	adds	r4, #1
    1910:	e7f2      	b.n	18f8 <z_arm_mpu_init+0x10>
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
    1912:	4b05      	ldr	r3, [pc, #20]	; (1928 <z_arm_mpu_init+0x40>)
    1914:	701d      	strb	r5, [r3, #0]


	arm_core_mpu_enable();
    1916:	f7ff ffd5 	bl	18c4 <arm_core_mpu_enable>
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
    191a:	2000      	movs	r0, #0
}
    191c:	bd38      	pop	{r3, r4, r5, pc}
		return -1;
    191e:	f04f 30ff 	mov.w	r0, #4294967295
    1922:	e7fb      	b.n	191c <z_arm_mpu_init+0x34>
    1924:	00005724 	.word	0x00005724
    1928:	20000398 	.word	0x20000398

0000192c <sys_arch_reboot>:
    }
    else
    {
        p_gpregret = &((volatile uint32_t *)&p_reg->GPREGRET)[0];
    }
    *p_gpregret = val;
    192c:	b2c0      	uxtb	r0, r0
    192e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    1932:	f8c3 051c 	str.w	r0, [r3, #1308]	; 0x51c
  __ASM volatile ("dsb 0xF":::"memory");
    1936:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    193a:	4905      	ldr	r1, [pc, #20]	; (1950 <sys_arch_reboot+0x24>)
    193c:	68ca      	ldr	r2, [r1, #12]
    193e:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    1942:	4b04      	ldr	r3, [pc, #16]	; (1954 <sys_arch_reboot+0x28>)
    1944:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    1946:	60cb      	str	r3, [r1, #12]
    1948:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    194c:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    194e:	e7fd      	b.n	194c <sys_arch_reboot+0x20>
    1950:	e000ed00 	.word	0xe000ed00
    1954:	05fa0004 	.word	0x05fa0004

00001958 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    1958:	b130      	cbz	r0, 1968 <arch_busy_wait+0x10>

	return 0;
}

void arch_busy_wait(uint32_t time_us)
{
    195a:	b508      	push	{r3, lr}
    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
    195c:	0180      	lsls	r0, r0, #6
    195e:	4b03      	ldr	r3, [pc, #12]	; (196c <arch_busy_wait+0x14>)
    1960:	f043 0301 	orr.w	r3, r3, #1
    1964:	4798      	blx	r3
	nrfx_coredep_delay_us(time_us);
}
    1966:	bd08      	pop	{r3, pc}
    1968:	4770      	bx	lr
    196a:	bf00      	nop
    196c:	000056d0 	.word	0x000056d0

00001970 <get_hf_flags>:
static uint32_t *get_hf_flags(void)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;

	return &data->subsys[CLOCK_CONTROL_NRF_TYPE_HFCLK].flags;
}
    1970:	4800      	ldr	r0, [pc, #0]	; (1974 <get_hf_flags+0x4>)
    1972:	4770      	bx	lr
    1974:	20000330 	.word	0x20000330

00001978 <get_subsys>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;
	size_t offset = (size_t)(mgr - data->mgr);
    1978:	4b03      	ldr	r3, [pc, #12]	; (1988 <get_subsys+0x10>)
    197a:	1ac0      	subs	r0, r0, r3
    197c:	1080      	asrs	r0, r0, #2

	return (clock_control_subsys_t)offset;
}
    197e:	4b03      	ldr	r3, [pc, #12]	; (198c <get_subsys+0x14>)
    1980:	fb03 f000 	mul.w	r0, r3, r0
    1984:	4770      	bx	lr
    1986:	bf00      	nop
    1988:	200002f0 	.word	0x200002f0
    198c:	b6db6db7 	.word	0xb6db6db7

00001990 <onoff_stop>:

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    1990:	b538      	push	{r3, r4, r5, lr}
    1992:	4605      	mov	r5, r0
    1994:	460c      	mov	r4, r1
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    1996:	f7ff ffef 	bl	1978 <get_subsys>
    199a:	4601      	mov	r1, r0
    199c:	2240      	movs	r2, #64	; 0x40
    199e:	4803      	ldr	r0, [pc, #12]	; (19ac <onoff_stop+0x1c>)
    19a0:	f002 fd4a 	bl	4438 <stop>
    19a4:	4601      	mov	r1, r0
	notify(mgr, res);
    19a6:	4628      	mov	r0, r5
    19a8:	47a0      	blx	r4
}
    19aa:	bd38      	pop	{r3, r4, r5, pc}
    19ac:	00005564 	.word	0x00005564

000019b0 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    19b0:	b530      	push	{r4, r5, lr}
    19b2:	b083      	sub	sp, #12
    19b4:	4605      	mov	r5, r0
    19b6:	460c      	mov	r4, r1
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    19b8:	f7ff ffde 	bl	1978 <get_subsys>
    19bc:	4601      	mov	r1, r0
    19be:	2340      	movs	r3, #64	; 0x40
    19c0:	9300      	str	r3, [sp, #0]
    19c2:	4623      	mov	r3, r4
    19c4:	4a05      	ldr	r2, [pc, #20]	; (19dc <onoff_start+0x2c>)
    19c6:	4806      	ldr	r0, [pc, #24]	; (19e0 <onoff_start+0x30>)
    19c8:	f002 fd50 	bl	446c <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
    19cc:	1e01      	subs	r1, r0, #0
    19ce:	db01      	blt.n	19d4 <onoff_start+0x24>
		notify(mgr, err);
	}
}
    19d0:	b003      	add	sp, #12
    19d2:	bd30      	pop	{r4, r5, pc}
		notify(mgr, err);
    19d4:	4628      	mov	r0, r5
    19d6:	47a0      	blx	r4
}
    19d8:	e7fa      	b.n	19d0 <onoff_start+0x20>
    19da:	bf00      	nop
    19dc:	000044b5 	.word	0x000044b5
    19e0:	00005564 	.word	0x00005564

000019e4 <clock_event_handler>:
		__ASSERT_NO_MSG(false);
	}
}

static void clock_event_handler(nrfx_clock_evt_type_t event)
{
    19e4:	b508      	push	{r3, lr}
	const struct device *dev = CLOCK_DEVICE;

	switch (event) {
    19e6:	b110      	cbz	r0, 19ee <clock_event_handler+0xa>
    19e8:	2801      	cmp	r0, #1
    19ea:	d00d      	beq.n	1a08 <clock_event_handler+0x24>
		break;
	default:
		__ASSERT_NO_MSG(0);
		break;
	}
}
    19ec:	bd08      	pop	{r3, pc}
				get_sub_data(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
    19ee:	2100      	movs	r1, #0
    19f0:	4808      	ldr	r0, [pc, #32]	; (1a14 <clock_event_handler+0x30>)
    19f2:	f002 fcaa 	bl	434a <get_sub_data>
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
    19f6:	6883      	ldr	r3, [r0, #8]
    19f8:	f013 0f07 	tst.w	r3, #7
    19fc:	d1f6      	bne.n	19ec <clock_event_handler+0x8>
			clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
    19fe:	2100      	movs	r1, #0
    1a00:	4804      	ldr	r0, [pc, #16]	; (1a14 <clock_event_handler+0x30>)
    1a02:	f002 fd07 	bl	4414 <clkstarted_handle>
    1a06:	e7f1      	b.n	19ec <clock_event_handler+0x8>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    1a08:	2101      	movs	r1, #1
    1a0a:	4802      	ldr	r0, [pc, #8]	; (1a14 <clock_event_handler+0x30>)
    1a0c:	f002 fd02 	bl	4414 <clkstarted_handle>
}
    1a10:	e7ec      	b.n	19ec <clock_event_handler+0x8>
    1a12:	bf00      	nop
    1a14:	00005564 	.word	0x00005564

00001a18 <generic_hfclk_start>:
{
    1a18:	b510      	push	{r4, lr}
	__asm__ volatile(
    1a1a:	f04f 0320 	mov.w	r3, #32
    1a1e:	f3ef 8411 	mrs	r4, BASEPRI
    1a22:	f383 8812 	msr	BASEPRI_MAX, r3
    1a26:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
    1a2a:	4a13      	ldr	r2, [pc, #76]	; (1a78 <generic_hfclk_start+0x60>)
    1a2c:	6813      	ldr	r3, [r2, #0]
    1a2e:	f043 0302 	orr.w	r3, r3, #2
    1a32:	6013      	str	r3, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
    1a34:	f013 0f01 	tst.w	r3, #1
    1a38:	d108      	bne.n	1a4c <generic_hfclk_start+0x34>
	bool already_started = false;
    1a3a:	2300      	movs	r3, #0
	__asm__ volatile(
    1a3c:	f384 8811 	msr	BASEPRI, r4
    1a40:	f3bf 8f6f 	isb	sy
	if (already_started) {
    1a44:	b99b      	cbnz	r3, 1a6e <generic_hfclk_start+0x56>
	hfclk_start();
    1a46:	f002 fd3d 	bl	44c4 <hfclk_start>
}
    1a4a:	bd10      	pop	{r4, pc}
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    1a4c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    1a50:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    1a54:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
    1a58:	f012 0f01 	tst.w	r2, #1
    1a5c:	d101      	bne.n	1a62 <generic_hfclk_start+0x4a>
	bool already_started = false;
    1a5e:	2300      	movs	r3, #0
    1a60:	e7ec      	b.n	1a3c <generic_hfclk_start+0x24>
			set_on_state(get_hf_flags());
    1a62:	f7ff ff85 	bl	1970 <get_hf_flags>
    1a66:	f002 fcc2 	bl	43ee <set_on_state>
			already_started = true;
    1a6a:	2301      	movs	r3, #1
    1a6c:	e7e6      	b.n	1a3c <generic_hfclk_start+0x24>
		clkstarted_handle(CLOCK_DEVICE,
    1a6e:	2100      	movs	r1, #0
    1a70:	4802      	ldr	r0, [pc, #8]	; (1a7c <generic_hfclk_start+0x64>)
    1a72:	f002 fccf 	bl	4414 <clkstarted_handle>
		return;
    1a76:	e7e8      	b.n	1a4a <generic_hfclk_start+0x32>
    1a78:	20000340 	.word	0x20000340
    1a7c:	00005564 	.word	0x00005564

00001a80 <generic_hfclk_stop>:
{
    1a80:	b508      	push	{r3, lr}
    1a82:	4b0a      	ldr	r3, [pc, #40]	; (1aac <generic_hfclk_stop+0x2c>)
    1a84:	f3bf 8f5b 	dmb	ish
    1a88:	e853 2f00 	ldrex	r2, [r3]
    1a8c:	f022 0102 	bic.w	r1, r2, #2
    1a90:	e843 1000 	strex	r0, r1, [r3]
    1a94:	2800      	cmp	r0, #0
    1a96:	d1f7      	bne.n	1a88 <generic_hfclk_stop+0x8>
    1a98:	f3bf 8f5b 	dmb	ish
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
    1a9c:	f012 0f01 	tst.w	r2, #1
    1aa0:	d000      	beq.n	1aa4 <generic_hfclk_stop+0x24>
}
    1aa2:	bd08      	pop	{r3, pc}
	hfclk_stop();
    1aa4:	f002 fd18 	bl	44d8 <hfclk_stop>
    1aa8:	e7fb      	b.n	1aa2 <generic_hfclk_stop+0x22>
    1aaa:	bf00      	nop
    1aac:	20000340 	.word	0x20000340

00001ab0 <api_blocking_start>:
{
    1ab0:	b500      	push	{lr}
    1ab2:	b085      	sub	sp, #20
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    1ab4:	f8cd d000 	str.w	sp, [sp]
    1ab8:	f8cd d004 	str.w	sp, [sp, #4]
    1abc:	2300      	movs	r3, #0
    1abe:	9302      	str	r3, [sp, #8]
    1ac0:	2301      	movs	r3, #1
    1ac2:	9303      	str	r3, [sp, #12]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    1ac4:	466b      	mov	r3, sp
    1ac6:	4a07      	ldr	r2, [pc, #28]	; (1ae4 <api_blocking_start+0x34>)
    1ac8:	f002 fcec 	bl	44a4 <api_start>
	if (err < 0) {
    1acc:	2800      	cmp	r0, #0
    1ace:	db05      	blt.n	1adc <api_blocking_start+0x2c>
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke3(*(uintptr_t *)&sem, parm0.split.lo, parm0.split.hi, K_SYSCALL_K_SEM_TAKE);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_take(sem, timeout);
    1ad0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    1ad4:	2300      	movs	r3, #0
    1ad6:	4668      	mov	r0, sp
    1ad8:	f001 fa9a 	bl	3010 <z_impl_k_sem_take>
}
    1adc:	b005      	add	sp, #20
    1ade:	f85d fb04 	ldr.w	pc, [sp], #4
    1ae2:	bf00      	nop
    1ae4:	000044ed 	.word	0x000044ed

00001ae8 <clk_init>:
#endif /* NRF_CLOCK_HAS_HFCLKAUDIO */
#endif
}

static int clk_init(const struct device *dev)
{
    1ae8:	b570      	push	{r4, r5, r6, lr}
    1aea:	4606      	mov	r6, r0
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    1aec:	2200      	movs	r2, #0
    1aee:	2101      	movs	r1, #1
    1af0:	4610      	mov	r0, r2
    1af2:	f7ff fbcd 	bl	1290 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);
	irq_enable(DT_INST_IRQN(0));
    1af6:	2000      	movs	r0, #0
    1af8:	f7ff fbac 	bl	1254 <arch_irq_enable>

	nrfx_err = nrfx_clock_init(clock_event_handler);
    1afc:	4811      	ldr	r0, [pc, #68]	; (1b44 <clk_init+0x5c>)
    1afe:	f000 feff 	bl	2900 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
    1b02:	4b11      	ldr	r3, [pc, #68]	; (1b48 <clk_init+0x60>)
    1b04:	4298      	cmp	r0, r3
    1b06:	d11a      	bne.n	1b3e <clk_init+0x56>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
    1b08:	f003 face 	bl	50a8 <nrfx_clock_enable>

	for (enum clock_control_nrf_type i = 0;
    1b0c:	2400      	movs	r4, #0
    1b0e:	e003      	b.n	1b18 <clk_init+0x30>
					 &transitions);
		if (err < 0) {
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    1b10:	2301      	movs	r3, #1
    1b12:	60ab      	str	r3, [r5, #8]
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
    1b14:	441c      	add	r4, r3
    1b16:	b2e4      	uxtb	r4, r4
	for (enum clock_control_nrf_type i = 0;
    1b18:	2c01      	cmp	r4, #1
    1b1a:	d80e      	bhi.n	1b3a <clk_init+0x52>
						get_sub_data(dev, i);
    1b1c:	4621      	mov	r1, r4
    1b1e:	4630      	mov	r0, r6
    1b20:	f002 fc13 	bl	434a <get_sub_data>
    1b24:	4605      	mov	r5, r0
		err = onoff_manager_init(get_onoff_manager(dev, i),
    1b26:	4621      	mov	r1, r4
    1b28:	4630      	mov	r0, r6
    1b2a:	f002 fc19 	bl	4360 <get_onoff_manager>
    1b2e:	4907      	ldr	r1, [pc, #28]	; (1b4c <clk_init+0x64>)
    1b30:	f002 f9a0 	bl	3e74 <onoff_manager_init>
		if (err < 0) {
    1b34:	2800      	cmp	r0, #0
    1b36:	daeb      	bge.n	1b10 <clk_init+0x28>
    1b38:	e000      	b.n	1b3c <clk_init+0x54>
	}

	return 0;
    1b3a:	2000      	movs	r0, #0
}
    1b3c:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
    1b3e:	f06f 0004 	mvn.w	r0, #4
    1b42:	e7fb      	b.n	1b3c <clk_init+0x54>
    1b44:	000019e5 	.word	0x000019e5
    1b48:	0bad0000 	.word	0x0bad0000
    1b4c:	00005774 	.word	0x00005774

00001b50 <lfclk_spinwait>:
{
    1b50:	b570      	push	{r4, r5, r6, lr}
    1b52:	4605      	mov	r5, r0
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
    1b54:	2801      	cmp	r0, #1
    1b56:	d107      	bne.n	1b68 <lfclk_spinwait+0x18>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    1b58:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    1b5c:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
    1b60:	f003 0303 	and.w	r3, r3, #3
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
    1b64:	2b01      	cmp	r3, #1
    1b66:	d058      	beq.n	1c1a <lfclk_spinwait+0xca>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    1b68:	f003 fae0 	bl	512c <k_is_in_isr>
    1b6c:	b928      	cbnz	r0, 1b7a <lfclk_spinwait+0x2a>
 */
static inline bool k_is_pre_kernel(void)
{
	extern bool z_sys_post_kernel; /* in init.c */

	return !z_sys_post_kernel;
    1b6e:	4b2e      	ldr	r3, [pc, #184]	; (1c28 <lfclk_spinwait+0xd8>)
    1b70:	781b      	ldrb	r3, [r3, #0]
    1b72:	2b00      	cmp	r3, #0
    1b74:	d041      	beq.n	1bfa <lfclk_spinwait+0xaa>
    1b76:	2300      	movs	r3, #0
    1b78:	e000      	b.n	1b7c <lfclk_spinwait+0x2c>
    1b7a:	2301      	movs	r3, #1
	int key = isr_mode ? irq_lock() : 0;
    1b7c:	461c      	mov	r4, r3
    1b7e:	2b00      	cmp	r3, #0
    1b80:	d03d      	beq.n	1bfe <lfclk_spinwait+0xae>
	__asm__ volatile(
    1b82:	f04f 0320 	mov.w	r3, #32
    1b86:	f3ef 8611 	mrs	r6, BASEPRI
    1b8a:	f383 8812 	msr	BASEPRI_MAX, r3
    1b8e:	f3bf 8f6f 	isb	sy
	if (!isr_mode) {
    1b92:	b924      	cbnz	r4, 1b9e <lfclk_spinwait+0x4e>
    p_reg->INTENCLR = mask;
    1b94:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    1b98:	2202      	movs	r2, #2
    1b9a:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    1b9e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    1ba2:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    1ba6:	f003 0303 	and.w	r3, r3, #3
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    1baa:	f8d2 2418 	ldr.w	r2, [r2, #1048]	; 0x418
    1bae:	f412 3f80 	tst.w	r2, #65536	; 0x10000
    1bb2:	d12b      	bne.n	1c0c <lfclk_spinwait+0xbc>
    return false;
    1bb4:	2200      	movs	r2, #0
	while (!(nrfx_clock_is_running(d, (void *)&type)
    1bb6:	b11a      	cbz	r2, 1bc0 <lfclk_spinwait+0x70>
    1bb8:	2b01      	cmp	r3, #1
    1bba:	d029      	beq.n	1c10 <lfclk_spinwait+0xc0>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
    1bbc:	2d01      	cmp	r5, #1
    1bbe:	d027      	beq.n	1c10 <lfclk_spinwait+0xc0>
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
    1bc0:	b1fc      	cbz	r4, 1c02 <lfclk_spinwait+0xb2>
 *
 * @return N/A
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
    1bc2:	4630      	mov	r0, r6
    1bc4:	f7ff fb3c 	bl	1240 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
    1bc8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    1bcc:	f8d3 3518 	ldr.w	r3, [r3, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
    1bd0:	2b00      	cmp	r3, #0
    1bd2:	d1e4      	bne.n	1b9e <lfclk_spinwait+0x4e>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    1bd4:	4b15      	ldr	r3, [pc, #84]	; (1c2c <lfclk_spinwait+0xdc>)
    1bd6:	681b      	ldr	r3, [r3, #0]
		    && nrf_clock_event_check(NRF_CLOCK,
    1bd8:	2b00      	cmp	r3, #0
    1bda:	d0e0      	beq.n	1b9e <lfclk_spinwait+0x4e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    1bdc:	4b13      	ldr	r3, [pc, #76]	; (1c2c <lfclk_spinwait+0xdc>)
    1bde:	2200      	movs	r2, #0
    1be0:	601a      	str	r2, [r3, #0]
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
    1be2:	681b      	ldr	r3, [r3, #0]
    p_reg->LFCLKSRC = (uint32_t)(source);
    1be4:	2301      	movs	r3, #1
    1be6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    1bea:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1bee:	4a10      	ldr	r2, [pc, #64]	; (1c30 <lfclk_spinwait+0xe0>)
    1bf0:	f8c2 3180 	str.w	r3, [r2, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    1bf4:	4a0f      	ldr	r2, [pc, #60]	; (1c34 <lfclk_spinwait+0xe4>)
    1bf6:	6013      	str	r3, [r2, #0]
}
    1bf8:	e7d1      	b.n	1b9e <lfclk_spinwait+0x4e>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    1bfa:	2301      	movs	r3, #1
    1bfc:	e7be      	b.n	1b7c <lfclk_spinwait+0x2c>
	int key = isr_mode ? irq_lock() : 0;
    1bfe:	2600      	movs	r6, #0
    1c00:	e7c7      	b.n	1b92 <lfclk_spinwait+0x42>
	return z_impl_k_sleep(timeout);
    1c02:	2021      	movs	r0, #33	; 0x21
    1c04:	2100      	movs	r1, #0
    1c06:	f001 fd5d 	bl	36c4 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    1c0a:	e7dd      	b.n	1bc8 <lfclk_spinwait+0x78>
                return true;
    1c0c:	2201      	movs	r2, #1
    1c0e:	e7d2      	b.n	1bb6 <lfclk_spinwait+0x66>
	if (isr_mode) {
    1c10:	b124      	cbz	r4, 1c1c <lfclk_spinwait+0xcc>
	__asm__ volatile(
    1c12:	f386 8811 	msr	BASEPRI, r6
    1c16:	f3bf 8f6f 	isb	sy
}
    1c1a:	bd70      	pop	{r4, r5, r6, pc}
    p_reg->INTENSET = mask;
    1c1c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    1c20:	2202      	movs	r2, #2
    1c22:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    1c26:	e7f8      	b.n	1c1a <lfclk_spinwait+0xca>
    1c28:	20000399 	.word	0x20000399
    1c2c:	40000104 	.word	0x40000104
    1c30:	e000e100 	.word	0xe000e100
    1c34:	40000008 	.word	0x40000008

00001c38 <z_nrf_clock_control_lf_on>:
{
    1c38:	b510      	push	{r4, lr}
    1c3a:	4604      	mov	r4, r0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    1c3c:	4b10      	ldr	r3, [pc, #64]	; (1c80 <z_nrf_clock_control_lf_on+0x48>)
    1c3e:	2101      	movs	r1, #1
    1c40:	f3bf 8f5b 	dmb	ish
    1c44:	e853 2f00 	ldrex	r2, [r3]
    1c48:	e843 1000 	strex	r0, r1, [r3]
    1c4c:	2800      	cmp	r0, #0
    1c4e:	d1f9      	bne.n	1c44 <z_nrf_clock_control_lf_on+0xc>
    1c50:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
    1c54:	b11a      	cbz	r2, 1c5e <z_nrf_clock_control_lf_on+0x26>
	switch (start_mode) {
    1c56:	1e63      	subs	r3, r4, #1
    1c58:	2b01      	cmp	r3, #1
    1c5a:	d90c      	bls.n	1c76 <z_nrf_clock_control_lf_on+0x3e>
}
    1c5c:	bd10      	pop	{r4, pc}
				get_onoff_manager(CLOCK_DEVICE,
    1c5e:	4809      	ldr	r0, [pc, #36]	; (1c84 <z_nrf_clock_control_lf_on+0x4c>)
    1c60:	f002 fb7e 	bl	4360 <get_onoff_manager>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
    1c64:	4908      	ldr	r1, [pc, #32]	; (1c88 <z_nrf_clock_control_lf_on+0x50>)
    1c66:	2300      	movs	r3, #0
    1c68:	604b      	str	r3, [r1, #4]
    1c6a:	60cb      	str	r3, [r1, #12]
    1c6c:	2301      	movs	r3, #1
    1c6e:	608b      	str	r3, [r1, #8]
		err = onoff_request(mgr, &cli);
    1c70:	f002 f91c 	bl	3eac <onoff_request>
    1c74:	e7ef      	b.n	1c56 <z_nrf_clock_control_lf_on+0x1e>
		lfclk_spinwait(start_mode);
    1c76:	4620      	mov	r0, r4
    1c78:	f7ff ff6a 	bl	1b50 <lfclk_spinwait>
		break;
    1c7c:	e7ee      	b.n	1c5c <z_nrf_clock_control_lf_on+0x24>
    1c7e:	bf00      	nop
    1c80:	20000344 	.word	0x20000344
    1c84:	00005564 	.word	0x00005564
    1c88:	200002e0 	.word	0x200002e0

00001c8c <baudrate_set>:
	return dev->data;
}

static inline const struct uarte_nrfx_config *get_dev_config(const struct device *dev)
{
	return dev->config;
    1c8c:	6843      	ldr	r3, [r0, #4]

static inline NRF_UARTE_Type *get_uarte_instance(const struct device *dev)
{
	const struct uarte_nrfx_config *config = get_dev_config(dev);

	return config->uarte_regs;
    1c8e:	681a      	ldr	r2, [r3, #0]
static int baudrate_set(const struct device *dev, uint32_t baudrate)
{
	nrf_uarte_baudrate_t nrf_baudrate; /* calculated baudrate divisor */
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);

	switch (baudrate) {
    1c90:	f5b1 4f16 	cmp.w	r1, #38400	; 0x9600
    1c94:	d06f      	beq.n	1d76 <baudrate_set+0xea>
    1c96:	d83a      	bhi.n	1d0e <baudrate_set+0x82>
    1c98:	f5b1 5f16 	cmp.w	r1, #9600	; 0x2580
    1c9c:	d06e      	beq.n	1d7c <baudrate_set+0xf0>
    1c9e:	d90a      	bls.n	1cb6 <baudrate_set+0x2a>
    1ca0:	f5b1 4fe1 	cmp.w	r1, #28800	; 0x7080
    1ca4:	d075      	beq.n	1d92 <baudrate_set+0x106>
    1ca6:	d924      	bls.n	1cf2 <baudrate_set+0x66>
    1ca8:	f647 2312 	movw	r3, #31250	; 0x7a12
    1cac:	4299      	cmp	r1, r3
    1cae:	d12b      	bne.n	1d08 <baudrate_set+0x7c>
		break;
	case 28800:
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
		break;
	case 31250:
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
    1cb0:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    1cb4:	e013      	b.n	1cde <baudrate_set+0x52>
	switch (baudrate) {
    1cb6:	f5b1 6f96 	cmp.w	r1, #1200	; 0x4b0
    1cba:	d061      	beq.n	1d80 <baudrate_set+0xf4>
    1cbc:	d907      	bls.n	1cce <baudrate_set+0x42>
    1cbe:	f5b1 6f16 	cmp.w	r1, #2400	; 0x960
    1cc2:	d063      	beq.n	1d8c <baudrate_set+0x100>
    1cc4:	f5b1 5f96 	cmp.w	r1, #4800	; 0x12c0
    1cc8:	d110      	bne.n	1cec <baudrate_set+0x60>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
    1cca:	4b3c      	ldr	r3, [pc, #240]	; (1dbc <baudrate_set+0x130>)
    1ccc:	e007      	b.n	1cde <baudrate_set+0x52>
	switch (baudrate) {
    1cce:	f5b1 7f96 	cmp.w	r1, #300	; 0x12c
    1cd2:	d058      	beq.n	1d86 <baudrate_set+0xfa>
    1cd4:	f5b1 7f16 	cmp.w	r1, #600	; 0x258
    1cd8:	d105      	bne.n	1ce6 <baudrate_set+0x5a>
		nrf_baudrate = 0x00027000;
    1cda:	f44f 331c 	mov.w	r3, #159744	; 0x27000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
    1cde:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
		return -EINVAL;
	}

	nrf_uarte_baudrate_set(uarte, nrf_baudrate);

	return 0;
    1ce2:	2000      	movs	r0, #0
    1ce4:	4770      	bx	lr
	switch (baudrate) {
    1ce6:	f06f 0015 	mvn.w	r0, #21
    1cea:	4770      	bx	lr
    1cec:	f06f 0015 	mvn.w	r0, #21
    1cf0:	4770      	bx	lr
    1cf2:	f5b1 5f61 	cmp.w	r1, #14400	; 0x3840
    1cf6:	d04e      	beq.n	1d96 <baudrate_set+0x10a>
    1cf8:	f5b1 4f96 	cmp.w	r1, #19200	; 0x4b00
    1cfc:	d101      	bne.n	1d02 <baudrate_set+0x76>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
    1cfe:	4b30      	ldr	r3, [pc, #192]	; (1dc0 <baudrate_set+0x134>)
    1d00:	e7ed      	b.n	1cde <baudrate_set+0x52>
	switch (baudrate) {
    1d02:	f06f 0015 	mvn.w	r0, #21
    1d06:	4770      	bx	lr
    1d08:	f06f 0015 	mvn.w	r0, #21
    1d0c:	4770      	bx	lr
    1d0e:	f5b1 3f61 	cmp.w	r1, #230400	; 0x38400
    1d12:	d042      	beq.n	1d9a <baudrate_set+0x10e>
    1d14:	d909      	bls.n	1d2a <baudrate_set+0x9e>
    1d16:	f5b1 2f61 	cmp.w	r1, #921600	; 0xe1000
    1d1a:	d046      	beq.n	1daa <baudrate_set+0x11e>
    1d1c:	d91f      	bls.n	1d5e <baudrate_set+0xd2>
    1d1e:	4b29      	ldr	r3, [pc, #164]	; (1dc4 <baudrate_set+0x138>)
    1d20:	4299      	cmp	r1, r3
    1d22:	d148      	bne.n	1db6 <baudrate_set+0x12a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
    1d24:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    1d28:	e7d9      	b.n	1cde <baudrate_set+0x52>
	switch (baudrate) {
    1d2a:	f5b1 3f96 	cmp.w	r1, #76800	; 0x12c00
    1d2e:	d037      	beq.n	1da0 <baudrate_set+0x114>
    1d30:	d905      	bls.n	1d3e <baudrate_set+0xb2>
    1d32:	f5b1 3fe1 	cmp.w	r1, #115200	; 0x1c200
    1d36:	d10f      	bne.n	1d58 <baudrate_set+0xcc>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
    1d38:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
    1d3c:	e7cf      	b.n	1cde <baudrate_set+0x52>
	switch (baudrate) {
    1d3e:	f64d 23c0 	movw	r3, #56000	; 0xdac0
    1d42:	4299      	cmp	r1, r3
    1d44:	d02e      	beq.n	1da4 <baudrate_set+0x118>
    1d46:	f5b1 4f61 	cmp.w	r1, #57600	; 0xe100
    1d4a:	d102      	bne.n	1d52 <baudrate_set+0xc6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
    1d4c:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
    1d50:	e7c5      	b.n	1cde <baudrate_set+0x52>
	switch (baudrate) {
    1d52:	f06f 0015 	mvn.w	r0, #21
    1d56:	4770      	bx	lr
    1d58:	f06f 0015 	mvn.w	r0, #21
    1d5c:	4770      	bx	lr
    1d5e:	4b1a      	ldr	r3, [pc, #104]	; (1dc8 <baudrate_set+0x13c>)
    1d60:	4299      	cmp	r1, r3
    1d62:	d025      	beq.n	1db0 <baudrate_set+0x124>
    1d64:	f5b1 2fe1 	cmp.w	r1, #460800	; 0x70800
    1d68:	d102      	bne.n	1d70 <baudrate_set+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
    1d6a:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
    1d6e:	e7b6      	b.n	1cde <baudrate_set+0x52>
	switch (baudrate) {
    1d70:	f06f 0015 	mvn.w	r0, #21
    1d74:	4770      	bx	lr
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
    1d76:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
    1d7a:	e7b0      	b.n	1cde <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
    1d7c:	4b13      	ldr	r3, [pc, #76]	; (1dcc <baudrate_set+0x140>)
    1d7e:	e7ae      	b.n	1cde <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
    1d80:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
    1d84:	e7ab      	b.n	1cde <baudrate_set+0x52>
	switch (baudrate) {
    1d86:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
    1d8a:	e7a8      	b.n	1cde <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
    1d8c:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
    1d90:	e7a5      	b.n	1cde <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
    1d92:	4b0f      	ldr	r3, [pc, #60]	; (1dd0 <baudrate_set+0x144>)
    1d94:	e7a3      	b.n	1cde <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
    1d96:	4b0f      	ldr	r3, [pc, #60]	; (1dd4 <baudrate_set+0x148>)
    1d98:	e7a1      	b.n	1cde <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
    1d9a:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
    1d9e:	e79e      	b.n	1cde <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
    1da0:	4b0d      	ldr	r3, [pc, #52]	; (1dd8 <baudrate_set+0x14c>)
    1da2:	e79c      	b.n	1cde <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
    1da4:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
    1da8:	e799      	b.n	1cde <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
    1daa:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
    1dae:	e796      	b.n	1cde <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
    1db0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    1db4:	e793      	b.n	1cde <baudrate_set+0x52>
	switch (baudrate) {
    1db6:	f06f 0015 	mvn.w	r0, #21
}
    1dba:	4770      	bx	lr
    1dbc:	0013b000 	.word	0x0013b000
    1dc0:	004ea000 	.word	0x004ea000
    1dc4:	000f4240 	.word	0x000f4240
    1dc8:	0003d090 	.word	0x0003d090
    1dcc:	00275000 	.word	0x00275000
    1dd0:	0075c000 	.word	0x0075c000
    1dd4:	003af000 	.word	0x003af000
    1dd8:	013a9000 	.word	0x013a9000

00001ddc <uarte_nrfx_poll_out>:
 *
 * @param dev UARTE device struct
 * @param c Character to send
 */
static void uarte_nrfx_poll_out(const struct device *dev, unsigned char c)
{
    1ddc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1de0:	4605      	mov	r5, r0
    1de2:	4688      	mov	r8, r1
	return dev->data;
    1de4:	6907      	ldr	r7, [r0, #16]
	struct uarte_nrfx_data *data = get_dev_data(dev);
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    1de6:	f003 f9a1 	bl	512c <k_is_in_isr>
    1dea:	b920      	cbnz	r0, 1df6 <uarte_nrfx_poll_out+0x1a>
	return !z_sys_post_kernel;
    1dec:	4b1d      	ldr	r3, [pc, #116]	; (1e64 <uarte_nrfx_poll_out+0x88>)
    1dee:	781b      	ldrb	r3, [r3, #0]
    1df0:	b1ab      	cbz	r3, 1e1e <uarte_nrfx_poll_out+0x42>
    1df2:	2300      	movs	r3, #0
    1df4:	e000      	b.n	1df8 <uarte_nrfx_poll_out+0x1c>
    1df6:	2301      	movs	r3, #1
	int key;

	if (isr_mode) {
    1df8:	b313      	cbz	r3, 1e40 <uarte_nrfx_poll_out+0x64>
	__asm__ volatile(
    1dfa:	f04f 0320 	mov.w	r3, #32
    1dfe:	f3ef 8411 	mrs	r4, BASEPRI
    1e02:	f383 8812 	msr	BASEPRI_MAX, r3
    1e06:	f3bf 8f6f 	isb	sy
		while (1) {
			key = irq_lock();
    1e0a:	4626      	mov	r6, r4
			if (is_tx_ready(dev)) {
    1e0c:	4628      	mov	r0, r5
    1e0e:	f002 fc83 	bl	4718 <is_tx_ready>
    1e12:	b930      	cbnz	r0, 1e22 <uarte_nrfx_poll_out+0x46>
	__asm__ volatile(
    1e14:	f384 8811 	msr	BASEPRI, r4
    1e18:	f3bf 8f6f 	isb	sy
}
    1e1c:	e7ed      	b.n	1dfa <uarte_nrfx_poll_out+0x1e>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    1e1e:	2301      	movs	r3, #1
    1e20:	e7ea      	b.n	1df8 <uarte_nrfx_poll_out+0x1c>
#if CONFIG_UART_ASYNC_API
				if (data->async && data->async->tx_size &&
    1e22:	68fb      	ldr	r3, [r7, #12]
    1e24:	b183      	cbz	r3, 1e48 <uarte_nrfx_poll_out+0x6c>
    1e26:	68da      	ldr	r2, [r3, #12]
    1e28:	b172      	cbz	r2, 1e48 <uarte_nrfx_poll_out+0x6c>
					data->async->tx_amount < 0) {
    1e2a:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
				if (data->async && data->async->tx_size &&
    1e2e:	2a00      	cmp	r2, #0
    1e30:	da0a      	bge.n	1e48 <uarte_nrfx_poll_out+0x6c>
	return dev->config;
    1e32:	686a      	ldr	r2, [r5, #4]
	return config->uarte_regs;
    1e34:	6812      	ldr	r2, [r2, #0]
    p_reg->TXD.MAXCNT = length;
}

NRF_STATIC_INLINE uint32_t nrf_uarte_tx_amount_get(NRF_UARTE_Type const * p_reg)
{
    return p_reg->TXD.AMOUNT;
    1e36:	f8d2 254c 	ldr.w	r2, [r2, #1356]	; 0x54c
					data->async->tx_amount =
    1e3a:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
    1e3e:	e003      	b.n	1e48 <uarte_nrfx_poll_out+0x6c>
			}

			irq_unlock(key);
		}
	} else {
		key = wait_tx_ready(dev);
    1e40:	4628      	mov	r0, r5
    1e42:	f002 fd6b 	bl	491c <wait_tx_ready>
    1e46:	4606      	mov	r6, r0
	}

	data->char_out = c;
    1e48:	4639      	mov	r1, r7
    1e4a:	f801 8f14 	strb.w	r8, [r1, #20]!
	tx_start(dev, &data->char_out, 1);
    1e4e:	2201      	movs	r2, #1
    1e50:	4628      	mov	r0, r5
    1e52:	f002 fc83 	bl	475c <tx_start>
	__asm__ volatile(
    1e56:	f386 8811 	msr	BASEPRI, r6
    1e5a:	f3bf 8f6f 	isb	sy

	irq_unlock(key);
}
    1e5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1e62:	bf00      	nop
    1e64:	20000399 	.word	0x20000399

00001e68 <uarte_nrfx_rx_enable>:
{
    1e68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    1e6c:	4616      	mov	r6, r2
	return dev->data;
    1e6e:	6904      	ldr	r4, [r0, #16]
	return dev->config;
    1e70:	6842      	ldr	r2, [r0, #4]
	return config->uarte_regs;
    1e72:	f8d2 8000 	ldr.w	r8, [r2]
	if (cfg->disable_rx) {
    1e76:	7a12      	ldrb	r2, [r2, #8]
    1e78:	2a00      	cmp	r2, #0
    1e7a:	d178      	bne.n	1f6e <uarte_nrfx_rx_enable+0x106>
    1e7c:	4605      	mov	r5, r0
    1e7e:	460f      	mov	r7, r1
	if (data->async->rx_enabled) {
    1e80:	68e2      	ldr	r2, [r4, #12]
    1e82:	f892 10d2 	ldrb.w	r1, [r2, #210]	; 0xd2
    1e86:	2900      	cmp	r1, #0
    1e88:	d174      	bne.n	1f74 <uarte_nrfx_rx_enable+0x10c>
	data->async->rx_timeout = timeout;
    1e8a:	67d3      	str	r3, [r2, #124]	; 0x7c
		MAX(timeout / RX_TIMEOUT_DIV,
    1e8c:	f5b3 7fe8 	cmp.w	r3, #464	; 0x1d0
    1e90:	dd06      	ble.n	1ea0 <uarte_nrfx_rx_enable+0x38>
    1e92:	4a3a      	ldr	r2, [pc, #232]	; (1f7c <uarte_nrfx_rx_enable+0x114>)
    1e94:	fb82 1203 	smull	r1, r2, r2, r3
    1e98:	17db      	asrs	r3, r3, #31
    1e9a:	ebc3 0362 	rsb	r3, r3, r2, asr #1
    1e9e:	e000      	b.n	1ea2 <uarte_nrfx_rx_enable+0x3a>
    1ea0:	235c      	movs	r3, #92	; 0x5c
	data->async->rx_timeout_slab =
    1ea2:	68e2      	ldr	r2, [r4, #12]
    1ea4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
	data->async->rx_buf = buf;
    1ea8:	68e3      	ldr	r3, [r4, #12]
    1eaa:	661f      	str	r7, [r3, #96]	; 0x60
	data->async->rx_buf_len = len;
    1eac:	68e3      	ldr	r3, [r4, #12]
    1eae:	665e      	str	r6, [r3, #100]	; 0x64
	data->async->rx_offset = 0;
    1eb0:	68e2      	ldr	r2, [r4, #12]
    1eb2:	2300      	movs	r3, #0
    1eb4:	6693      	str	r3, [r2, #104]	; 0x68
	data->async->rx_next_buf = NULL;
    1eb6:	68e2      	ldr	r2, [r4, #12]
    1eb8:	66d3      	str	r3, [r2, #108]	; 0x6c
	data->async->rx_next_buf_len = 0;
    1eba:	68e2      	ldr	r2, [r4, #12]
    1ebc:	6713      	str	r3, [r2, #112]	; 0x70
	return dev->config;
    1ebe:	686b      	ldr	r3, [r5, #4]
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
    1ec0:	685b      	ldr	r3, [r3, #4]
    1ec2:	f013 0f10 	tst.w	r3, #16
    1ec6:	d003      	beq.n	1ed0 <uarte_nrfx_rx_enable+0x68>
		if (data->async->rx_flush_cnt) {
    1ec8:	68e1      	ldr	r1, [r4, #12]
    1eca:	f891 20d1 	ldrb.w	r2, [r1, #209]	; 0xd1
    1ece:	b9da      	cbnz	r2, 1f08 <uarte_nrfx_rx_enable+0xa0>

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    1ed0:	f8c8 7534 	str.w	r7, [r8, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    1ed4:	f8c8 6538 	str.w	r6, [r8, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    1ed8:	2300      	movs	r3, #0
    1eda:	f8c8 3110 	str.w	r3, [r8, #272]	; 0x110
    1ede:	f8d8 2110 	ldr.w	r2, [r8, #272]	; 0x110
    1ee2:	f8c8 314c 	str.w	r3, [r8, #332]	; 0x14c
    1ee6:	f8d8 314c 	ldr.w	r3, [r8, #332]	; 0x14c
	data->async->rx_enabled = true;
    1eea:	68e3      	ldr	r3, [r4, #12]
    1eec:	2201      	movs	r2, #1
    1eee:	f883 20d2 	strb.w	r2, [r3, #210]	; 0xd2
	return dev->config;
    1ef2:	686b      	ldr	r3, [r5, #4]
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
    1ef4:	685b      	ldr	r3, [r3, #4]
    1ef6:	f013 0f10 	tst.w	r3, #16
    1efa:	d127      	bne.n	1f4c <uarte_nrfx_rx_enable+0xe4>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    1efc:	2301      	movs	r3, #1
    1efe:	f8c8 3000 	str.w	r3, [r8]
	return 0;
    1f02:	2000      	movs	r0, #0
}
    1f04:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			int cpy_len = MIN(len, data->async->rx_flush_cnt);
    1f08:	42b2      	cmp	r2, r6
    1f0a:	bf28      	it	cs
    1f0c:	4632      	movcs	r2, r6
    1f0e:	4691      	mov	r9, r2
			memcpy(buf, data->async->rx_flush_buffer, cpy_len);
    1f10:	31cc      	adds	r1, #204	; 0xcc
    1f12:	4638      	mov	r0, r7
    1f14:	f002 f9ac 	bl	4270 <memcpy>
			buf += cpy_len;
    1f18:	444f      	add	r7, r9
			if (!len) {
    1f1a:	ebb6 0609 	subs.w	r6, r6, r9
    1f1e:	d1d7      	bne.n	1ed0 <uarte_nrfx_rx_enable+0x68>
				data->async->rx_flush_cnt -= cpy_len;
    1f20:	68e2      	ldr	r2, [r4, #12]
    1f22:	f892 30d1 	ldrb.w	r3, [r2, #209]	; 0xd1
    1f26:	eba3 0309 	sub.w	r3, r3, r9
    1f2a:	f882 30d1 	strb.w	r3, [r2, #209]	; 0xd1
				notify_uart_rx_rdy(dev, cpy_len);
    1f2e:	4649      	mov	r1, r9
    1f30:	4628      	mov	r0, r5
    1f32:	f002 fc63 	bl	47fc <notify_uart_rx_rdy>
				notify_rx_buf_release(dev, &data->async->rx_buf,
    1f36:	68e1      	ldr	r1, [r4, #12]
    1f38:	2201      	movs	r2, #1
    1f3a:	3160      	adds	r1, #96	; 0x60
    1f3c:	4628      	mov	r0, r5
    1f3e:	f002 fc75 	bl	482c <notify_rx_buf_release>
				notify_rx_disable(dev);
    1f42:	4628      	mov	r0, r5
    1f44:	f002 fc8b 	bl	485e <notify_rx_disable>
				return 0;
    1f48:	2000      	movs	r0, #0
    1f4a:	e7db      	b.n	1f04 <uarte_nrfx_rx_enable+0x9c>
	__asm__ volatile(
    1f4c:	f04f 0320 	mov.w	r3, #32
    1f50:	f3ef 8411 	mrs	r4, BASEPRI
    1f54:	f383 8812 	msr	BASEPRI_MAX, r3
    1f58:	f3bf 8f6f 	isb	sy
		uarte_enable(dev, UARTE_LOW_POWER_RX);
    1f5c:	2102      	movs	r1, #2
    1f5e:	4628      	mov	r0, r5
    1f60:	f002 fbee 	bl	4740 <uarte_enable>
	__asm__ volatile(
    1f64:	f384 8811 	msr	BASEPRI, r4
    1f68:	f3bf 8f6f 	isb	sy
}
    1f6c:	e7c6      	b.n	1efc <uarte_nrfx_rx_enable+0x94>
		return -ENOTSUP;
    1f6e:	f06f 0085 	mvn.w	r0, #133	; 0x85
    1f72:	e7c7      	b.n	1f04 <uarte_nrfx_rx_enable+0x9c>
		return -EBUSY;
    1f74:	f06f 000f 	mvn.w	r0, #15
    1f78:	e7c4      	b.n	1f04 <uarte_nrfx_rx_enable+0x9c>
    1f7a:	bf00      	nop
    1f7c:	66666667 	.word	0x66666667

00001f80 <uarte_nrfx_tx>:
{
    1f80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1f84:	b082      	sub	sp, #8
    1f86:	4605      	mov	r5, r0
    1f88:	461f      	mov	r7, r3
	return dev->data;
    1f8a:	6904      	ldr	r4, [r0, #16]
	return dev->config;
    1f8c:	6840      	ldr	r0, [r0, #4]
	return config->uarte_regs;
    1f8e:	6803      	ldr	r3, [r0, #0]
	__asm__ volatile(
    1f90:	f04f 0020 	mov.w	r0, #32
    1f94:	f3ef 8811 	mrs	r8, BASEPRI
    1f98:	f380 8812 	msr	BASEPRI_MAX, r0
    1f9c:	f3bf 8f6f 	isb	sy
	if (data->async->tx_size) {
    1fa0:	68e0      	ldr	r0, [r4, #12]
    1fa2:	68c6      	ldr	r6, [r0, #12]
    1fa4:	b9f6      	cbnz	r6, 1fe4 <uarte_nrfx_tx+0x64>
	data->async->tx_size = len;
    1fa6:	60c2      	str	r2, [r0, #12]
	data->async->tx_buf = buf;
    1fa8:	68e0      	ldr	r0, [r4, #12]
    1faa:	6081      	str	r1, [r0, #8]
    p_reg->INTENSET = mask;
    1fac:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
    1fb0:	f8c3 0304 	str.w	r0, [r3, #772]	; 0x304

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrfx_is_in_ram(void const * p_object)
{
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
    1fb4:	f001 4360 	and.w	r3, r1, #3758096384	; 0xe0000000
	if (nrfx_is_in_ram(buf)) {
    1fb8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
    1fbc:	d119      	bne.n	1ff2 <uarte_nrfx_tx+0x72>
		data->async->xfer_buf = buf;
    1fbe:	68e3      	ldr	r3, [r4, #12]
    1fc0:	6119      	str	r1, [r3, #16]
		data->async->xfer_len = len;
    1fc2:	68e3      	ldr	r3, [r4, #12]
    1fc4:	615a      	str	r2, [r3, #20]
	start_tx_locked(dev, data);
    1fc6:	4621      	mov	r1, r4
    1fc8:	4628      	mov	r0, r5
    1fca:	f002 fbf4 	bl	47b6 <start_tx_locked>
	__asm__ volatile(
    1fce:	f388 8811 	msr	BASEPRI, r8
    1fd2:	f3bf 8f6f 	isb	sy
	if (data->uart_config.flow_ctrl == UART_CFG_FLOW_CTRL_RTS_CTS
    1fd6:	7ae3      	ldrb	r3, [r4, #11]
    1fd8:	2b01      	cmp	r3, #1
    1fda:	d011      	beq.n	2000 <uarte_nrfx_tx+0x80>
	return 0;
    1fdc:	2000      	movs	r0, #0
}
    1fde:	b002      	add	sp, #8
    1fe0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1fe4:	f388 8811 	msr	BASEPRI, r8
    1fe8:	f3bf 8f6f 	isb	sy
		return -EBUSY;
    1fec:	f06f 000f 	mvn.w	r0, #15
    1ff0:	e7f5      	b.n	1fde <uarte_nrfx_tx+0x5e>
		data->async->tx_cache_offset = 0;
    1ff2:	68e3      	ldr	r3, [r4, #12]
    1ff4:	2200      	movs	r2, #0
    1ff6:	621a      	str	r2, [r3, #32]
		(void)setup_tx_cache(data);
    1ff8:	4620      	mov	r0, r4
    1ffa:	f002 fdcf 	bl	4b9c <setup_tx_cache>
    1ffe:	e7e2      	b.n	1fc6 <uarte_nrfx_tx+0x46>
	    && timeout != SYS_FOREVER_US) {
    2000:	f1b7 3fff 	cmp.w	r7, #4294967295
    2004:	d101      	bne.n	200a <uarte_nrfx_tx+0x8a>
	return 0;
    2006:	2000      	movs	r0, #0
    2008:	e7e9      	b.n	1fde <uarte_nrfx_tx+0x5e>
		k_timer_start(&data->async->tx_timeout_timer, K_USEC(timeout),
    200a:	68e4      	ldr	r4, [r4, #12]
    200c:	3428      	adds	r4, #40	; 0x28
    200e:	ea27 73e7 	bic.w	r3, r7, r7, asr #31
    2012:	17df      	asrs	r7, r3, #31
		} else {
			return (t * to_hz + off) / from_hz;
    2014:	03f9      	lsls	r1, r7, #15
    2016:	ea41 4153 	orr.w	r1, r1, r3, lsr #17
    201a:	03d8      	lsls	r0, r3, #15
    201c:	4d0a      	ldr	r5, [pc, #40]	; (2048 <uarte_nrfx_tx+0xc8>)
    201e:	4a0b      	ldr	r2, [pc, #44]	; (204c <uarte_nrfx_tx+0xcc>)
    2020:	2300      	movs	r3, #0
    2022:	1940      	adds	r0, r0, r5
    2024:	f04f 0500 	mov.w	r5, #0
    2028:	eb45 0101 	adc.w	r1, r5, r1
    202c:	f7fe f844 	bl	b8 <__aeabi_uldivmod>
    2030:	4602      	mov	r2, r0
    2032:	460b      	mov	r3, r1
	z_impl_k_timer_start(timer, duration, period);
    2034:	2000      	movs	r0, #0
    2036:	2100      	movs	r1, #0
    2038:	e9cd 0100 	strd	r0, r1, [sp]
    203c:	4620      	mov	r0, r4
    203e:	f001 fd73 	bl	3b28 <z_impl_k_timer_start>
	return 0;
    2042:	4628      	mov	r0, r5
    2044:	e7cb      	b.n	1fde <uarte_nrfx_tx+0x5e>
    2046:	bf00      	nop
    2048:	000f423f 	.word	0x000f423f
    204c:	000f4240 	.word	0x000f4240

00002050 <rxstarted_isr>:
{
    2050:	b5f0      	push	{r4, r5, r6, r7, lr}
    2052:	b089      	sub	sp, #36	; 0x24
	return dev->data;
    2054:	6904      	ldr	r4, [r0, #16]
	struct uart_event evt = {
    2056:	2300      	movs	r3, #0
    2058:	9303      	str	r3, [sp, #12]
    205a:	9304      	str	r3, [sp, #16]
    205c:	9305      	str	r3, [sp, #20]
    205e:	9306      	str	r3, [sp, #24]
    2060:	9307      	str	r3, [sp, #28]
    2062:	2303      	movs	r3, #3
    2064:	f88d 300c 	strb.w	r3, [sp, #12]
	user_callback(dev, &evt);
    2068:	a903      	add	r1, sp, #12
    206a:	f002 fbbf 	bl	47ec <user_callback>
	if (data->async->rx_timeout != SYS_FOREVER_US) {
    206e:	68e3      	ldr	r3, [r4, #12]
    2070:	6fda      	ldr	r2, [r3, #124]	; 0x7c
    2072:	f1b2 3fff 	cmp.w	r2, #4294967295
    2076:	d101      	bne.n	207c <rxstarted_isr+0x2c>
}
    2078:	b009      	add	sp, #36	; 0x24
    207a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		data->async->rx_timeout_left = data->async->rx_timeout;
    207c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		k_timer_start(&data->async->rx_timeout_timer,
    2080:	68e3      	ldr	r3, [r4, #12]
    2082:	f103 0488 	add.w	r4, r3, #136	; 0x88
			      K_USEC(data->async->rx_timeout_slab),
    2086:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
    208a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    208e:	17df      	asrs	r7, r3, #31
    2090:	03f9      	lsls	r1, r7, #15
    2092:	ea41 4153 	orr.w	r1, r1, r3, lsr #17
    2096:	03d8      	lsls	r0, r3, #15
    2098:	4d08      	ldr	r5, [pc, #32]	; (20bc <rxstarted_isr+0x6c>)
    209a:	4a09      	ldr	r2, [pc, #36]	; (20c0 <rxstarted_isr+0x70>)
    209c:	2300      	movs	r3, #0
    209e:	1940      	adds	r0, r0, r5
    20a0:	f04f 0500 	mov.w	r5, #0
    20a4:	eb45 0101 	adc.w	r1, r5, r1
    20a8:	f7fe f806 	bl	b8 <__aeabi_uldivmod>
    20ac:	4602      	mov	r2, r0
    20ae:	460b      	mov	r3, r1
    20b0:	9000      	str	r0, [sp, #0]
    20b2:	9101      	str	r1, [sp, #4]
    20b4:	4620      	mov	r0, r4
    20b6:	f001 fd37 	bl	3b28 <z_impl_k_timer_start>
}
    20ba:	e7dd      	b.n	2078 <rxstarted_isr+0x28>
    20bc:	000f423f 	.word	0x000f423f
    20c0:	000f4240 	.word	0x000f4240

000020c4 <endtx_stoptx_ppi_init>:
#endif /* UARTE_INTERRUPT_DRIVEN */
};

static int endtx_stoptx_ppi_init(NRF_UARTE_Type *uarte,
				 struct uarte_nrfx_data *data)
{
    20c4:	b538      	push	{r3, r4, r5, lr}
    20c6:	4604      	mov	r4, r0
    20c8:	460d      	mov	r5, r1
	nrfx_err_t ret;

	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
    20ca:	f101 0016 	add.w	r0, r1, #22
    20ce:	f000 fd1f 	bl	2b10 <nrfx_ppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
    20d2:	4b0c      	ldr	r3, [pc, #48]	; (2104 <endtx_stoptx_ppi_init+0x40>)
    20d4:	4298      	cmp	r0, r3
    20d6:	d111      	bne.n	20fc <endtx_stoptx_ppi_init+0x38>
		LOG_ERR("Failed to allocate PPI Channel");
		return -EIO;
	}

	nrfx_gppi_channel_endpoints_setup(data->ppi_ch_endtx,
    20d8:	7dab      	ldrb	r3, [r5, #22]
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
    20da:	f504 7190 	add.w	r1, r4, #288	; 0x120
    return (uint32_t)p_reg + (uint32_t)task;
    20de:	340c      	adds	r4, #12
NRF_STATIC_INLINE void nrf_ppi_channel_endpoint_setup(NRF_PPI_Type *    p_reg,
                                                      nrf_ppi_channel_t channel,
                                                      uint32_t          eep,
                                                      uint32_t          tep)
{
    p_reg->CH[(uint32_t) channel].EEP = eep;
    20e0:	4a09      	ldr	r2, [pc, #36]	; (2108 <endtx_stoptx_ppi_init+0x44>)
    20e2:	33a2      	adds	r3, #162	; 0xa2
    20e4:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
    p_reg->CH[(uint32_t) channel].TEP = tep;
    20e8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    20ec:	605c      	str	r4, [r3, #4]
		nrf_uarte_event_address_get(uarte, NRF_UARTE_EVENT_ENDTX),
		nrf_uarte_task_address_get(uarte, NRF_UARTE_TASK_STOPTX));
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
    20ee:	7da9      	ldrb	r1, [r5, #22]
    20f0:	2301      	movs	r3, #1
    20f2:	408b      	lsls	r3, r1
    p_reg->CHENSET = mask;
    20f4:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504

	return 0;
    20f8:	2000      	movs	r0, #0
}
    20fa:	bd38      	pop	{r3, r4, r5, pc}
		return -EIO;
    20fc:	f06f 0004 	mvn.w	r0, #4
    2100:	e7fb      	b.n	20fa <endtx_stoptx_ppi_init+0x36>
    2102:	bf00      	nop
    2104:	0bad0000 	.word	0x0bad0000
    2108:	4001f000 	.word	0x4001f000

0000210c <uarte_nrfx_init>:
{
    210c:	b570      	push	{r4, r5, r6, lr}
	return dev->data;
    210e:	6905      	ldr	r5, [r0, #16]
	return dev->config;
    2110:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    2112:	681c      	ldr	r4, [r3, #0]
	int ret = uarte_nrfx_rx_counting_init(dev);
    2114:	f002 fb48 	bl	47a8 <uarte_nrfx_rx_counting_init>
	if (ret != 0) {
    2118:	4606      	mov	r6, r0
    211a:	bb90      	cbnz	r0, 2182 <uarte_nrfx_init+0x76>
	data->async->low_power_mask = UARTE_LOW_POWER_TX;
    211c:	68eb      	ldr	r3, [r5, #12]
    211e:	2201      	movs	r2, #1
    2120:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
    p_reg->INTENSET = mask;
    2124:	4b18      	ldr	r3, [pc, #96]	; (2188 <uarte_nrfx_init+0x7c>)
    2126:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    212a:	2308      	movs	r3, #8
    212c:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    2130:	f8d4 314c 	ldr.w	r3, [r4, #332]	; 0x14c
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXSTARTED)) {
    2134:	b1a3      	cbz	r3, 2160 <uarte_nrfx_init+0x54>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    2136:	6062      	str	r2, [r4, #4]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    2138:	f8d4 3144 	ldr.w	r3, [r4, #324]	; 0x144
		while (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXTO) &&
    213c:	b91b      	cbnz	r3, 2146 <uarte_nrfx_init+0x3a>
    213e:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
    2142:	2b00      	cmp	r3, #0
    2144:	d0f8      	beq.n	2138 <uarte_nrfx_init+0x2c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    2146:	2300      	movs	r3, #0
    2148:	f8c4 314c 	str.w	r3, [r4, #332]	; 0x14c
    214c:	f8d4 214c 	ldr.w	r2, [r4, #332]	; 0x14c
    2150:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
    2154:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
    2158:	f8c4 3144 	str.w	r3, [r4, #324]	; 0x144
    215c:	f8d4 3144 	ldr.w	r3, [r4, #324]	; 0x144
	k_timer_init(&data->async->rx_timeout_timer, rx_timeout, NULL);
    2160:	68e8      	ldr	r0, [r5, #12]
    2162:	2200      	movs	r2, #0
    2164:	4909      	ldr	r1, [pc, #36]	; (218c <uarte_nrfx_init+0x80>)
    2166:	3088      	adds	r0, #136	; 0x88
    2168:	f003 f9bd 	bl	54e6 <k_timer_init>
	k_timer_user_data_set(&data->async->rx_timeout_timer, data);
    216c:	68eb      	ldr	r3, [r5, #12]
	timer->user_data = user_data;
    216e:	f8c3 50bc 	str.w	r5, [r3, #188]	; 0xbc
	k_timer_init(&data->async->tx_timeout_timer, tx_timeout, NULL);
    2172:	68e8      	ldr	r0, [r5, #12]
    2174:	2200      	movs	r2, #0
    2176:	4906      	ldr	r1, [pc, #24]	; (2190 <uarte_nrfx_init+0x84>)
    2178:	3028      	adds	r0, #40	; 0x28
    217a:	f003 f9b4 	bl	54e6 <k_timer_init>
	k_timer_user_data_set(&data->async->tx_timeout_timer, data);
    217e:	68eb      	ldr	r3, [r5, #12]
    2180:	65dd      	str	r5, [r3, #92]	; 0x5c
}
    2182:	4630      	mov	r0, r6
    2184:	bd70      	pop	{r4, r5, r6, pc}
    2186:	bf00      	nop
    2188:	000a0210 	.word	0x000a0210
    218c:	00004afd 	.word	0x00004afd
    2190:	00004a35 	.word	0x00004a35

00002194 <set_comparator>:
	return (a - b) & COUNTER_MAX;
}

static void set_comparator(int32_t chan, uint32_t cyc)
{
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    2194:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE  void nrf_rtc_cc_set(NRF_RTC_Type * p_reg, uint32_t ch, uint32_t cc_val)
{
    p_reg->CC[ch] = cc_val;
    2198:	f500 70a8 	add.w	r0, r0, #336	; 0x150
    219c:	4b01      	ldr	r3, [pc, #4]	; (21a4 <set_comparator+0x10>)
    219e:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
}
    21a2:	4770      	bx	lr
    21a4:	40011000 	.word	0x40011000

000021a8 <get_comparator>:
}

NRF_STATIC_INLINE  uint32_t nrf_rtc_cc_get(NRF_RTC_Type const * p_reg, uint32_t ch)
{
    return p_reg->CC[ch];
    21a8:	f500 70a8 	add.w	r0, r0, #336	; 0x150
    21ac:	4b01      	ldr	r3, [pc, #4]	; (21b4 <get_comparator+0xc>)
    21ae:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]

static uint32_t get_comparator(int32_t chan)
{
	return nrf_rtc_cc_get(RTC, chan);
}
    21b2:	4770      	bx	lr
    21b4:	40011000 	.word	0x40011000

000021b8 <event_enable>:
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
}

static void event_enable(int32_t chan)
{
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    21b8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    21bc:	4083      	lsls	r3, r0
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
    21be:	4a02      	ldr	r2, [pc, #8]	; (21c8 <event_enable+0x10>)
    21c0:	f8c2 3344 	str.w	r3, [r2, #836]	; 0x344
}
    21c4:	4770      	bx	lr
    21c6:	bf00      	nop
    21c8:	40011000 	.word	0x40011000

000021cc <event_disable>:

static void event_disable(int32_t chan)
{
	nrf_rtc_event_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    21cc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    21d0:	4083      	lsls	r3, r0
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
    21d2:	4a02      	ldr	r2, [pc, #8]	; (21dc <event_disable+0x10>)
    21d4:	f8c2 3348 	str.w	r3, [r2, #840]	; 0x348
}
    21d8:	4770      	bx	lr
    21da:	bf00      	nop
    21dc:	40011000 	.word	0x40011000

000021e0 <counter>:
     return p_reg->COUNTER;
    21e0:	4b01      	ldr	r3, [pc, #4]	; (21e8 <counter+0x8>)
    21e2:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504

static uint32_t counter(void)
{
	return nrf_rtc_counter_get(RTC);
}
    21e6:	4770      	bx	lr
    21e8:	40011000 	.word	0x40011000

000021ec <compare_int_lock>:
	__ASSERT_NO_MSG(chan < CHAN_COUNT);
	return nrf_rtc_event_address_get(RTC, nrf_rtc_compare_event_get(chan));
}

static bool compare_int_lock(int32_t chan)
{
    21ec:	b510      	push	{r4, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
    21ee:	2301      	movs	r3, #1
    21f0:	4083      	lsls	r3, r0
    21f2:	43dc      	mvns	r4, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    21f4:	4a10      	ldr	r2, [pc, #64]	; (2238 <compare_int_lock+0x4c>)
    21f6:	f3bf 8f5b 	dmb	ish
    21fa:	e852 1f00 	ldrex	r1, [r2]
    21fe:	ea01 0c04 	and.w	ip, r1, r4
    2202:	e842 ce00 	strex	lr, ip, [r2]
    2206:	f1be 0f00 	cmp.w	lr, #0
    220a:	d1f6      	bne.n	21fa <compare_int_lock+0xe>
    220c:	f3bf 8f5b 	dmb	ish

	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    2210:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    2214:	fa02 f000 	lsl.w	r0, r2, r0
    p_reg->INTENCLR = mask;
    2218:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    221c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
    2220:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
  __ASM volatile ("dmb 0xF":::"memory");
    2224:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2228:	f3bf 8f6f 	isb	sy

	__DMB();
	__ISB();

	return prev & BIT(chan);
    222c:	420b      	tst	r3, r1
}
    222e:	bf14      	ite	ne
    2230:	2001      	movne	r0, #1
    2232:	2000      	moveq	r0, #0
    2234:	bd10      	pop	{r4, pc}
    2236:	bf00      	nop
    2238:	2000034c 	.word	0x2000034c

0000223c <channel_processing_check_and_clear>:
		event_enable(chan);
	}
}

static bool channel_processing_check_and_clear(int32_t chan)
{
    223c:	b570      	push	{r4, r5, r6, lr}
    223e:	4604      	mov	r4, r0
	bool result = false;

	uint32_t mcu_critical_state = full_int_lock();
    2240:	f002 fec5 	bl	4fce <full_int_lock>
    2244:	4605      	mov	r5, r0

	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
    2246:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    224a:	40a3      	lsls	r3, r4
    return p_reg->INTENSET & mask;
    224c:	4a17      	ldr	r2, [pc, #92]	; (22ac <channel_processing_check_and_clear+0x70>)
    224e:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
    2252:	4213      	tst	r3, r2
    2254:	d105      	bne.n	2262 <channel_processing_check_and_clear+0x26>
	bool result = false;
    2256:	2600      	movs	r6, #0
		if (result) {
			event_clear(chan);
		}
	}

	full_int_unlock(mcu_critical_state);
    2258:	4628      	mov	r0, r5
    225a:	f002 fec1 	bl	4fe0 <full_int_unlock>

	return result;
}
    225e:	4630      	mov	r0, r6
    2260:	bd70      	pop	{r4, r5, r6, pc}
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
    2262:	2301      	movs	r3, #1
    2264:	40a3      	lsls	r3, r4
    2266:	43db      	mvns	r3, r3
    2268:	4a11      	ldr	r2, [pc, #68]	; (22b0 <channel_processing_check_and_clear+0x74>)
    226a:	f3bf 8f5b 	dmb	ish
    226e:	e852 1f00 	ldrex	r1, [r2]
    2272:	ea01 0003 	and.w	r0, r1, r3
    2276:	e842 0600 	strex	r6, r0, [r2]
    227a:	2e00      	cmp	r6, #0
    227c:	d1f7      	bne.n	226e <channel_processing_check_and_clear+0x32>
    227e:	f3bf 8f5b 	dmb	ish
    2282:	b959      	cbnz	r1, 229c <channel_processing_check_and_clear+0x60>
			 nrf_rtc_event_check(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    2284:	f104 0350 	add.w	r3, r4, #80	; 0x50
    2288:	009b      	lsls	r3, r3, #2
    228a:	b29b      	uxth	r3, r3
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    228c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    2290:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
    2294:	681b      	ldr	r3, [r3, #0]
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
    2296:	b113      	cbz	r3, 229e <channel_processing_check_and_clear+0x62>
    2298:	2301      	movs	r3, #1
    229a:	e000      	b.n	229e <channel_processing_check_and_clear+0x62>
    229c:	2301      	movs	r3, #1
		if (result) {
    229e:	461e      	mov	r6, r3
    22a0:	2b00      	cmp	r3, #0
    22a2:	d0d9      	beq.n	2258 <channel_processing_check_and_clear+0x1c>
			event_clear(chan);
    22a4:	4620      	mov	r0, r4
    22a6:	f002 fe83 	bl	4fb0 <event_clear>
    22aa:	e7d5      	b.n	2258 <channel_processing_check_and_clear+0x1c>
    22ac:	40011000 	.word	0x40011000
    22b0:	20000348 	.word	0x20000348

000022b4 <compare_int_unlock>:
	if (key) {
    22b4:	b901      	cbnz	r1, 22b8 <compare_int_unlock+0x4>
}
    22b6:	4770      	bx	lr
		atomic_or(&int_mask, BIT(chan));
    22b8:	2301      	movs	r3, #1
    22ba:	4083      	lsls	r3, r0
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    22bc:	4a11      	ldr	r2, [pc, #68]	; (2304 <compare_int_unlock+0x50>)
    22be:	f3bf 8f5b 	dmb	ish
    22c2:	e852 1f00 	ldrex	r1, [r2]
    22c6:	4319      	orrs	r1, r3
    22c8:	e842 1c00 	strex	ip, r1, [r2]
    22cc:	f1bc 0f00 	cmp.w	ip, #0
    22d0:	d1f7      	bne.n	22c2 <compare_int_unlock+0xe>
    22d2:	f3bf 8f5b 	dmb	ish
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    22d6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    22da:	4083      	lsls	r3, r0
    p_reg->INTENSET = mask;
    22dc:	4a0a      	ldr	r2, [pc, #40]	; (2308 <compare_int_unlock+0x54>)
    22de:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    22e2:	f3bf 8f5b 	dmb	ish
    22e6:	4b09      	ldr	r3, [pc, #36]	; (230c <compare_int_unlock+0x58>)
    22e8:	681b      	ldr	r3, [r3, #0]
    22ea:	f3bf 8f5b 	dmb	ish
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
    22ee:	fa23 f000 	lsr.w	r0, r3, r0
    22f2:	f010 0f01 	tst.w	r0, #1
    22f6:	d0de      	beq.n	22b6 <compare_int_unlock+0x2>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    22f8:	4b05      	ldr	r3, [pc, #20]	; (2310 <compare_int_unlock+0x5c>)
    22fa:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    22fe:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
}
    2302:	e7d8      	b.n	22b6 <compare_int_unlock+0x2>
    2304:	2000034c 	.word	0x2000034c
    2308:	40011000 	.word	0x40011000
    230c:	20000348 	.word	0x20000348
    2310:	e000e100 	.word	0xe000e100

00002314 <sys_clock_timeout_handler>:
{
    2314:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2316:	4607      	mov	r7, r0
    2318:	4614      	mov	r4, r2
    231a:	461e      	mov	r6, r3
	uint32_t cc_value = absolute_time_to_cc(expire_time);
    231c:	4610      	mov	r0, r2
    231e:	4619      	mov	r1, r3
    2320:	f002 fe52 	bl	4fc8 <absolute_time_to_cc>
    2324:	4605      	mov	r5, r0
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    2326:	4b15      	ldr	r3, [pc, #84]	; (237c <sys_clock_timeout_handler+0x68>)
    2328:	681a      	ldr	r2, [r3, #0]
    232a:	1aa0      	subs	r0, r4, r2
	last_count += dticks * CYC_PER_TICK;
    232c:	601c      	str	r4, [r3, #0]
    232e:	605e      	str	r6, [r3, #4]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
    2330:	f5a5 1300 	sub.w	r3, r5, #2097152	; 0x200000
	if (in_anchor_range(cc_value)) {
    2334:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
    2338:	d308      	bcc.n	234c <sys_clock_timeout_handler+0x38>
	return false;
    233a:	2400      	movs	r4, #0
	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
    233c:	f001 fb28 	bl	3990 <sys_clock_announce>
	if (cc_value == get_comparator(chan)) {
    2340:	4638      	mov	r0, r7
    2342:	f7ff ff31 	bl	21a8 <get_comparator>
    2346:	42a8      	cmp	r0, r5
    2348:	d00c      	beq.n	2364 <sys_clock_timeout_handler+0x50>
}
    234a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
    234c:	4b0c      	ldr	r3, [pc, #48]	; (2380 <sys_clock_timeout_handler+0x6c>)
    234e:	6819      	ldr	r1, [r3, #0]
    2350:	0a0b      	lsrs	r3, r1, #8
    2352:	060a      	lsls	r2, r1, #24
    2354:	1952      	adds	r2, r2, r5
    2356:	f143 0300 	adc.w	r3, r3, #0
    235a:	490a      	ldr	r1, [pc, #40]	; (2384 <sys_clock_timeout_handler+0x70>)
    235c:	e9c1 2300 	strd	r2, r3, [r1]
		return true;
    2360:	2401      	movs	r4, #1
    2362:	e7eb      	b.n	233c <sys_clock_timeout_handler+0x28>
		if (!anchor_updated) {
    2364:	b11c      	cbz	r4, 236e <sys_clock_timeout_handler+0x5a>
		event_enable(chan);
    2366:	4638      	mov	r0, r7
    2368:	f7ff ff26 	bl	21b8 <event_enable>
}
    236c:	e7ed      	b.n	234a <sys_clock_timeout_handler+0x36>
			set_comparator(chan, COUNTER_HALF_SPAN);
    236e:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
    2372:	4638      	mov	r0, r7
    2374:	f7ff ff0e 	bl	2194 <set_comparator>
    2378:	e7f5      	b.n	2366 <sys_clock_timeout_handler+0x52>
    237a:	bf00      	nop
    237c:	20000128 	.word	0x20000128
    2380:	20000350 	.word	0x20000350
    2384:	20000110 	.word	0x20000110

00002388 <z_nrf_rtc_timer_read>:
{
    2388:	b538      	push	{r3, r4, r5, lr}
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
    238a:	4b0d      	ldr	r3, [pc, #52]	; (23c0 <z_nrf_rtc_timer_read+0x38>)
    238c:	681b      	ldr	r3, [r3, #0]
    238e:	0a1d      	lsrs	r5, r3, #8
    2390:	061c      	lsls	r4, r3, #24
  __ASM volatile ("dmb 0xF":::"memory");
    2392:	f3bf 8f5f 	dmb	sy
	uint32_t cntr = counter();
    2396:	f7ff ff23 	bl	21e0 <counter>
    239a:	4603      	mov	r3, r0
	val += cntr;
    239c:	1820      	adds	r0, r4, r0
    239e:	f145 0100 	adc.w	r1, r5, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
    23a2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    23a6:	d20a      	bcs.n	23be <z_nrf_rtc_timer_read+0x36>
		if (val < anchor) {
    23a8:	4b06      	ldr	r3, [pc, #24]	; (23c4 <z_nrf_rtc_timer_read+0x3c>)
    23aa:	e9d3 2300 	ldrd	r2, r3, [r3]
    23ae:	4299      	cmp	r1, r3
    23b0:	bf08      	it	eq
    23b2:	4290      	cmpeq	r0, r2
    23b4:	d203      	bcs.n	23be <z_nrf_rtc_timer_read+0x36>
			val += COUNTER_SPAN;
    23b6:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
    23ba:	f141 0100 	adc.w	r1, r1, #0
}
    23be:	bd38      	pop	{r3, r4, r5, pc}
    23c0:	20000350 	.word	0x20000350
    23c4:	20000110 	.word	0x20000110

000023c8 <compare_set_nolocks>:
{
    23c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    23cc:	4606      	mov	r6, r0
    23ce:	4614      	mov	r4, r2
    23d0:	461d      	mov	r5, r3
	uint32_t cc_value = absolute_time_to_cc(target_time);
    23d2:	4610      	mov	r0, r2
    23d4:	4619      	mov	r1, r3
    23d6:	f002 fdf7 	bl	4fc8 <absolute_time_to_cc>
    23da:	4607      	mov	r7, r0
	uint64_t curr_time = z_nrf_rtc_timer_read();
    23dc:	f7ff ffd4 	bl	2388 <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
    23e0:	42a9      	cmp	r1, r5
    23e2:	bf08      	it	eq
    23e4:	42a0      	cmpeq	r0, r4
    23e6:	d21e      	bcs.n	2426 <compare_set_nolocks+0x5e>
		if (target_time - curr_time > COUNTER_SPAN) {
    23e8:	ebb4 0800 	subs.w	r8, r4, r0
    23ec:	eb65 0901 	sbc.w	r9, r5, r1
    23f0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    23f4:	2300      	movs	r3, #0
    23f6:	454b      	cmp	r3, r9
    23f8:	bf08      	it	eq
    23fa:	4542      	cmpeq	r2, r8
    23fc:	d32e      	bcc.n	245c <compare_set_nolocks+0x94>
		if (target_time != cc_data[chan].target_time) {
    23fe:	4b19      	ldr	r3, [pc, #100]	; (2464 <compare_set_nolocks+0x9c>)
    2400:	eb03 1306 	add.w	r3, r3, r6, lsl #4
    2404:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
    2408:	42ab      	cmp	r3, r5
    240a:	bf08      	it	eq
    240c:	42a2      	cmpeq	r2, r4
    240e:	d018      	beq.n	2442 <compare_set_nolocks+0x7a>
			uint32_t cc_set = set_absolute_alarm(chan, cc_value);
    2410:	4639      	mov	r1, r7
    2412:	4630      	mov	r0, r6
    2414:	f002 fde9 	bl	4fea <set_absolute_alarm>
			target_time += counter_sub(cc_set, cc_value);
    2418:	4639      	mov	r1, r7
    241a:	f002 fdc5 	bl	4fa8 <counter_sub>
    241e:	1824      	adds	r4, r4, r0
    2420:	f145 0500 	adc.w	r5, r5, #0
    2424:	e00d      	b.n	2442 <compare_set_nolocks+0x7a>
		atomic_or(&force_isr_mask, BIT(chan));
    2426:	2301      	movs	r3, #1
    2428:	40b3      	lsls	r3, r6
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    242a:	4a0f      	ldr	r2, [pc, #60]	; (2468 <compare_set_nolocks+0xa0>)
    242c:	f3bf 8f5b 	dmb	ish
    2430:	e852 1f00 	ldrex	r1, [r2]
    2434:	4319      	orrs	r1, r3
    2436:	e842 1000 	strex	r0, r1, [r2]
    243a:	2800      	cmp	r0, #0
    243c:	d1f8      	bne.n	2430 <compare_set_nolocks+0x68>
    243e:	f3bf 8f5b 	dmb	ish
	cc_data[chan].target_time = target_time;
    2442:	4b08      	ldr	r3, [pc, #32]	; (2464 <compare_set_nolocks+0x9c>)
    2444:	0132      	lsls	r2, r6, #4
    2446:	eb03 1606 	add.w	r6, r3, r6, lsl #4
    244a:	e9c6 4502 	strd	r4, r5, [r6, #8]
	cc_data[chan].callback = handler;
    244e:	9908      	ldr	r1, [sp, #32]
    2450:	5099      	str	r1, [r3, r2]
	cc_data[chan].user_context = user_data;
    2452:	9b09      	ldr	r3, [sp, #36]	; 0x24
    2454:	6073      	str	r3, [r6, #4]
	return ret;
    2456:	2000      	movs	r0, #0
}
    2458:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			return -EINVAL;
    245c:	f06f 0015 	mvn.w	r0, #21
    2460:	e7fa      	b.n	2458 <compare_set_nolocks+0x90>
    2462:	bf00      	nop
    2464:	20000118 	.word	0x20000118
    2468:	20000348 	.word	0x20000348

0000246c <sys_clock_driver_init>:
{
	return (uint32_t)z_nrf_rtc_timer_read();
}

static int sys_clock_driver_init(const struct device *dev)
{
    246c:	b530      	push	{r4, r5, lr}
    246e:	b083      	sub	sp, #12
    p_reg->PRESCALER = val;
    2470:	2300      	movs	r3, #0
    2472:	4a1e      	ldr	r2, [pc, #120]	; (24ec <sys_clock_driver_init+0x80>)
    2474:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			CLOCK_CONTROL_NRF_LF_START_AVAILABLE :
			CLOCK_CONTROL_NRF_LF_START_STABLE);

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    2478:	2b00      	cmp	r3, #0
    247a:	dd25      	ble.n	24c8 <sys_clock_driver_init+0x5c>
    p_reg->INTENSET = mask;
    247c:	4c1b      	ldr	r4, [pc, #108]	; (24ec <sys_clock_driver_init+0x80>)
    247e:	2502      	movs	r5, #2
    2480:	f8c4 5304 	str.w	r5, [r4, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2484:	4b1a      	ldr	r3, [pc, #104]	; (24f0 <sys_clock_driver_init+0x84>)
    2486:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    248a:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
    248e:	2200      	movs	r2, #0
    2490:	2101      	movs	r1, #1
    2492:	2011      	movs	r0, #17
    2494:	f7fe fefc 	bl	1290 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
    2498:	2011      	movs	r0, #17
    249a:	f7fe fedb 	bl	1254 <arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    249e:	2301      	movs	r3, #1
    24a0:	4a14      	ldr	r2, [pc, #80]	; (24f4 <sys_clock_driver_init+0x88>)
    24a2:	6013      	str	r3, [r2, #0]
    24a4:	6023      	str	r3, [r4, #0]

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
    24a6:	4a14      	ldr	r2, [pc, #80]	; (24f8 <sys_clock_driver_init+0x8c>)
    24a8:	6013      	str	r3, [r2, #0]

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		(COUNTER_HALF_SPAN - 1) :
		(counter() + CYC_PER_TICK);

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
    24aa:	2400      	movs	r4, #0
    24ac:	9401      	str	r4, [sp, #4]
    24ae:	4b13      	ldr	r3, [pc, #76]	; (24fc <sys_clock_driver_init+0x90>)
    24b0:	9300      	str	r3, [sp, #0]
    24b2:	4a13      	ldr	r2, [pc, #76]	; (2500 <sys_clock_driver_init+0x94>)
    24b4:	2300      	movs	r3, #0
    24b6:	4620      	mov	r0, r4
    24b8:	f002 fdd2 	bl	5060 <compare_set>

	z_nrf_clock_control_lf_on(mode);
    24bc:	4628      	mov	r0, r5
    24be:	f7ff fbbb 	bl	1c38 <z_nrf_clock_control_lf_on>

	return 0;
}
    24c2:	4620      	mov	r0, r4
    24c4:	b003      	add	sp, #12
    24c6:	bd30      	pop	{r4, r5, pc}
		cc_data[chan].target_time = TARGET_TIME_INVALID;
    24c8:	4a0e      	ldr	r2, [pc, #56]	; (2504 <sys_clock_driver_init+0x98>)
    24ca:	eb02 1203 	add.w	r2, r2, r3, lsl #4
    24ce:	f04f 30ff 	mov.w	r0, #4294967295
    24d2:	f04f 31ff 	mov.w	r1, #4294967295
    24d6:	e9c2 0102 	strd	r0, r1, [r2, #8]
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    24da:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    24de:	409a      	lsls	r2, r3
    p_reg->INTENSET = mask;
    24e0:	4902      	ldr	r1, [pc, #8]	; (24ec <sys_clock_driver_init+0x80>)
    24e2:	f8c1 2304 	str.w	r2, [r1, #772]	; 0x304
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    24e6:	3301      	adds	r3, #1
    24e8:	e7c6      	b.n	2478 <sys_clock_driver_init+0xc>
    24ea:	bf00      	nop
    24ec:	40011000 	.word	0x40011000
    24f0:	e000e100 	.word	0xe000e100
    24f4:	40011008 	.word	0x40011008
    24f8:	2000034c 	.word	0x2000034c
    24fc:	00002315 	.word	0x00002315
    2500:	007fffff 	.word	0x007fffff
    2504:	20000118 	.word	0x20000118

00002508 <process_channel>:
{
    2508:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    250c:	b082      	sub	sp, #8
    250e:	4604      	mov	r4, r0
	if (channel_processing_check_and_clear(chan)) {
    2510:	f7ff fe94 	bl	223c <channel_processing_check_and_clear>
    2514:	b910      	cbnz	r0, 251c <process_channel+0x14>
}
    2516:	b002      	add	sp, #8
    2518:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		curr_time = z_nrf_rtc_timer_read();
    251c:	f7ff ff34 	bl	2388 <z_nrf_rtc_timer_read>
    2520:	4606      	mov	r6, r0
    2522:	460f      	mov	r7, r1
		mcu_critical_state = full_int_lock();
    2524:	f002 fd53 	bl	4fce <full_int_lock>
    2528:	4682      	mov	sl, r0
		expire_time = cc_data[chan].target_time;
    252a:	4b13      	ldr	r3, [pc, #76]	; (2578 <process_channel+0x70>)
    252c:	eb03 1304 	add.w	r3, r3, r4, lsl #4
    2530:	e9d3 8902 	ldrd	r8, r9, [r3, #8]
		if (curr_time >= expire_time) {
    2534:	454f      	cmp	r7, r9
    2536:	bf08      	it	eq
    2538:	4546      	cmpeq	r6, r8
    253a:	d20b      	bcs.n	2554 <process_channel+0x4c>
		z_nrf_rtc_timer_compare_handler_t handler = NULL;
    253c:	2600      	movs	r6, #0
		full_int_unlock(mcu_critical_state);
    253e:	4650      	mov	r0, sl
    2540:	f002 fd4e 	bl	4fe0 <full_int_unlock>
		if (handler) {
    2544:	2e00      	cmp	r6, #0
    2546:	d0e6      	beq.n	2516 <process_channel+0xe>
			handler(chan, expire_time, user_context);
    2548:	9500      	str	r5, [sp, #0]
    254a:	4642      	mov	r2, r8
    254c:	464b      	mov	r3, r9
    254e:	4620      	mov	r0, r4
    2550:	47b0      	blx	r6
}
    2552:	e7e0      	b.n	2516 <process_channel+0xe>
			handler = cc_data[chan].callback;
    2554:	4a08      	ldr	r2, [pc, #32]	; (2578 <process_channel+0x70>)
    2556:	0123      	lsls	r3, r4, #4
    2558:	eb02 1104 	add.w	r1, r2, r4, lsl #4
    255c:	58d6      	ldr	r6, [r2, r3]
			user_context = cc_data[chan].user_context;
    255e:	684d      	ldr	r5, [r1, #4]
			cc_data[chan].callback = NULL;
    2560:	2000      	movs	r0, #0
    2562:	50d0      	str	r0, [r2, r3]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    2564:	f04f 32ff 	mov.w	r2, #4294967295
    2568:	f04f 33ff 	mov.w	r3, #4294967295
    256c:	e9c1 2302 	strd	r2, r3, [r1, #8]
			event_disable(chan);
    2570:	4620      	mov	r0, r4
    2572:	f7ff fe2b 	bl	21cc <event_disable>
    2576:	e7e2      	b.n	253e <process_channel+0x36>
    2578:	20000118 	.word	0x20000118

0000257c <rtc_nrf_isr>:
{
    257c:	b510      	push	{r4, lr}
    return p_reg->INTENSET & mask;
    257e:	4b0d      	ldr	r3, [pc, #52]	; (25b4 <rtc_nrf_isr+0x38>)
    2580:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
    2584:	f013 0f02 	tst.w	r3, #2
    2588:	d00a      	beq.n	25a0 <rtc_nrf_isr+0x24>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    258a:	4b0b      	ldr	r3, [pc, #44]	; (25b8 <rtc_nrf_isr+0x3c>)
    258c:	681b      	ldr	r3, [r3, #0]
    258e:	b13b      	cbz	r3, 25a0 <rtc_nrf_isr+0x24>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    2590:	4b09      	ldr	r3, [pc, #36]	; (25b8 <rtc_nrf_isr+0x3c>)
    2592:	2200      	movs	r2, #0
    2594:	601a      	str	r2, [r3, #0]
    2596:	681b      	ldr	r3, [r3, #0]
		overflow_cnt++;
    2598:	4a08      	ldr	r2, [pc, #32]	; (25bc <rtc_nrf_isr+0x40>)
    259a:	6813      	ldr	r3, [r2, #0]
    259c:	3301      	adds	r3, #1
    259e:	6013      	str	r3, [r2, #0]
{
    25a0:	2400      	movs	r4, #0
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    25a2:	2c00      	cmp	r4, #0
    25a4:	dd00      	ble.n	25a8 <rtc_nrf_isr+0x2c>
}
    25a6:	bd10      	pop	{r4, pc}
		process_channel(chan);
    25a8:	4620      	mov	r0, r4
    25aa:	f7ff ffad 	bl	2508 <process_channel>
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    25ae:	3401      	adds	r4, #1
    25b0:	e7f7      	b.n	25a2 <rtc_nrf_isr+0x26>
    25b2:	bf00      	nop
    25b4:	40011000 	.word	0x40011000
    25b8:	40011104 	.word	0x40011104
    25bc:	20000350 	.word	0x20000350

000025c0 <sys_clock_set_timeout>:
{
    25c0:	b510      	push	{r4, lr}
    25c2:	b082      	sub	sp, #8
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    25c4:	f1b0 3fff 	cmp.w	r0, #4294967295
    25c8:	d007      	beq.n	25da <sys_clock_set_timeout+0x1a>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    25ca:	1e44      	subs	r4, r0, #1
    25cc:	2c00      	cmp	r4, #0
    25ce:	dd07      	ble.n	25e0 <sys_clock_set_timeout+0x20>
    25d0:	4b11      	ldr	r3, [pc, #68]	; (2618 <sys_clock_set_timeout+0x58>)
    25d2:	429c      	cmp	r4, r3
    25d4:	dd05      	ble.n	25e2 <sys_clock_set_timeout+0x22>
    25d6:	4c11      	ldr	r4, [pc, #68]	; (261c <sys_clock_set_timeout+0x5c>)
    25d8:	e003      	b.n	25e2 <sys_clock_set_timeout+0x22>
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    25da:	f500 0000 	add.w	r0, r0, #8388608	; 0x800000
    25de:	e7f4      	b.n	25ca <sys_clock_set_timeout+0xa>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    25e0:	2400      	movs	r4, #0
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
    25e2:	f7ff fed1 	bl	2388 <z_nrf_rtc_timer_read>
    25e6:	4b0e      	ldr	r3, [pc, #56]	; (2620 <sys_clock_set_timeout+0x60>)
    25e8:	e9d3 2300 	ldrd	r2, r3, [r3]
    25ec:	1a80      	subs	r0, r0, r2
	if (unannounced >= COUNTER_HALF_SPAN) {
    25ee:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    25f2:	d300      	bcc.n	25f6 <sys_clock_set_timeout+0x36>
		ticks = 0;
    25f4:	2400      	movs	r4, #0
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
    25f6:	4404      	add	r4, r0
    25f8:	3401      	adds	r4, #1
	if (cyc > MAX_CYCLES) {
    25fa:	f5b4 0f00 	cmp.w	r4, #8388608	; 0x800000
    25fe:	d300      	bcc.n	2602 <sys_clock_set_timeout+0x42>
		cyc = MAX_CYCLES;
    2600:	4c06      	ldr	r4, [pc, #24]	; (261c <sys_clock_set_timeout+0x5c>)
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
    2602:	2000      	movs	r0, #0
    2604:	9001      	str	r0, [sp, #4]
    2606:	4907      	ldr	r1, [pc, #28]	; (2624 <sys_clock_set_timeout+0x64>)
    2608:	9100      	str	r1, [sp, #0]
    260a:	1912      	adds	r2, r2, r4
    260c:	f143 0300 	adc.w	r3, r3, #0
    2610:	f002 fd26 	bl	5060 <compare_set>
}
    2614:	b002      	add	sp, #8
    2616:	bd10      	pop	{r4, pc}
    2618:	007ffffe 	.word	0x007ffffe
    261c:	007fffff 	.word	0x007fffff
    2620:	20000128 	.word	0x20000128
    2624:	00002315 	.word	0x00002315

00002628 <sys_clock_elapsed>:
{
    2628:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
    262a:	f7ff fead 	bl	2388 <z_nrf_rtc_timer_read>
    262e:	4b02      	ldr	r3, [pc, #8]	; (2638 <sys_clock_elapsed+0x10>)
    2630:	681b      	ldr	r3, [r3, #0]
}
    2632:	1ac0      	subs	r0, r0, r3
    2634:	bd08      	pop	{r3, pc}
    2636:	bf00      	nop
    2638:	20000128 	.word	0x20000128

0000263c <nrf52_errata_31>:
                var2 = *(uint32_t *)0x10000134ul;
            }
        #elif defined (NRF52805_XXAA) || defined (DEVELOP_IN_NRF52805)\
         || defined (NRF52810_XXAA) || defined (DEVELOP_IN_NRF52810)\
         || defined (NRF52811_XXAA) || defined (DEVELOP_IN_NRF52811)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    263c:	4b03      	ldr	r3, [pc, #12]	; (264c <nrf52_errata_31+0x10>)
    263e:	681b      	ldr	r3, [r3, #0]
                        return true;
                }
            }
        #endif
        #if defined (NRF52811_XXAA) || defined (DEVELOP_IN_NRF52811)
            if (var1 == 0x0E)
    2640:	2b0e      	cmp	r3, #14
    2642:	d001      	beq.n	2648 <nrf52_errata_31+0xc>
                    default:
                        return true;
                }
            }
        #endif
        return false;
    2644:	2000      	movs	r0, #0
    2646:	4770      	bx	lr
                        return true;
    2648:	2001      	movs	r0, #1
    #endif
}
    264a:	4770      	bx	lr
    264c:	10000130 	.word	0x10000130

00002650 <nrf52_errata_36>:
         || defined (NRF52810_XXAA) || defined (DEVELOP_IN_NRF52810)\
         || defined (NRF52811_XXAA) || defined (DEVELOP_IN_NRF52811)\
         || defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    2650:	4b03      	ldr	r3, [pc, #12]	; (2660 <nrf52_errata_36+0x10>)
    2652:	681b      	ldr	r3, [r3, #0]
                        return true;
                }
            }
        #endif
        #if defined (NRF52811_XXAA) || defined (DEVELOP_IN_NRF52811)
            if (var1 == 0x0E)
    2654:	2b0e      	cmp	r3, #14
    2656:	d001      	beq.n	265c <nrf52_errata_36+0xc>
                    default:
                        return true;
                }
            }
        #endif
        return false;
    2658:	2000      	movs	r0, #0
    265a:	4770      	bx	lr
                        return true;
    265c:	2001      	movs	r0, #1
    #endif
}
    265e:	4770      	bx	lr
    2660:	10000130 	.word	0x10000130

00002664 <nrf52_errata_66>:
         || defined (NRF52810_XXAA) || defined (DEVELOP_IN_NRF52810)\
         || defined (NRF52811_XXAA) || defined (DEVELOP_IN_NRF52811)\
         || defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    2664:	4b03      	ldr	r3, [pc, #12]	; (2674 <nrf52_errata_66+0x10>)
    2666:	681b      	ldr	r3, [r3, #0]
                        return true;
                }
            }
        #endif
        #if defined (NRF52811_XXAA) || defined (DEVELOP_IN_NRF52811)
            if (var1 == 0x0E)
    2668:	2b0e      	cmp	r3, #14
    266a:	d001      	beq.n	2670 <nrf52_errata_66+0xc>
                    default:
                        return true;
                }
            }
        #endif
        return false;
    266c:	2000      	movs	r0, #0
    266e:	4770      	bx	lr
                        return true;
    2670:	2001      	movs	r0, #1
    #endif
}
    2672:	4770      	bx	lr
    2674:	10000130 	.word	0x10000130

00002678 <nrf52_errata_136>:
         || defined (NRF52810_XXAA) || defined (DEVELOP_IN_NRF52810)\
         || defined (NRF52811_XXAA) || defined (DEVELOP_IN_NRF52811)\
         || defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    2678:	4b03      	ldr	r3, [pc, #12]	; (2688 <nrf52_errata_136+0x10>)
    267a:	681b      	ldr	r3, [r3, #0]
                        return true;
                }
            }
        #endif
        #if defined (NRF52811_XXAA) || defined (DEVELOP_IN_NRF52811)
            if (var1 == 0x0E)
    267c:	2b0e      	cmp	r3, #14
    267e:	d001      	beq.n	2684 <nrf52_errata_136+0xc>
                    default:
                        return true;
                }
            }
        #endif
        return false;
    2680:	2000      	movs	r0, #0
    2682:	4770      	bx	lr
                        return true;
    2684:	2001      	movs	r0, #1
    #endif
}
    2686:	4770      	bx	lr
    2688:	10000130 	.word	0x10000130

0000268c <nrf52_errata_217>:
        return false;
    #else
        #if defined (NRF52805_XXAA) || defined (DEVELOP_IN_NRF52805)\
         || defined (NRF52810_XXAA) || defined (DEVELOP_IN_NRF52810)\
         || defined (NRF52811_XXAA) || defined (DEVELOP_IN_NRF52811)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    268c:	4b03      	ldr	r3, [pc, #12]	; (269c <nrf52_errata_217+0x10>)
    268e:	681b      	ldr	r3, [r3, #0]
                        return false;
                }
            }
        #endif
        #if defined (NRF52811_XXAA) || defined (DEVELOP_IN_NRF52811)
            if (var1 == 0x0E)
    2690:	2b0e      	cmp	r3, #14
    2692:	d001      	beq.n	2698 <nrf52_errata_217+0xc>
                    default:
                        return true;
                }
            }
        #endif
        return false;
    2694:	2000      	movs	r0, #0
    2696:	4770      	bx	lr
                        return true;
    2698:	2001      	movs	r0, #1
    #endif
}
    269a:	4770      	bx	lr
    269c:	10000130 	.word	0x10000130

000026a0 <nrf52_configuration_249>:
         || defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    26a0:	4b06      	ldr	r3, [pc, #24]	; (26bc <nrf52_configuration_249+0x1c>)
    26a2:	681b      	ldr	r3, [r3, #0]
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    26a4:	4a06      	ldr	r2, [pc, #24]	; (26c0 <nrf52_configuration_249+0x20>)
    26a6:	6812      	ldr	r2, [r2, #0]
                        return true;
                }
            }
        #endif
        #if defined (NRF52811_XXAA) || defined (DEVELOP_IN_NRF52811)
            if (var1 == 0x0E)
    26a8:	2b0e      	cmp	r3, #14
    26aa:	d001      	beq.n	26b0 <nrf52_configuration_249+0x10>
                    default:
                        return true;
                }
            }
        #endif
        return false;
    26ac:	2000      	movs	r0, #0
    26ae:	4770      	bx	lr
                switch(var2)
    26b0:	b10a      	cbz	r2, 26b6 <nrf52_configuration_249+0x16>
                        return true;
    26b2:	2001      	movs	r0, #1
    #endif
}
    26b4:	4770      	bx	lr
                switch(var2)
    26b6:	2000      	movs	r0, #0
    26b8:	4770      	bx	lr
    26ba:	bf00      	nop
    26bc:	10000130 	.word	0x10000130
    26c0:	10000134 	.word	0x10000134

000026c4 <nvmc_wait>:

/* -- NVMC utility functions -- */
/* Waits until NVMC is done with the current pending action */
void nvmc_wait(void)
{
    while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    26c4:	4b02      	ldr	r3, [pc, #8]	; (26d0 <nvmc_wait+0xc>)
    26c6:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    26ca:	2b00      	cmp	r3, #0
    26cc:	d0fa      	beq.n	26c4 <nvmc_wait>
}
    26ce:	4770      	bx	lr
    26d0:	4001e000 	.word	0x4001e000

000026d4 <nvmc_config>:

/*  Configure the NVMC to "mode".
    Mode must be an enumerator of field NVMC_CONFIG_WEN */
void nvmc_config(uint32_t mode)
{
    26d4:	b508      	push	{r3, lr}
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    26d6:	4b03      	ldr	r3, [pc, #12]	; (26e4 <nvmc_config+0x10>)
    26d8:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
    nvmc_wait();
    26dc:	f7ff fff2 	bl	26c4 <nvmc_wait>
}
    26e0:	bd08      	pop	{r3, pc}
    26e2:	bf00      	nop
    26e4:	4001e000 	.word	0x4001e000

000026e8 <SystemCoreClockUpdate>:

void SystemCoreClockUpdate(void)
{
    SystemCoreClock = __SYSTEM_CLOCK_64M;
    26e8:	4b01      	ldr	r3, [pc, #4]	; (26f0 <SystemCoreClockUpdate+0x8>)
    26ea:	4a02      	ldr	r2, [pc, #8]	; (26f4 <SystemCoreClockUpdate+0xc>)
    26ec:	601a      	str	r2, [r3, #0]
}
    26ee:	4770      	bx	lr
    26f0:	2000001c 	.word	0x2000001c
    26f4:	03d09000 	.word	0x03d09000

000026f8 <SystemInit>:

void SystemInit(void)
{
    26f8:	b538      	push	{r3, r4, r5, lr}
    #endif

    #if NRF52_ERRATA_31_ENABLE_WORKAROUND
        /* Workaround for Errata 31 "CLOCK: Calibration values are not correctly loaded from FICR at reset" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp */
        if (nrf52_errata_31()){
    26fa:	f7ff ff9f 	bl	263c <nrf52_errata_31>
    26fe:	b128      	cbz	r0, 270c <SystemInit+0x14>
            *(volatile uint32_t *)0x4000053C = ((*(volatile uint32_t *)0x10000244) & 0x0000E000) >> 13;
    2700:	4b67      	ldr	r3, [pc, #412]	; (28a0 <SystemInit+0x1a8>)
    2702:	681b      	ldr	r3, [r3, #0]
    2704:	f3c3 3342 	ubfx	r3, r3, #13, #3
    2708:	4a66      	ldr	r2, [pc, #408]	; (28a4 <SystemInit+0x1ac>)
    270a:	6013      	str	r3, [r2, #0]
    #endif

    #if NRF52_ERRATA_36_ENABLE_WORKAROUND
        /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_36()){
    270c:	f7ff ffa0 	bl	2650 <nrf52_errata_36>
    2710:	b140      	cbz	r0, 2724 <SystemInit+0x2c>
            NRF_CLOCK->EVENTS_DONE = 0;
    2712:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2716:	2200      	movs	r2, #0
    2718:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
    271c:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
    2720:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    #endif

    #if NRF52_ERRATA_66_ENABLE_WORKAROUND
        /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_66()){
    2724:	f7ff ff9e 	bl	2664 <nrf52_errata_66>
    2728:	2800      	cmp	r0, #0
    272a:	d046      	beq.n	27ba <SystemInit+0xc2>
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
    272c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    2730:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
    2734:	4b5c      	ldr	r3, [pc, #368]	; (28a8 <SystemInit+0x1b0>)
    2736:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
            NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
    273a:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
    273e:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
            NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
    2742:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
    2746:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
            NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
    274a:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
    274e:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
            NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
    2752:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
    2756:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
            NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
    275a:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
    275e:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
            NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
    2762:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
    2766:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
            NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
    276a:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
    276e:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
            NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
    2772:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
    2776:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
            NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
    277a:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
    277e:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
            NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
    2782:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
    2786:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
            NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
    278a:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
    278e:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
            NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
    2792:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
    2796:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
            NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
    279a:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
    279e:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
            NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
    27a2:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
    27a6:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
            NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
    27aa:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
    27ae:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
            NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
    27b2:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
    27b6:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    #endif

    #if NRF52_ERRATA_136_ENABLE_WORKAROUND
        /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_136()){
    27ba:	f7ff ff5d 	bl	2678 <nrf52_errata_136>
    27be:	b160      	cbz	r0, 27da <SystemInit+0xe2>
            if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
    27c0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    27c4:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    27c8:	f013 0f01 	tst.w	r3, #1
    27cc:	d005      	beq.n	27da <SystemInit+0xe2>
                NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
    27ce:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    27d2:	f06f 0201 	mvn.w	r2, #1
    27d6:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    #endif

    #if NRF52_ERRATA_217_ENABLE_WORKAROUND
        /* Workaround for Errata 217 "RAM: RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_217()){
    27da:	f7ff ff57 	bl	268c <nrf52_errata_217>
    27de:	b120      	cbz	r0, 27ea <SystemInit+0xf2>
            *(volatile uint32_t *)0x40000EE4ul |= 0x0000000Ful;
    27e0:	4a32      	ldr	r2, [pc, #200]	; (28ac <SystemInit+0x1b4>)
    27e2:	6813      	ldr	r3, [r2, #0]
    27e4:	f043 030f 	orr.w	r3, r3, #15
    27e8:	6013      	str	r3, [r2, #0]
            {
                /* Prevent processor from unlocking APPROTECT soft branch after this point. */
                NRF_APPROTECT->FORCEPROTECT = APPROTECT_FORCEPROTECT_FORCEPROTECT_Force;
            }
        #else
            if (nrf52_configuration_249())
    27ea:	f7ff ff59 	bl	26a0 <nrf52_configuration_249>
    27ee:	b138      	cbz	r0, 2800 <SystemInit+0x108>
            {
                /* Load APPROTECT soft branch from UICR.
                   If UICR->APPROTECT is disabled, POWER->APPROTECT will be disabled. */
                NRF_APPROTECT->DISABLE = NRF_UICR->APPROTECT;
    27f0:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    27f4:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
    27f8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    27fc:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558
    #endif

    nrf52_handle_approtect();

    #if NRF52_CONFIGURATION_249_ENABLE && (defined(NRF52805_XXAA) || defined(NRF52810_XXAA) || defined(NRF52811_XXAA))
        if (nrf52_configuration_249() && (NRF_UICR->NRFMDK[0] == 0xFFFFFFFF || NRF_UICR->NRFMDK[1] == 0xFFFFFFFF))
    2800:	f7ff ff4e 	bl	26a0 <nrf52_configuration_249>
    2804:	b168      	cbz	r0, 2822 <SystemInit+0x12a>
    2806:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    280a:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    280e:	f1b3 3fff 	cmp.w	r3, #4294967295
    2812:	d015      	beq.n	2840 <SystemInit+0x148>
    2814:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    2818:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
    281c:	f1b3 3fff 	cmp.w	r3, #4294967295
    2820:	d00e      	beq.n	2840 <SystemInit+0x148>

    /* Configure GPIO pads as pPin Reset pin if Pin Reset capabilities desired. If CONFIG_GPIO_AS_PINRESET is not
      defined, pin reset will not be available. One GPIO (see Product Specification to see which one) will then be
      reserved for PinReset and not available as normal GPIO. */
    #if defined (CONFIG_GPIO_AS_PINRESET)
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    2822:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    2826:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    282a:	2b00      	cmp	r3, #0
    282c:	db1a      	blt.n	2864 <SystemInit+0x16c>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
    282e:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    2832:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    2836:	2b00      	cmp	r3, #0
    2838:	db14      	blt.n	2864 <SystemInit+0x16c>
            nvmc_config(NVMC_CONFIG_WEN_Ren);
            NVIC_SystemReset();
        }
    #endif

    SystemCoreClockUpdate();
    283a:	f7ff ff55 	bl	26e8 <SystemCoreClockUpdate>
}
    283e:	bd38      	pop	{r3, r4, r5, pc}
            nvmc_config(NVMC_CONFIG_WEN_Wen);
    2840:	2001      	movs	r0, #1
    2842:	f7ff ff47 	bl	26d4 <nvmc_config>
            NRF_UICR->NRFMDK[0] = 0;
    2846:	f04f 2510 	mov.w	r5, #268439552	; 0x10001000
    284a:	2400      	movs	r4, #0
    284c:	f8c5 4100 	str.w	r4, [r5, #256]	; 0x100
            nvmc_wait();
    2850:	f7ff ff38 	bl	26c4 <nvmc_wait>
            NRF_UICR->NRFMDK[1] = 0;
    2854:	f8c5 4104 	str.w	r4, [r5, #260]	; 0x104
            nvmc_wait();
    2858:	f7ff ff34 	bl	26c4 <nvmc_wait>
            nvmc_config(NVMC_CONFIG_WEN_Ren);
    285c:	4620      	mov	r0, r4
    285e:	f7ff ff39 	bl	26d4 <nvmc_config>
    2862:	e7de      	b.n	2822 <SystemInit+0x12a>
            nvmc_config(NVMC_CONFIG_WEN_Wen);
    2864:	2001      	movs	r0, #1
    2866:	f7ff ff35 	bl	26d4 <nvmc_config>
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    286a:	f04f 2410 	mov.w	r4, #268439552	; 0x10001000
    286e:	2515      	movs	r5, #21
    2870:	f8c4 5200 	str.w	r5, [r4, #512]	; 0x200
            nvmc_wait();
    2874:	f7ff ff26 	bl	26c4 <nvmc_wait>
            NRF_UICR->PSELRESET[1] = RESET_PIN;
    2878:	f8c4 5204 	str.w	r5, [r4, #516]	; 0x204
            nvmc_wait();
    287c:	f7ff ff22 	bl	26c4 <nvmc_wait>
            nvmc_config(NVMC_CONFIG_WEN_Ren);
    2880:	2000      	movs	r0, #0
    2882:	f7ff ff27 	bl	26d4 <nvmc_config>
  __ASM volatile ("dsb 0xF":::"memory");
    2886:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    288a:	4909      	ldr	r1, [pc, #36]	; (28b0 <SystemInit+0x1b8>)
    288c:	68ca      	ldr	r2, [r1, #12]
    288e:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    2892:	4b08      	ldr	r3, [pc, #32]	; (28b4 <SystemInit+0x1bc>)
    2894:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    2896:	60cb      	str	r3, [r1, #12]
    2898:	f3bf 8f4f 	dsb	sy
    __NOP();
    289c:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    289e:	e7fd      	b.n	289c <SystemInit+0x1a4>
    28a0:	10000244 	.word	0x10000244
    28a4:	4000053c 	.word	0x4000053c
    28a8:	4000c000 	.word	0x4000c000
    28ac:	40000ee4 	.word	0x40000ee4
    28b0:	e000ed00 	.word	0xe000ed00
    28b4:	05fa0004 	.word	0x05fa0004

000028b8 <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
    28b8:	b430      	push	{r4, r5}
    int8_t idx;
    uint32_t new_mask, prev_mask;

    do {
        prev_mask = *p_mask;
    28ba:	6804      	ldr	r4, [r0, #0]
        idx = 31 - NRF_CLZ(prev_mask);
    28bc:	fab4 f384 	clz	r3, r4
        if (idx < 0) {
    28c0:	f1d3 031f 	rsbs	r3, r3, #31
    28c4:	d415      	bmi.n	28f2 <nrfx_flag32_alloc+0x3a>
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
    28c6:	2201      	movs	r2, #1
    28c8:	409a      	lsls	r2, r3
    28ca:	ea24 0202 	bic.w	r2, r4, r2
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    28ce:	f3bf 8f5b 	dmb	ish
    28d2:	e850 5f00 	ldrex	r5, [r0]
    28d6:	42a5      	cmp	r5, r4
    28d8:	d104      	bne.n	28e4 <nrfx_flag32_alloc+0x2c>
    28da:	e840 2c00 	strex	ip, r2, [r0]
    28de:	f1bc 0f00 	cmp.w	ip, #0
    28e2:	d1f6      	bne.n	28d2 <nrfx_flag32_alloc+0x1a>
    28e4:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    28e8:	d1e7      	bne.n	28ba <nrfx_flag32_alloc+0x2>

    *p_flag = idx;
    28ea:	700b      	strb	r3, [r1, #0]

    return NRFX_SUCCESS;
    28ec:	4802      	ldr	r0, [pc, #8]	; (28f8 <nrfx_flag32_alloc+0x40>)
}
    28ee:	bc30      	pop	{r4, r5}
    28f0:	4770      	bx	lr
            return NRFX_ERROR_NO_MEM;
    28f2:	4802      	ldr	r0, [pc, #8]	; (28fc <nrfx_flag32_alloc+0x44>)
    28f4:	e7fb      	b.n	28ee <nrfx_flag32_alloc+0x36>
    28f6:	bf00      	nop
    28f8:	0bad0000 	.word	0x0bad0000
    28fc:	0bad0002 	.word	0x0bad0002

00002900 <nrfx_clock_init>:
nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    NRFX_ASSERT(event_handler);

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
    2900:	4b05      	ldr	r3, [pc, #20]	; (2918 <nrfx_clock_init+0x18>)
    2902:	791b      	ldrb	r3, [r3, #4]
    2904:	b92b      	cbnz	r3, 2912 <nrfx_clock_init+0x12>
    else
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
    2906:	4b04      	ldr	r3, [pc, #16]	; (2918 <nrfx_clock_init+0x18>)
    2908:	6018      	str	r0, [r3, #0]
        m_clock_cb.module_initialized = true;
    290a:	2201      	movs	r2, #1
    290c:	711a      	strb	r2, [r3, #4]
    nrfx_err_t err_code = NRFX_SUCCESS;
    290e:	4803      	ldr	r0, [pc, #12]	; (291c <nrfx_clock_init+0x1c>)
    2910:	4770      	bx	lr
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
    2912:	4803      	ldr	r0, [pc, #12]	; (2920 <nrfx_clock_init+0x20>)
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    2914:	4770      	bx	lr
    2916:	bf00      	nop
    2918:	20000354 	.word	0x20000354
    291c:	0bad0000 	.word	0x0bad0000
    2920:	0bad000c 	.word	0x0bad000c

00002924 <nrfx_clock_start>:
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
    NRFX_ASSERT(m_clock_cb.module_initialized);
    switch (domain)
    2924:	b110      	cbz	r0, 292c <nrfx_clock_start+0x8>
    2926:	2801      	cmp	r0, #1
    2928:	d025      	beq.n	2976 <nrfx_clock_start+0x52>
    292a:	4770      	bx	lr
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    292c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    2930:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    2934:	f003 0303 	and.w	r3, r3, #3
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    2938:	f8d2 2418 	ldr.w	r2, [r2, #1048]	; 0x418
    293c:	f412 3f80 	tst.w	r2, #65536	; 0x10000
    2940:	d111      	bne.n	2966 <nrfx_clock_start+0x42>
    p_reg->LFCLKSRC = (uint32_t)(source);
    2942:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2946:	2200      	movs	r2, #0
    2948:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    294c:	4b0f      	ldr	r3, [pc, #60]	; (298c <nrfx_clock_start+0x68>)
    294e:	2200      	movs	r2, #0
    2950:	601a      	str	r2, [r3, #0]
    2952:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    2954:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2958:	2202      	movs	r2, #2
    295a:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    295e:	3308      	adds	r3, #8
    2960:	2201      	movs	r2, #1
    2962:	601a      	str	r2, [r3, #0]
}
    2964:	4770      	bx	lr
    {
        case NRF_CLOCK_DOMAIN_LFCLK:
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
            {
                nrf_clock_lfclk_t lfclksrc;
                if (nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc) &&
    2966:	2b01      	cmp	r3, #1
    2968:	d1eb      	bne.n	2942 <nrfx_clock_start+0x1e>
    p_reg->LFCLKSRC = (uint32_t)(source);
    296a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    296e:	2201      	movs	r2, #1
    2970:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
}
    2974:	e7ea      	b.n	294c <nrfx_clock_start+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    2976:	4b06      	ldr	r3, [pc, #24]	; (2990 <nrfx_clock_start+0x6c>)
    2978:	2200      	movs	r2, #0
    297a:	601a      	str	r2, [r3, #0]
    297c:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    297e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2982:	2201      	movs	r2, #1
    2984:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    2988:	601a      	str	r2, [r3, #0]
#endif
        default:
            NRFX_ASSERT(0);
            break;
    }
}
    298a:	4770      	bx	lr
    298c:	40000104 	.word	0x40000104
    2990:	40000100 	.word	0x40000100

00002994 <nrfx_clock_stop>:

void nrfx_clock_stop(nrf_clock_domain_t domain)
{
    2994:	b530      	push	{r4, r5, lr}
    2996:	b083      	sub	sp, #12
    NRFX_ASSERT(m_clock_cb.module_initialized);
    switch (domain)
    2998:	4604      	mov	r4, r0
    299a:	b118      	cbz	r0, 29a4 <nrfx_clock_stop+0x10>
    299c:	2801      	cmp	r0, #1
    299e:	d013      	beq.n	29c8 <nrfx_clock_stop+0x34>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
    29a0:	b003      	add	sp, #12
    29a2:	bd30      	pop	{r4, r5, pc}
    p_reg->INTENCLR = mask;
    29a4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    29a8:	2202      	movs	r2, #2
    29aa:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    29ae:	f503 7382 	add.w	r3, r3, #260	; 0x104
    29b2:	2200      	movs	r2, #0
    29b4:	601a      	str	r2, [r3, #0]
    29b6:	681b      	ldr	r3, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    29b8:	4b37      	ldr	r3, [pc, #220]	; (2a98 <nrfx_clock_stop+0x104>)
    29ba:	2201      	movs	r2, #1
    29bc:	601a      	str	r2, [r3, #0]
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    29be:	2c01      	cmp	r4, #1
    29c0:	d00f      	beq.n	29e2 <nrfx_clock_stop+0x4e>
        NRFX_WAIT_FOR(!nrfx_clock_is_running(domain, NULL), 10000, 1, stopped);
    29c2:	f242 7510 	movw	r5, #10000	; 0x2710
    29c6:	e053      	b.n	2a70 <nrfx_clock_stop+0xdc>
    p_reg->INTENCLR = mask;
    29c8:	2301      	movs	r3, #1
    29ca:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    29ce:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    29d2:	f502 7280 	add.w	r2, r2, #256	; 0x100
    29d6:	2100      	movs	r1, #0
    29d8:	6011      	str	r1, [r2, #0]
    29da:	6812      	ldr	r2, [r2, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    29dc:	4a2f      	ldr	r2, [pc, #188]	; (2a9c <nrfx_clock_stop+0x108>)
    29de:	6013      	str	r3, [r2, #0]
}
    29e0:	e7ed      	b.n	29be <nrfx_clock_stop+0x2a>
        nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
    29e2:	2301      	movs	r3, #1
    29e4:	f88d 3007 	strb.w	r3, [sp, #7]
        NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, &clk_src) ||
    29e8:	f242 7510 	movw	r5, #10000	; 0x2710
    29ec:	e018      	b.n	2a20 <nrfx_clock_stop+0x8c>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    29ee:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    29f2:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    29f6:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
    29fa:	f8cd 3007 	str.w	r3, [sp, #7]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    29fe:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
    2a02:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    2a06:	d120      	bne.n	2a4a <nrfx_clock_stop+0xb6>
    return false;
    2a08:	2300      	movs	r3, #0
    2a0a:	2b00      	cmp	r3, #0
    2a0c:	d0c8      	beq.n	29a0 <nrfx_clock_stop+0xc>
    2a0e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    2a12:	2b01      	cmp	r3, #1
    2a14:	d1c4      	bne.n	29a0 <nrfx_clock_stop+0xc>
    2a16:	2001      	movs	r0, #1
    2a18:	f002 fb42 	bl	50a0 <nrfx_busy_wait>
    2a1c:	3d01      	subs	r5, #1
    2a1e:	d0bf      	beq.n	29a0 <nrfx_clock_stop+0xc>
    switch (domain)
    2a20:	2c00      	cmp	r4, #0
    2a22:	d0e4      	beq.n	29ee <nrfx_clock_stop+0x5a>
    2a24:	2c01      	cmp	r4, #1
    2a26:	d001      	beq.n	2a2c <nrfx_clock_stop+0x98>
    2a28:	2300      	movs	r3, #0
    2a2a:	e7ee      	b.n	2a0a <nrfx_clock_stop+0x76>
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    2a2c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    2a30:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
    2a34:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
    2a38:	f88d 3007 	strb.w	r3, [sp, #7]
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    2a3c:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
    2a40:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    2a44:	d103      	bne.n	2a4e <nrfx_clock_stop+0xba>
    return false;
    2a46:	2300      	movs	r3, #0
    2a48:	e7df      	b.n	2a0a <nrfx_clock_stop+0x76>
                return true;
    2a4a:	2301      	movs	r3, #1
    2a4c:	e7dd      	b.n	2a0a <nrfx_clock_stop+0x76>
                return true;
    2a4e:	2301      	movs	r3, #1
    2a50:	e7db      	b.n	2a0a <nrfx_clock_stop+0x76>
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    2a52:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2a56:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
    2a5a:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    2a5e:	d116      	bne.n	2a8e <nrfx_clock_stop+0xfa>
    return false;
    2a60:	2300      	movs	r3, #0
        NRFX_WAIT_FOR(!nrfx_clock_is_running(domain, NULL), 10000, 1, stopped);
    2a62:	2b00      	cmp	r3, #0
    2a64:	d09c      	beq.n	29a0 <nrfx_clock_stop+0xc>
    2a66:	2001      	movs	r0, #1
    2a68:	f002 fb1a 	bl	50a0 <nrfx_busy_wait>
    2a6c:	3d01      	subs	r5, #1
    2a6e:	d097      	beq.n	29a0 <nrfx_clock_stop+0xc>
    switch (domain)
    2a70:	2c00      	cmp	r4, #0
    2a72:	d0ee      	beq.n	2a52 <nrfx_clock_stop+0xbe>
    2a74:	2c01      	cmp	r4, #1
    2a76:	d001      	beq.n	2a7c <nrfx_clock_stop+0xe8>
    2a78:	2300      	movs	r3, #0
    2a7a:	e7f2      	b.n	2a62 <nrfx_clock_stop+0xce>
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    2a7c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2a80:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
    2a84:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    2a88:	d103      	bne.n	2a92 <nrfx_clock_stop+0xfe>
    return false;
    2a8a:	2300      	movs	r3, #0
    2a8c:	e7e9      	b.n	2a62 <nrfx_clock_stop+0xce>
                return true;
    2a8e:	2301      	movs	r3, #1
    2a90:	e7e7      	b.n	2a62 <nrfx_clock_stop+0xce>
                return true;
    2a92:	2301      	movs	r3, #1
    2a94:	e7e5      	b.n	2a62 <nrfx_clock_stop+0xce>
    2a96:	bf00      	nop
    2a98:	4000000c 	.word	0x4000000c
    2a9c:	40000004 	.word	0x40000004

00002aa0 <nrfx_power_clock_irq_handler>:
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
    2aa0:	b508      	push	{r3, lr}
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    2aa2:	4b18      	ldr	r3, [pc, #96]	; (2b04 <nrfx_power_clock_irq_handler+0x64>)
    2aa4:	681b      	ldr	r3, [r3, #0]
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
    2aa6:	b15b      	cbz	r3, 2ac0 <nrfx_power_clock_irq_handler+0x20>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    2aa8:	4b16      	ldr	r3, [pc, #88]	; (2b04 <nrfx_power_clock_irq_handler+0x64>)
    2aaa:	2000      	movs	r0, #0
    2aac:	6018      	str	r0, [r3, #0]
    2aae:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
    2ab0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2ab4:	2201      	movs	r2, #1
    2ab6:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        {
            m_clock_cb.hfclk_started = true;
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
    2aba:	4b13      	ldr	r3, [pc, #76]	; (2b08 <nrfx_power_clock_irq_handler+0x68>)
    2abc:	681b      	ldr	r3, [r3, #0]
    2abe:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    2ac0:	4b12      	ldr	r3, [pc, #72]	; (2b0c <nrfx_power_clock_irq_handler+0x6c>)
    2ac2:	681b      	ldr	r3, [r3, #0]
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
    2ac4:	b19b      	cbz	r3, 2aee <nrfx_power_clock_irq_handler+0x4e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    2ac6:	4b11      	ldr	r3, [pc, #68]	; (2b0c <nrfx_power_clock_irq_handler+0x6c>)
    2ac8:	2200      	movs	r2, #0
    2aca:	601a      	str	r2, [r3, #0]
    2acc:	681b      	ldr	r3, [r3, #0]
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    2ace:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2ad2:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    2ad6:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
    2ada:	f012 0f03 	tst.w	r2, #3
    2ade:	d107      	bne.n	2af0 <nrfx_power_clock_irq_handler+0x50>
    p_reg->LFCLKSRC = (uint32_t)(source);
    2ae0:	2301      	movs	r3, #1
    2ae2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    2ae6:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    2aea:	3208      	adds	r2, #8
    2aec:	6013      	str	r3, [r2, #0]
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
    2aee:	bd08      	pop	{r3, pc}
    p_reg->INTENCLR = mask;
    2af0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2af4:	2202      	movs	r2, #2
    2af6:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    2afa:	4b03      	ldr	r3, [pc, #12]	; (2b08 <nrfx_power_clock_irq_handler+0x68>)
    2afc:	681b      	ldr	r3, [r3, #0]
    2afe:	2001      	movs	r0, #1
    2b00:	4798      	blx	r3
}
    2b02:	e7f4      	b.n	2aee <nrfx_power_clock_irq_handler+0x4e>
    2b04:	40000100 	.word	0x40000100
    2b08:	20000354 	.word	0x20000354
    2b0c:	40000104 	.word	0x40000104

00002b10 <nrfx_ppi_channel_alloc>:
    nrfx_flag32_init(&m_groups_allocated, NRFX_PPI_ALL_APP_GROUPS_MASK);
}


nrfx_err_t nrfx_ppi_channel_alloc(nrf_ppi_channel_t * p_channel)
{
    2b10:	b508      	push	{r3, lr}
    2b12:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_channels_allocated, (uint8_t *)p_channel);
    2b14:	4801      	ldr	r0, [pc, #4]	; (2b1c <nrfx_ppi_channel_alloc+0xc>)
    2b16:	f7ff fecf 	bl	28b8 <nrfx_flag32_alloc>
}
    2b1a:	bd08      	pop	{r3, pc}
    2b1c:	20000020 	.word	0x20000020

00002b20 <z_device_state_init>:
 * The state object is always zero-initialized, but this may not be
 * sufficient.
 */
void z_device_state_init(void)
{
	const struct device *dev = __device_start;
    2b20:	4b03      	ldr	r3, [pc, #12]	; (2b30 <z_device_state_init+0x10>)

	while (dev < __device_end) {
    2b22:	4a04      	ldr	r2, [pc, #16]	; (2b34 <z_device_state_init+0x14>)
    2b24:	4293      	cmp	r3, r2
    2b26:	d201      	bcs.n	2b2c <z_device_state_init+0xc>
		z_object_init(dev);
		++dev;
    2b28:	3318      	adds	r3, #24
    2b2a:	e7fa      	b.n	2b22 <z_device_state_init+0x2>
	}
}
    2b2c:	4770      	bx	lr
    2b2e:	bf00      	nop
    2b30:	00005564 	.word	0x00005564
    2b34:	00005594 	.word	0x00005594

00002b38 <z_sys_init_run_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void z_sys_init_run_level(int32_t level)
{
    2b38:	b570      	push	{r4, r5, r6, lr}
    2b3a:	4606      	mov	r6, r0
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    2b3c:	4b11      	ldr	r3, [pc, #68]	; (2b84 <z_sys_init_run_level+0x4c>)
    2b3e:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
    2b42:	e009      	b.n	2b58 <z_sys_init_run_level+0x20>
			/* Mark device initialized.  If initialization
			 * failed, record the error condition.
			 */
			if (rc != 0) {
				if (rc < 0) {
					rc = -rc;
    2b44:	4240      	negs	r0, r0
    2b46:	e017      	b.n	2b78 <z_sys_init_run_level+0x40>
				}
				if (rc > UINT8_MAX) {
					rc = UINT8_MAX;
				}
				dev->state->init_res = rc;
    2b48:	68eb      	ldr	r3, [r5, #12]
    2b4a:	7018      	strb	r0, [r3, #0]
			}
			dev->state->initialized = true;
    2b4c:	68ea      	ldr	r2, [r5, #12]
    2b4e:	7853      	ldrb	r3, [r2, #1]
    2b50:	f043 0301 	orr.w	r3, r3, #1
    2b54:	7053      	strb	r3, [r2, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    2b56:	3408      	adds	r4, #8
    2b58:	1c73      	adds	r3, r6, #1
    2b5a:	4a0a      	ldr	r2, [pc, #40]	; (2b84 <z_sys_init_run_level+0x4c>)
    2b5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    2b60:	42a3      	cmp	r3, r4
    2b62:	d90d      	bls.n	2b80 <z_sys_init_run_level+0x48>
		const struct device *dev = entry->dev;
    2b64:	6865      	ldr	r5, [r4, #4]
		int rc = entry->init(dev);
    2b66:	6823      	ldr	r3, [r4, #0]
    2b68:	4628      	mov	r0, r5
    2b6a:	4798      	blx	r3
		if (dev != NULL) {
    2b6c:	2d00      	cmp	r5, #0
    2b6e:	d0f2      	beq.n	2b56 <z_sys_init_run_level+0x1e>
			if (rc != 0) {
    2b70:	2800      	cmp	r0, #0
    2b72:	d0eb      	beq.n	2b4c <z_sys_init_run_level+0x14>
				if (rc < 0) {
    2b74:	2800      	cmp	r0, #0
    2b76:	dbe5      	blt.n	2b44 <z_sys_init_run_level+0xc>
				if (rc > UINT8_MAX) {
    2b78:	28ff      	cmp	r0, #255	; 0xff
    2b7a:	dde5      	ble.n	2b48 <z_sys_init_run_level+0x10>
					rc = UINT8_MAX;
    2b7c:	20ff      	movs	r0, #255	; 0xff
    2b7e:	e7e3      	b.n	2b48 <z_sys_init_run_level+0x10>
		}
	}
}
    2b80:	bd70      	pop	{r4, r5, r6, pc}
    2b82:	bf00      	nop
    2b84:	000057d4 	.word	0x000057d4

00002b88 <z_impl_device_get_binding>:

const struct device *z_impl_device_get_binding(const char *name)
{
    2b88:	b538      	push	{r3, r4, r5, lr}
	const struct device *dev;

	/* A null string identifies no device.  So does an empty
	 * string.
	 */
	if ((name == NULL) || (name[0] == '\0')) {
    2b8a:	4605      	mov	r5, r0
    2b8c:	b328      	cbz	r0, 2bda <z_impl_device_get_binding+0x52>
    2b8e:	7803      	ldrb	r3, [r0, #0]
    2b90:	b32b      	cbz	r3, 2bde <z_impl_device_get_binding+0x56>
	/* Split the search into two loops: in the common scenario, where
	 * device names are stored in ROM (and are referenced by the user
	 * with CONFIG_* macros), only cheap pointer comparisons will be
	 * performed. Reserve string comparisons for a fallback.
	 */
	for (dev = __device_start; dev != __device_end; dev++) {
    2b92:	4c14      	ldr	r4, [pc, #80]	; (2be4 <z_impl_device_get_binding+0x5c>)
    2b94:	e000      	b.n	2b98 <z_impl_device_get_binding+0x10>
    2b96:	3418      	adds	r4, #24
    2b98:	4b13      	ldr	r3, [pc, #76]	; (2be8 <z_impl_device_get_binding+0x60>)
    2b9a:	429c      	cmp	r4, r3
    2b9c:	d008      	beq.n	2bb0 <z_impl_device_get_binding+0x28>
		if (z_device_ready(dev) && (dev->name == name)) {
    2b9e:	4620      	mov	r0, r4
    2ba0:	f002 fa8b 	bl	50ba <z_device_ready>
    2ba4:	2800      	cmp	r0, #0
    2ba6:	d0f6      	beq.n	2b96 <z_impl_device_get_binding+0xe>
    2ba8:	6823      	ldr	r3, [r4, #0]
    2baa:	42ab      	cmp	r3, r5
    2bac:	d1f3      	bne.n	2b96 <z_impl_device_get_binding+0xe>
    2bae:	e012      	b.n	2bd6 <z_impl_device_get_binding+0x4e>
			return dev;
		}
	}

	for (dev = __device_start; dev != __device_end; dev++) {
    2bb0:	4c0c      	ldr	r4, [pc, #48]	; (2be4 <z_impl_device_get_binding+0x5c>)
    2bb2:	e000      	b.n	2bb6 <z_impl_device_get_binding+0x2e>
    2bb4:	3418      	adds	r4, #24
    2bb6:	4b0c      	ldr	r3, [pc, #48]	; (2be8 <z_impl_device_get_binding+0x60>)
    2bb8:	429c      	cmp	r4, r3
    2bba:	d00b      	beq.n	2bd4 <z_impl_device_get_binding+0x4c>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
    2bbc:	4620      	mov	r0, r4
    2bbe:	f002 fa7c 	bl	50ba <z_device_ready>
    2bc2:	2800      	cmp	r0, #0
    2bc4:	d0f6      	beq.n	2bb4 <z_impl_device_get_binding+0x2c>
    2bc6:	6821      	ldr	r1, [r4, #0]
    2bc8:	4628      	mov	r0, r5
    2bca:	f001 fb47 	bl	425c <strcmp>
    2bce:	2800      	cmp	r0, #0
    2bd0:	d1f0      	bne.n	2bb4 <z_impl_device_get_binding+0x2c>
    2bd2:	e000      	b.n	2bd6 <z_impl_device_get_binding+0x4e>
			return dev;
		}
	}

	return NULL;
    2bd4:	2400      	movs	r4, #0
}
    2bd6:	4620      	mov	r0, r4
    2bd8:	bd38      	pop	{r3, r4, r5, pc}
		return NULL;
    2bda:	4604      	mov	r4, r0
    2bdc:	e7fb      	b.n	2bd6 <z_impl_device_get_binding+0x4e>
    2bde:	2400      	movs	r4, #0
    2be0:	e7f9      	b.n	2bd6 <z_impl_device_get_binding+0x4e>
    2be2:	bf00      	nop
    2be4:	00005564 	.word	0x00005564
    2be8:	00005594 	.word	0x00005594

00002bec <init_idle_thread>:
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */

#if defined(CONFIG_MULTITHREADING)
__boot_func
static void init_idle_thread(int i)
{
    2bec:	b5f0      	push	{r4, r5, r6, r7, lr}
    2bee:	b089      	sub	sp, #36	; 0x24
    2bf0:	4604      	mov	r4, r0
	struct k_thread *thread = &z_idle_threads[i];
    2bf2:	4b15      	ldr	r3, [pc, #84]	; (2c48 <init_idle_thread+0x5c>)
    2bf4:	25b0      	movs	r5, #176	; 0xb0
    2bf6:	fb05 3500 	mla	r5, r5, r0, r3
	k_thread_stack_t *stack = z_idle_stacks[i];
    2bfa:	eb00 03c0 	add.w	r3, r0, r0, lsl #3
    2bfe:	4e13      	ldr	r6, [pc, #76]	; (2c4c <init_idle_thread+0x60>)
    2c00:	eb06 1643 	add.w	r6, r6, r3, lsl #5

#ifdef CONFIG_THREAD_NAME
	char tname[8];

	snprintk(tname, 8, "idle %02d", i);
    2c04:	af06      	add	r7, sp, #24
    2c06:	4603      	mov	r3, r0
    2c08:	4a11      	ldr	r2, [pc, #68]	; (2c50 <init_idle_thread+0x64>)
    2c0a:	2108      	movs	r1, #8
    2c0c:	4638      	mov	r0, r7
    2c0e:	f001 f848 	bl	3ca2 <snprintk>
#else
	char *tname = NULL;
#endif /* CONFIG_THREAD_NAME */

	z_setup_new_thread(thread, stack,
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    2c12:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    2c16:	480f      	ldr	r0, [pc, #60]	; (2c54 <init_idle_thread+0x68>)
    2c18:	eb00 04c4 	add.w	r4, r0, r4, lsl #3
	z_setup_new_thread(thread, stack,
    2c1c:	9705      	str	r7, [sp, #20]
    2c1e:	2301      	movs	r3, #1
    2c20:	9304      	str	r3, [sp, #16]
    2c22:	230f      	movs	r3, #15
    2c24:	9303      	str	r3, [sp, #12]
    2c26:	2300      	movs	r3, #0
    2c28:	9302      	str	r3, [sp, #8]
    2c2a:	9301      	str	r3, [sp, #4]
    2c2c:	9400      	str	r4, [sp, #0]
    2c2e:	4b0a      	ldr	r3, [pc, #40]	; (2c58 <init_idle_thread+0x6c>)
    2c30:	f44f 7280 	mov.w	r2, #256	; 0x100
    2c34:	4631      	mov	r1, r6
    2c36:	4628      	mov	r0, r5
    2c38:	f000 f8fc 	bl	2e34 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    2c3c:	7b6b      	ldrb	r3, [r5, #13]
    2c3e:	f023 0304 	bic.w	r3, r3, #4
    2c42:	736b      	strb	r3, [r5, #13]
	z_mark_thread_as_started(thread);

#ifdef CONFIG_SMP
	thread->base.is_idle = 1U;
#endif
}
    2c44:	b009      	add	sp, #36	; 0x24
    2c46:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2c48:	20000130 	.word	0x20000130
    2c4c:	200007c0 	.word	0x200007c0
    2c50:	000057ec 	.word	0x000057ec
    2c54:	2000035c 	.word	0x2000035c
    2c58:	00002f99 	.word	0x00002f99

00002c5c <prepare_multithreading>:
 *
 * @return initial stack pointer for the main thread
 */
__boot_func
static char *prepare_multithreading(void)
{
    2c5c:	b570      	push	{r4, r5, r6, lr}
    2c5e:	b086      	sub	sp, #24
	char *stack_ptr;

	/* _kernel.ready_q is all zeroes */
	z_sched_init();
    2c60:	f000 fc90 	bl	3584 <z_sched_init>
	 * - the main thread will be the one to run first
	 * - no other thread is initialized yet and thus their priority fields
	 *   contain garbage, which would prevent the cache loading algorithm
	 *   to work as intended
	 */
	_kernel.ready_q.cache = &z_main_thread;
    2c64:	4d1b      	ldr	r5, [pc, #108]	; (2cd4 <prepare_multithreading+0x78>)
    2c66:	4b1c      	ldr	r3, [pc, #112]	; (2cd8 <prepare_multithreading+0x7c>)
    2c68:	61dd      	str	r5, [r3, #28]
#endif
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    2c6a:	4b1c      	ldr	r3, [pc, #112]	; (2cdc <prepare_multithreading+0x80>)
    2c6c:	9305      	str	r3, [sp, #20]
    2c6e:	2301      	movs	r3, #1
    2c70:	9304      	str	r3, [sp, #16]
    2c72:	2400      	movs	r4, #0
    2c74:	9403      	str	r4, [sp, #12]
    2c76:	9402      	str	r4, [sp, #8]
    2c78:	9401      	str	r4, [sp, #4]
    2c7a:	9400      	str	r4, [sp, #0]
    2c7c:	4b18      	ldr	r3, [pc, #96]	; (2ce0 <prepare_multithreading+0x84>)
    2c7e:	f44f 6280 	mov.w	r2, #1024	; 0x400
    2c82:	4918      	ldr	r1, [pc, #96]	; (2ce4 <prepare_multithreading+0x88>)
    2c84:	4628      	mov	r0, r5
    2c86:	f000 f8d5 	bl	2e34 <z_setup_new_thread>
    2c8a:	4606      	mov	r6, r0
    2c8c:	7b6b      	ldrb	r3, [r5, #13]
    2c8e:	f023 0304 	bic.w	r3, r3, #4
    2c92:	736b      	strb	r3, [r5, #13]
				       CONFIG_MAIN_STACK_SIZE, bg_thread_main,
				       NULL, NULL, NULL,
				       CONFIG_MAIN_THREAD_PRIORITY,
				       K_ESSENTIAL, "main");
	z_mark_thread_as_started(&z_main_thread);
	z_ready_thread(&z_main_thread);
    2c94:	4628      	mov	r0, r5
    2c96:	f002 fab5 	bl	5204 <z_ready_thread>

	for (int i = 0; i < CONFIG_MP_NUM_CPUS; i++) {
    2c9a:	2c00      	cmp	r4, #0
    2c9c:	dd02      	ble.n	2ca4 <prepare_multithreading+0x48>
			(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[i]) +
			 K_KERNEL_STACK_SIZEOF(z_interrupt_stacks[i]));
	}

	return stack_ptr;
}
    2c9e:	4630      	mov	r0, r6
    2ca0:	b006      	add	sp, #24
    2ca2:	bd70      	pop	{r4, r5, r6, pc}
		init_idle_thread(i);
    2ca4:	4620      	mov	r0, r4
    2ca6:	f7ff ffa1 	bl	2bec <init_idle_thread>
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
    2caa:	4b0f      	ldr	r3, [pc, #60]	; (2ce8 <prepare_multithreading+0x8c>)
    2cac:	22b0      	movs	r2, #176	; 0xb0
    2cae:	fb02 3204 	mla	r2, r2, r4, r3
    2cb2:	eb04 0144 	add.w	r1, r4, r4, lsl #1
    2cb6:	4b08      	ldr	r3, [pc, #32]	; (2cd8 <prepare_multithreading+0x7c>)
    2cb8:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
    2cbc:	60da      	str	r2, [r3, #12]
		_kernel.cpus[i].id = i;
    2cbe:	751c      	strb	r4, [r3, #20]
			(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[i]) +
    2cc0:	eb04 1184 	add.w	r1, r4, r4, lsl #6
    2cc4:	4a09      	ldr	r2, [pc, #36]	; (2cec <prepare_multithreading+0x90>)
    2cc6:	eb02 1241 	add.w	r2, r2, r1, lsl #5
    2cca:	f502 6202 	add.w	r2, r2, #2080	; 0x820
		_kernel.cpus[i].irq_stack =
    2cce:	605a      	str	r2, [r3, #4]
	for (int i = 0; i < CONFIG_MP_NUM_CPUS; i++) {
    2cd0:	3401      	adds	r4, #1
    2cd2:	e7e2      	b.n	2c9a <prepare_multithreading+0x3e>
    2cd4:	200001e0 	.word	0x200001e0
    2cd8:	2000035c 	.word	0x2000035c
    2cdc:	000057f8 	.word	0x000057f8
    2ce0:	00002cf1 	.word	0x00002cf1
    2ce4:	200003a0 	.word	0x200003a0
    2ce8:	20000130 	.word	0x20000130
    2cec:	200008e0 	.word	0x200008e0

00002cf0 <bg_thread_main>:
{
    2cf0:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
    2cf2:	4b0a      	ldr	r3, [pc, #40]	; (2d1c <bg_thread_main+0x2c>)
    2cf4:	2201      	movs	r2, #1
    2cf6:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    2cf8:	2002      	movs	r0, #2
    2cfa:	f7ff ff1d 	bl	2b38 <z_sys_init_run_level>
	boot_banner();
    2cfe:	f002 fc19 	bl	5534 <boot_banner>
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
    2d02:	2003      	movs	r0, #3
    2d04:	f7ff ff18 	bl	2b38 <z_sys_init_run_level>
	z_init_static_threads();
    2d08:	f000 f8f8 	bl	2efc <z_init_static_threads>
	main();
    2d0c:	f7fd fb4e 	bl	3ac <main>
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
    2d10:	4a03      	ldr	r2, [pc, #12]	; (2d20 <bg_thread_main+0x30>)
    2d12:	7b13      	ldrb	r3, [r2, #12]
    2d14:	f023 0301 	bic.w	r3, r3, #1
    2d18:	7313      	strb	r3, [r2, #12]
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
    2d1a:	bd08      	pop	{r3, pc}
    2d1c:	20000399 	.word	0x20000399
    2d20:	200001e0 	.word	0x200001e0

00002d24 <switch_to_main_thread>:

__boot_func
static FUNC_NORETURN void switch_to_main_thread(char *stack_ptr)
{
    2d24:	b508      	push	{r3, lr}
    2d26:	4601      	mov	r1, r0
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
    2d28:	4a01      	ldr	r2, [pc, #4]	; (2d30 <switch_to_main_thread+0xc>)
    2d2a:	4802      	ldr	r0, [pc, #8]	; (2d34 <switch_to_main_thread+0x10>)
    2d2c:	f7fe fb88 	bl	1440 <arch_switch_to_main_thread>
	 * current fake thread is not on a wait queue or ready queue, so it
	 * will never be rescheduled in.
	 */
	z_swap_unlocked();
#endif
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
    2d30:	00002cf1 	.word	0x00002cf1
    2d34:	200001e0 	.word	0x200001e0

00002d38 <z_bss_zero>:
{
    2d38:	b508      	push	{r3, lr}
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
    2d3a:	4803      	ldr	r0, [pc, #12]	; (2d48 <z_bss_zero+0x10>)
    2d3c:	4a03      	ldr	r2, [pc, #12]	; (2d4c <z_bss_zero+0x14>)
    2d3e:	1a12      	subs	r2, r2, r0
    2d40:	2100      	movs	r1, #0
    2d42:	f001 fab9 	bl	42b8 <memset>
}
    2d46:	bd08      	pop	{r3, pc}
    2d48:	20000038 	.word	0x20000038
    2d4c:	2000039c 	.word	0x2000039c

00002d50 <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
    2d50:	b500      	push	{lr}
    2d52:	b0ad      	sub	sp, #180	; 0xb4
 *
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
    2d54:	4b1b      	ldr	r3, [pc, #108]	; (2dc4 <z_cstart+0x74>)
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    2d56:	f383 8808 	msr	MSP, r3
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
    2d5a:	4c1b      	ldr	r4, [pc, #108]	; (2dc8 <z_cstart+0x78>)
    2d5c:	6963      	ldr	r3, [r4, #20]
    2d5e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    2d62:	6163      	str	r3, [r4, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2d64:	23e0      	movs	r3, #224	; 0xe0
    2d66:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
    2d6a:	2500      	movs	r5, #0
    2d6c:	77e5      	strb	r5, [r4, #31]
    2d6e:	7625      	strb	r5, [r4, #24]
    2d70:	7665      	strb	r5, [r4, #25]
    2d72:	76a5      	strb	r5, [r4, #26]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
    2d74:	6a63      	ldr	r3, [r4, #36]	; 0x24
    2d76:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
    2d7a:	6263      	str	r3, [r4, #36]	; 0x24
    2d7c:	f884 5023 	strb.w	r5, [r4, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
    2d80:	f7fe fca8 	bl	16d4 <z_arm_fault_init>
	z_arm_cpu_idle_init();
    2d84:	f7fe fa48 	bl	1218 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
    2d88:	f04f 33ff 	mov.w	r3, #4294967295
    2d8c:	62a3      	str	r3, [r4, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
    2d8e:	62e3      	str	r3, [r4, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
    2d90:	f7fe fdaa 	bl	18e8 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
    2d94:	f7fe fd44 	bl	1820 <z_arm_configure_static_mpu_regions>
 *
 * The memory of the dummy thread can be completely uninitialized.
 */
static inline void z_dummy_thread_init(struct k_thread *dummy_thread)
{
	dummy_thread->base.thread_state = _THREAD_DUMMY;
    2d98:	2401      	movs	r4, #1
    2d9a:	f88d 400d 	strb.w	r4, [sp, #13]
#ifdef CONFIG_SCHED_CPU_MASK
	dummy_thread->base.cpu_mask = -1;
#endif
	dummy_thread->base.user_options = K_ESSENTIAL;
    2d9e:	f88d 400c 	strb.w	r4, [sp, #12]
#ifdef CONFIG_THREAD_STACK_INFO
	dummy_thread->stack_info.start = 0U;
    2da2:	9526      	str	r5, [sp, #152]	; 0x98
	dummy_thread->stack_info.size = 0U;
    2da4:	9527      	str	r5, [sp, #156]	; 0x9c
#endif
#ifdef CONFIG_USERSPACE
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif

	_current_cpu->current = dummy_thread;
    2da6:	4b09      	ldr	r3, [pc, #36]	; (2dcc <z_cstart+0x7c>)
    2da8:	f8c3 d008 	str.w	sp, [r3, #8]
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
    2dac:	f7ff feb8 	bl	2b20 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
    2db0:	4628      	mov	r0, r5
    2db2:	f7ff fec1 	bl	2b38 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    2db6:	4620      	mov	r0, r4
    2db8:	f7ff febe 	bl	2b38 <z_sys_init_run_level>
	timing_init();
	timing_start();
#endif

#ifdef CONFIG_MULTITHREADING
	switch_to_main_thread(prepare_multithreading());
    2dbc:	f7ff ff4e 	bl	2c5c <prepare_multithreading>
    2dc0:	f7ff ffb0 	bl	2d24 <switch_to_main_thread>
    2dc4:	20001100 	.word	0x20001100
    2dc8:	e000ed00 	.word	0xe000ed00
    2dcc:	2000035c 	.word	0x2000035c

00002dd0 <z_thread_monitor_exit>:
	__asm__ volatile(
    2dd0:	f04f 0320 	mov.w	r3, #32
    2dd4:	f3ef 8111 	mrs	r1, BASEPRI
    2dd8:	f383 8812 	msr	BASEPRI_MAX, r3
    2ddc:	f3bf 8f6f 	isb	sy
 */
void z_thread_monitor_exit(struct k_thread *thread)
{
	k_spinlock_key_t key = k_spin_lock(&z_thread_monitor_lock);

	if (thread == _kernel.threads) {
    2de0:	4b0a      	ldr	r3, [pc, #40]	; (2e0c <z_thread_monitor_exit+0x3c>)
    2de2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2de4:	4283      	cmp	r3, r0
    2de6:	d104      	bne.n	2df2 <z_thread_monitor_exit+0x22>
		_kernel.threads = _kernel.threads->next_thread;
    2de8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
    2dea:	4b08      	ldr	r3, [pc, #32]	; (2e0c <z_thread_monitor_exit+0x3c>)
    2dec:	629a      	str	r2, [r3, #40]	; 0x28
    2dee:	e007      	b.n	2e00 <z_thread_monitor_exit+0x30>
		struct k_thread *prev_thread;

		prev_thread = _kernel.threads;
		while ((prev_thread != NULL) &&
			(thread != prev_thread->next_thread)) {
			prev_thread = prev_thread->next_thread;
    2df0:	4613      	mov	r3, r2
		while ((prev_thread != NULL) &&
    2df2:	b113      	cbz	r3, 2dfa <z_thread_monitor_exit+0x2a>
			(thread != prev_thread->next_thread)) {
    2df4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
		while ((prev_thread != NULL) &&
    2df6:	4282      	cmp	r2, r0
    2df8:	d1fa      	bne.n	2df0 <z_thread_monitor_exit+0x20>
		}
		if (prev_thread != NULL) {
    2dfa:	b10b      	cbz	r3, 2e00 <z_thread_monitor_exit+0x30>
			prev_thread->next_thread = thread->next_thread;
    2dfc:	6f02      	ldr	r2, [r0, #112]	; 0x70
    2dfe:	671a      	str	r2, [r3, #112]	; 0x70
	__asm__ volatile(
    2e00:	f381 8811 	msr	BASEPRI, r1
    2e04:	f3bf 8f6f 	isb	sy
		}
	}

	k_spin_unlock(&z_thread_monitor_lock, key);
}
    2e08:	4770      	bx	lr
    2e0a:	bf00      	nop
    2e0c:	2000035c 	.word	0x2000035c

00002e10 <schedule_new_thread>:
#endif
#endif

#ifdef CONFIG_MULTITHREADING
static void schedule_new_thread(struct k_thread *thread, k_timeout_t delay)
{
    2e10:	b538      	push	{r3, r4, r5, lr}
    2e12:	4614      	mov	r4, r2
    2e14:	461d      	mov	r5, r3
#ifdef CONFIG_SYS_CLOCK_EXISTS
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    2e16:	ea54 0305 	orrs.w	r3, r4, r5
    2e1a:	d102      	bne.n	2e22 <schedule_new_thread+0x12>
	z_impl_k_thread_start(thread);
    2e1c:	f002 f98c 	bl	5138 <z_impl_k_thread_start>
	}
#else
	ARG_UNUSED(delay);
	k_thread_start(thread);
#endif
}
    2e20:	bd38      	pop	{r3, r4, r5, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    2e22:	462b      	mov	r3, r5
    2e24:	4902      	ldr	r1, [pc, #8]	; (2e30 <schedule_new_thread+0x20>)
    2e26:	3018      	adds	r0, #24
    2e28:	f000 fd08 	bl	383c <z_add_timeout>
    2e2c:	e7f8      	b.n	2e20 <schedule_new_thread+0x10>
    2e2e:	bf00      	nop
    2e30:	0000523d 	.word	0x0000523d

00002e34 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
    2e34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2e38:	b085      	sub	sp, #20
    2e3a:	4604      	mov	r4, r0
    2e3c:	460f      	mov	r7, r1
    2e3e:	4615      	mov	r5, r2
    2e40:	461e      	mov	r6, r3
    2e42:	f8dd a038 	ldr.w	sl, [sp, #56]	; 0x38
    2e46:	f8dd 903c 	ldr.w	r9, [sp, #60]	; 0x3c
    2e4a:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
    2e4e:	f8dd b04c 	ldr.w	fp, [sp, #76]	; 0x4c
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
    2e52:	f100 0358 	add.w	r3, r0, #88	; 0x58
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
    2e56:	6583      	str	r3, [r0, #88]	; 0x58
	list->tail = (sys_dnode_t *)list;
    2e58:	65c3      	str	r3, [r0, #92]	; 0x5c
	k_object_access_grant(new_thread, new_thread);
#endif
	z_waitq_init(&new_thread->join_queue);

	/* Initialize various struct k_thread members */
	z_init_thread_base(&new_thread->base, prio, _THREAD_PRESTART, options);
    2e5a:	9b12      	ldr	r3, [sp, #72]	; 0x48
    2e5c:	2204      	movs	r2, #4
    2e5e:	9911      	ldr	r1, [sp, #68]	; 0x44
    2e60:	f002 f96e 	bl	5140 <z_init_thread_base>
	stack_ptr = setup_thread_stack(new_thread, stack, stack_size);
    2e64:	462a      	mov	r2, r5
    2e66:	4639      	mov	r1, r7
    2e68:	4620      	mov	r0, r4
    2e6a:	f002 f94d 	bl	5108 <setup_thread_stack>
    2e6e:	4605      	mov	r5, r0
	 */
	__ASSERT_NO_MSG(arch_mem_coherent(new_thread));
	__ASSERT_NO_MSG(!arch_mem_coherent(stack));
#endif

	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    2e70:	f8cd 8008 	str.w	r8, [sp, #8]
    2e74:	f8cd 9004 	str.w	r9, [sp, #4]
    2e78:	f8cd a000 	str.w	sl, [sp]
    2e7c:	4633      	mov	r3, r6
    2e7e:	4602      	mov	r2, r0
    2e80:	4639      	mov	r1, r7
    2e82:	4620      	mov	r0, r4
    2e84:	f7fe fa8c 	bl	13a0 <arch_new_thread>

	/* static threads overwrite it afterwards with real value */
	new_thread->init_data = NULL;
    2e88:	2300      	movs	r3, #0
    2e8a:	6563      	str	r3, [r4, #84]	; 0x54
#ifdef CONFIG_THREAD_CUSTOM_DATA
	/* Initialize custom data field (value is opaque to kernel) */
	new_thread->custom_data = NULL;
#endif
#ifdef CONFIG_THREAD_MONITOR
	new_thread->entry.pEntry = entry;
    2e8c:	6626      	str	r6, [r4, #96]	; 0x60
	new_thread->entry.parameter1 = p1;
    2e8e:	f8c4 a064 	str.w	sl, [r4, #100]	; 0x64
	new_thread->entry.parameter2 = p2;
    2e92:	f8c4 9068 	str.w	r9, [r4, #104]	; 0x68
	new_thread->entry.parameter3 = p3;
    2e96:	f8c4 806c 	str.w	r8, [r4, #108]	; 0x6c
	__asm__ volatile(
    2e9a:	f04f 0320 	mov.w	r3, #32
    2e9e:	f3ef 8211 	mrs	r2, BASEPRI
    2ea2:	f383 8812 	msr	BASEPRI_MAX, r3
    2ea6:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&z_thread_monitor_lock);

	new_thread->next_thread = _kernel.threads;
    2eaa:	4b13      	ldr	r3, [pc, #76]	; (2ef8 <z_setup_new_thread+0xc4>)
    2eac:	6a99      	ldr	r1, [r3, #40]	; 0x28
    2eae:	6721      	str	r1, [r4, #112]	; 0x70
	_kernel.threads = new_thread;
    2eb0:	629c      	str	r4, [r3, #40]	; 0x28
	__asm__ volatile(
    2eb2:	f382 8811 	msr	BASEPRI, r2
    2eb6:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&z_thread_monitor_lock, key);
#endif
#ifdef CONFIG_THREAD_NAME
	if (name != NULL) {
    2eba:	f1bb 0f00 	cmp.w	fp, #0
    2ebe:	d013      	beq.n	2ee8 <z_setup_new_thread+0xb4>
		strncpy(new_thread->name, name,
    2ec0:	221f      	movs	r2, #31
    2ec2:	4659      	mov	r1, fp
    2ec4:	f104 0074 	add.w	r0, r4, #116	; 0x74
    2ec8:	f001 f99c 	bl	4204 <strncpy>
			CONFIG_THREAD_MAX_NAME_LEN - 1);
		/* Ensure NULL termination, truncate if longer */
		new_thread->name[CONFIG_THREAD_MAX_NAME_LEN - 1] = '\0';
    2ecc:	2300      	movs	r3, #0
    2ece:	f884 3093 	strb.w	r3, [r4, #147]	; 0x93
		new_thread->base.cpu_mask = -1; /* allow all cpus */
	}
#endif
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	/* _current may be null if the dummy thread is not used */
	if (!_current) {
    2ed2:	4b09      	ldr	r3, [pc, #36]	; (2ef8 <z_setup_new_thread+0xc4>)
    2ed4:	689b      	ldr	r3, [r3, #8]
    2ed6:	b15b      	cbz	r3, 2ef0 <z_setup_new_thread+0xbc>
	}
#endif
#ifdef CONFIG_SCHED_DEADLINE
	new_thread->base.prio_deadline = 0;
#endif
	new_thread->resource_pool = _current->resource_pool;
    2ed8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
    2edc:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4

	SYS_PORT_TRACING_OBJ_FUNC(k_thread, create, new_thread);

	return stack_ptr;
}
    2ee0:	4628      	mov	r0, r5
    2ee2:	b005      	add	sp, #20
    2ee4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		new_thread->name[0] = '\0';
    2ee8:	2300      	movs	r3, #0
    2eea:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
    2eee:	e7f0      	b.n	2ed2 <z_setup_new_thread+0x9e>
		new_thread->resource_pool = NULL;
    2ef0:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
		return stack_ptr;
    2ef4:	e7f4      	b.n	2ee0 <z_setup_new_thread+0xac>
    2ef6:	bf00      	nop
    2ef8:	2000035c 	.word	0x2000035c

00002efc <z_init_static_threads>:
	}
}
#endif /* CONFIG_USERSPACE */

void z_init_static_threads(void)
{
    2efc:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
    2f00:	b086      	sub	sp, #24
	_FOREACH_STATIC_THREAD(thread_data) {
    2f02:	4c23      	ldr	r4, [pc, #140]	; (2f90 <z_init_static_threads+0x94>)
    2f04:	4b23      	ldr	r3, [pc, #140]	; (2f94 <z_init_static_threads+0x98>)
    2f06:	429c      	cmp	r4, r3
    2f08:	d215      	bcs.n	2f36 <z_init_static_threads+0x3a>
		z_setup_new_thread(
    2f0a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    2f0c:	9305      	str	r3, [sp, #20]
    2f0e:	6a23      	ldr	r3, [r4, #32]
    2f10:	9304      	str	r3, [sp, #16]
    2f12:	69e3      	ldr	r3, [r4, #28]
    2f14:	9303      	str	r3, [sp, #12]
    2f16:	69a3      	ldr	r3, [r4, #24]
    2f18:	9302      	str	r3, [sp, #8]
    2f1a:	6963      	ldr	r3, [r4, #20]
    2f1c:	9301      	str	r3, [sp, #4]
    2f1e:	6923      	ldr	r3, [r4, #16]
    2f20:	9300      	str	r3, [sp, #0]
    2f22:	68e3      	ldr	r3, [r4, #12]
    2f24:	68a2      	ldr	r2, [r4, #8]
    2f26:	6861      	ldr	r1, [r4, #4]
    2f28:	6820      	ldr	r0, [r4, #0]
    2f2a:	f7ff ff83 	bl	2e34 <z_setup_new_thread>
			thread_data->init_p3,
			thread_data->init_prio,
			thread_data->init_options,
			thread_data->init_name);

		thread_data->init_thread->init_data = thread_data;
    2f2e:	6823      	ldr	r3, [r4, #0]
    2f30:	655c      	str	r4, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
    2f32:	3430      	adds	r4, #48	; 0x30
    2f34:	e7e6      	b.n	2f04 <z_init_static_threads+0x8>
	 * until they are all started.
	 *
	 * Note that static threads defined using the legacy API have a
	 * delay of K_FOREVER.
	 */
	k_sched_lock();
    2f36:	f000 f913 	bl	3160 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
    2f3a:	4c15      	ldr	r4, [pc, #84]	; (2f90 <z_init_static_threads+0x94>)
    2f3c:	e01b      	b.n	2f76 <z_init_static_threads+0x7a>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
			schedule_new_thread(thread_data->init_thread,
    2f3e:	6826      	ldr	r6, [r4, #0]
					    K_MSEC(thread_data->init_delay));
    2f40:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    2f44:	ea4f 79e3 	mov.w	r9, r3, asr #31
    2f48:	ea4f 31c9 	mov.w	r1, r9, lsl #15
    2f4c:	ea41 4153 	orr.w	r1, r1, r3, lsr #17
    2f50:	03d8      	lsls	r0, r3, #15
    2f52:	f240 35e7 	movw	r5, #999	; 0x3e7
    2f56:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    2f5a:	2300      	movs	r3, #0
    2f5c:	1940      	adds	r0, r0, r5
    2f5e:	f04f 0500 	mov.w	r5, #0
    2f62:	eb45 0101 	adc.w	r1, r5, r1
    2f66:	f7fd f8a7 	bl	b8 <__aeabi_uldivmod>
    2f6a:	4602      	mov	r2, r0
    2f6c:	460b      	mov	r3, r1
			schedule_new_thread(thread_data->init_thread,
    2f6e:	4630      	mov	r0, r6
    2f70:	f7ff ff4e 	bl	2e10 <schedule_new_thread>
	_FOREACH_STATIC_THREAD(thread_data) {
    2f74:	3430      	adds	r4, #48	; 0x30
    2f76:	4b07      	ldr	r3, [pc, #28]	; (2f94 <z_init_static_threads+0x98>)
    2f78:	429c      	cmp	r4, r3
    2f7a:	d204      	bcs.n	2f86 <z_init_static_threads+0x8a>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
    2f7c:	6a63      	ldr	r3, [r4, #36]	; 0x24
    2f7e:	f1b3 3fff 	cmp.w	r3, #4294967295
    2f82:	d0f7      	beq.n	2f74 <z_init_static_threads+0x78>
    2f84:	e7db      	b.n	2f3e <z_init_static_threads+0x42>
		}
	}
	k_sched_unlock();
    2f86:	f000 fa89 	bl	349c <k_sched_unlock>
}
    2f8a:	b006      	add	sp, #24
    2f8c:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
    2f90:	20000034 	.word	0x20000034
    2f94:	20000034 	.word	0x20000034

00002f98 <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
    2f98:	b508      	push	{r3, lr}
    2f9a:	e001      	b.n	2fa0 <idle+0x8>
	arch_cpu_idle();
    2f9c:	f7fe f942 	bl	1224 <arch_cpu_idle>
	__asm__ volatile(
    2fa0:	f04f 0220 	mov.w	r2, #32
    2fa4:	f3ef 8311 	mrs	r3, BASEPRI
    2fa8:	f382 8812 	msr	BASEPRI_MAX, r2
    2fac:	f3bf 8f6f 	isb	sy
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
    2fb0:	f002 fa4e 	bl	5450 <z_get_next_timeout_expiry>
    2fb4:	4b03      	ldr	r3, [pc, #12]	; (2fc4 <idle+0x2c>)
    2fb6:	6198      	str	r0, [r3, #24]
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (pm_system_suspend(_kernel.idle) == false) {
    2fb8:	f7fe f870 	bl	109c <pm_system_suspend>
    2fbc:	2800      	cmp	r0, #0
    2fbe:	d1ef      	bne.n	2fa0 <idle+0x8>
    2fc0:	e7ec      	b.n	2f9c <idle+0x4>
    2fc2:	bf00      	nop
    2fc4:	2000035c 	.word	0x2000035c

00002fc8 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
    2fc8:	b538      	push	{r3, r4, r5, lr}
    2fca:	4604      	mov	r4, r0
    2fcc:	f04f 0320 	mov.w	r3, #32
    2fd0:	f3ef 8511 	mrs	r5, BASEPRI
    2fd4:	f383 8812 	msr	BASEPRI_MAX, r3
    2fd8:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
    2fdc:	f002 f9d4 	bl	5388 <z_unpend_first_thread>

	if (thread != NULL) {
    2fe0:	b148      	cbz	r0, 2ff6 <z_impl_k_sem_give+0x2e>
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
    2fe2:	2200      	movs	r2, #0
    2fe4:	f8c0 20ac 	str.w	r2, [r0, #172]	; 0xac
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
    2fe8:	f002 f90c 	bl	5204 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
    2fec:	4629      	mov	r1, r5
    2fee:	4807      	ldr	r0, [pc, #28]	; (300c <z_impl_k_sem_give+0x44>)
    2ff0:	f000 f89a 	bl	3128 <z_reschedule>

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
    2ff4:	bd38      	pop	{r3, r4, r5, pc}
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    2ff6:	68a3      	ldr	r3, [r4, #8]
    2ff8:	68e2      	ldr	r2, [r4, #12]
    2ffa:	4293      	cmp	r3, r2
    2ffc:	d003      	beq.n	3006 <z_impl_k_sem_give+0x3e>
    2ffe:	2201      	movs	r2, #1
    3000:	4413      	add	r3, r2
    3002:	60a3      	str	r3, [r4, #8]
}
    3004:	e7f2      	b.n	2fec <z_impl_k_sem_give+0x24>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    3006:	2200      	movs	r2, #0
    3008:	e7fa      	b.n	3000 <z_impl_k_sem_give+0x38>
    300a:	bf00      	nop
    300c:	20000388 	.word	0x20000388

00003010 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
    3010:	b530      	push	{r4, r5, lr}
    3012:	b083      	sub	sp, #12
    3014:	461d      	mov	r5, r3
    3016:	f04f 0320 	mov.w	r3, #32
    301a:	f3ef 8111 	mrs	r1, BASEPRI
    301e:	f383 8812 	msr	BASEPRI_MAX, r3
    3022:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
    3026:	6883      	ldr	r3, [r0, #8]
    3028:	b143      	cbz	r3, 303c <z_impl_k_sem_take+0x2c>
		sem->count--;
    302a:	3b01      	subs	r3, #1
    302c:	6083      	str	r3, [r0, #8]
	__asm__ volatile(
    302e:	f381 8811 	msr	BASEPRI, r1
    3032:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
    3036:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
    3038:	b003      	add	sp, #12
    303a:	bd30      	pop	{r4, r5, pc}
    303c:	4614      	mov	r4, r2
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    303e:	ea54 0305 	orrs.w	r3, r4, r5
    3042:	d006      	beq.n	3052 <z_impl_k_sem_take+0x42>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
    3044:	e9cd 4500 	strd	r4, r5, [sp]
    3048:	4602      	mov	r2, r0
    304a:	4805      	ldr	r0, [pc, #20]	; (3060 <z_impl_k_sem_take+0x50>)
    304c:	f000 f9d0 	bl	33f0 <z_pend_curr>
	return ret;
    3050:	e7f2      	b.n	3038 <z_impl_k_sem_take+0x28>
    3052:	f381 8811 	msr	BASEPRI, r1
    3056:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
    305a:	f06f 000f 	mvn.w	r0, #15
    305e:	e7eb      	b.n	3038 <z_impl_k_sem_take+0x28>
    3060:	20000388 	.word	0x20000388

00003064 <add_thread_timeout>:
		z_priq_wait_add(&wait_q->waitq, thread);
	}
}

static void add_thread_timeout(struct k_thread *thread, k_timeout_t timeout)
{
    3064:	b538      	push	{r3, r4, r5, lr}
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    3066:	f1b3 3fff 	cmp.w	r3, #4294967295
    306a:	bf08      	it	eq
    306c:	f1b2 3fff 	cmpeq.w	r2, #4294967295
    3070:	d100      	bne.n	3074 <add_thread_timeout+0x10>
		z_add_thread_timeout(thread, timeout);
	}
}
    3072:	bd38      	pop	{r3, r4, r5, pc}
    3074:	4902      	ldr	r1, [pc, #8]	; (3080 <add_thread_timeout+0x1c>)
    3076:	3018      	adds	r0, #24
    3078:	f000 fbe0 	bl	383c <z_add_timeout>
    307c:	e7f9      	b.n	3072 <add_thread_timeout+0xe>
    307e:	bf00      	nop
    3080:	0000523d 	.word	0x0000523d

00003084 <z_reset_time_slice>:
{
    3084:	b508      	push	{r3, lr}
	if (slice_time != 0) {
    3086:	4b08      	ldr	r3, [pc, #32]	; (30a8 <z_reset_time_slice+0x24>)
    3088:	681b      	ldr	r3, [r3, #0]
    308a:	b903      	cbnz	r3, 308e <z_reset_time_slice+0xa>
}
    308c:	bd08      	pop	{r3, pc}
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
    308e:	f7ff facb 	bl	2628 <sys_clock_elapsed>
    3092:	4603      	mov	r3, r0
    3094:	4a04      	ldr	r2, [pc, #16]	; (30a8 <z_reset_time_slice+0x24>)
    3096:	6810      	ldr	r0, [r2, #0]
    3098:	4403      	add	r3, r0
    309a:	4a04      	ldr	r2, [pc, #16]	; (30ac <z_reset_time_slice+0x28>)
    309c:	6113      	str	r3, [r2, #16]
		z_set_timeout_expiry(slice_time, false);
    309e:	2100      	movs	r1, #0
    30a0:	f002 f9ec 	bl	547c <z_set_timeout_expiry>
}
    30a4:	e7f2      	b.n	308c <z_reset_time_slice+0x8>
    30a6:	bf00      	nop
    30a8:	20000390 	.word	0x20000390
    30ac:	2000035c 	.word	0x2000035c

000030b0 <k_sched_time_slice_set>:
{
    30b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    30b4:	4606      	mov	r6, r0
    30b6:	4688      	mov	r8, r1
	LOCKED(&sched_spinlock) {
    30b8:	2300      	movs	r3, #0
	__asm__ volatile(
    30ba:	f04f 0220 	mov.w	r2, #32
    30be:	f3ef 8711 	mrs	r7, BASEPRI
    30c2:	f382 8812 	msr	BASEPRI_MAX, r2
    30c6:	f3bf 8f6f 	isb	sy
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
    30ca:	e009      	b.n	30e0 <k_sched_time_slice_set+0x30>
		slice_max_prio = prio;
    30cc:	4b13      	ldr	r3, [pc, #76]	; (311c <k_sched_time_slice_set+0x6c>)
    30ce:	f8c3 8000 	str.w	r8, [r3]
		z_reset_time_slice();
    30d2:	f7ff ffd7 	bl	3084 <z_reset_time_slice>
	__asm__ volatile(
    30d6:	f387 8811 	msr	BASEPRI, r7
    30da:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    30de:	2301      	movs	r3, #1
    30e0:	b9cb      	cbnz	r3, 3116 <k_sched_time_slice_set+0x66>
		_current_cpu->slice_ticks = 0;
    30e2:	2300      	movs	r3, #0
    30e4:	4a0e      	ldr	r2, [pc, #56]	; (3120 <k_sched_time_slice_set+0x70>)
    30e6:	6113      	str	r3, [r2, #16]
			return (uint32_t)((t * to_hz + off) / from_hz);
    30e8:	0c75      	lsrs	r5, r6, #17
    30ea:	03f4      	lsls	r4, r6, #15
    30ec:	f240 30e7 	movw	r0, #999	; 0x3e7
    30f0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    30f4:	2300      	movs	r3, #0
    30f6:	1820      	adds	r0, r4, r0
    30f8:	f04f 0100 	mov.w	r1, #0
    30fc:	eb45 0101 	adc.w	r1, r5, r1
    3100:	f7fc ffda 	bl	b8 <__aeabi_uldivmod>
		slice_time = k_ms_to_ticks_ceil32(slice);
    3104:	4b07      	ldr	r3, [pc, #28]	; (3124 <k_sched_time_slice_set+0x74>)
    3106:	6018      	str	r0, [r3, #0]
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
    3108:	2e00      	cmp	r6, #0
    310a:	dddf      	ble.n	30cc <k_sched_time_slice_set+0x1c>
			slice_time = MAX(2, slice_time);
    310c:	2802      	cmp	r0, #2
    310e:	bfb8      	it	lt
    3110:	2002      	movlt	r0, #2
    3112:	6018      	str	r0, [r3, #0]
    3114:	e7da      	b.n	30cc <k_sched_time_slice_set+0x1c>
}
    3116:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    311a:	bf00      	nop
    311c:	2000038c 	.word	0x2000038c
    3120:	2000035c 	.word	0x2000035c
    3124:	20000390 	.word	0x20000390

00003128 <z_reschedule>:
	return new_thread != _current;
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
    3128:	b508      	push	{r3, lr}
	if (resched(key.key) && need_swap()) {
    312a:	4608      	mov	r0, r1
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    312c:	b921      	cbnz	r1, 3138 <z_reschedule+0x10>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    312e:	f3ef 8305 	mrs	r3, IPSR
    3132:	b913      	cbnz	r3, 313a <z_reschedule+0x12>
    3134:	2101      	movs	r1, #1
    3136:	e000      	b.n	313a <z_reschedule+0x12>
    3138:	2100      	movs	r1, #0
	if (resched(key.key) && need_swap()) {
    313a:	f011 0f01 	tst.w	r1, #1
    313e:	d007      	beq.n	3150 <z_reschedule+0x28>
	new_thread = _kernel.ready_q.cache;
    3140:	4b06      	ldr	r3, [pc, #24]	; (315c <z_reschedule+0x34>)
    3142:	69da      	ldr	r2, [r3, #28]
	return new_thread != _current;
    3144:	689b      	ldr	r3, [r3, #8]
	if (resched(key.key) && need_swap()) {
    3146:	429a      	cmp	r2, r3
    3148:	d002      	beq.n	3150 <z_reschedule+0x28>
	ret = arch_swap(key);
    314a:	f7fe f8d1 	bl	12f0 <arch_swap>
		z_swap(lock, key);
    314e:	e003      	b.n	3158 <z_reschedule+0x30>
    3150:	f380 8811 	msr	BASEPRI, r0
    3154:	f3bf 8f6f 	isb	sy
	} else {
		k_spin_unlock(lock, key);
	}
}
    3158:	bd08      	pop	{r3, pc}
    315a:	bf00      	nop
    315c:	2000035c 	.word	0x2000035c

00003160 <k_sched_lock>:
	}
}

void k_sched_lock(void)
{
	LOCKED(&sched_spinlock) {
    3160:	2300      	movs	r3, #0
	__asm__ volatile(
    3162:	f04f 0220 	mov.w	r2, #32
    3166:	f3ef 8111 	mrs	r1, BASEPRI
    316a:	f382 8812 	msr	BASEPRI_MAX, r2
    316e:	f3bf 8f6f 	isb	sy
    3172:	b953      	cbnz	r3, 318a <k_sched_lock+0x2a>
static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1U, "");

	--_current->base.sched_locked;
    3174:	4b05      	ldr	r3, [pc, #20]	; (318c <k_sched_lock+0x2c>)
    3176:	689a      	ldr	r2, [r3, #8]
    3178:	7bd3      	ldrb	r3, [r2, #15]
    317a:	3b01      	subs	r3, #1
    317c:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
    317e:	f381 8811 	msr	BASEPRI, r1
    3182:	f3bf 8f6f 	isb	sy
    3186:	2301      	movs	r3, #1
    3188:	e7f3      	b.n	3172 <k_sched_lock+0x12>
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
    318a:	4770      	bx	lr
    318c:	2000035c 	.word	0x2000035c

00003190 <update_cache>:
{
    3190:	b538      	push	{r3, r4, r5, lr}
    3192:	4604      	mov	r4, r0
	return _priq_run_best(curr_cpu_runq());
    3194:	480f      	ldr	r0, [pc, #60]	; (31d4 <update_cache+0x44>)
    3196:	f002 f82e 	bl	51f6 <z_priq_dumb_best>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
    319a:	4605      	mov	r5, r0
    319c:	b170      	cbz	r0, 31bc <update_cache+0x2c>
	if (preempt_ok != 0) {
    319e:	b984      	cbnz	r4, 31c2 <update_cache+0x32>
	if (z_is_thread_prevented_from_running(_current)) {
    31a0:	4b0d      	ldr	r3, [pc, #52]	; (31d8 <update_cache+0x48>)
    31a2:	689b      	ldr	r3, [r3, #8]
	uint8_t state = thread->base.thread_state;
    31a4:	7b5a      	ldrb	r2, [r3, #13]
    31a6:	f012 0f1f 	tst.w	r2, #31
    31aa:	d10a      	bne.n	31c2 <update_cache+0x32>
 * @return true if node is linked into a list, false if it is not
 */

static inline bool sys_dnode_is_linked(const sys_dnode_t *node)
{
	return node->next != NULL;
    31ac:	69aa      	ldr	r2, [r5, #24]
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
    31ae:	b942      	cbnz	r2, 31c2 <update_cache+0x32>
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
    31b0:	89da      	ldrh	r2, [r3, #14]
	if (is_preempt(_current) || is_metairq(thread)) {
    31b2:	2a7f      	cmp	r2, #127	; 0x7f
    31b4:	d905      	bls.n	31c2 <update_cache+0x32>
		_kernel.ready_q.cache = _current;
    31b6:	4a08      	ldr	r2, [pc, #32]	; (31d8 <update_cache+0x48>)
    31b8:	61d3      	str	r3, [r2, #28]
    31ba:	e00a      	b.n	31d2 <update_cache+0x42>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
    31bc:	4b06      	ldr	r3, [pc, #24]	; (31d8 <update_cache+0x48>)
    31be:	68dd      	ldr	r5, [r3, #12]
    31c0:	e7ed      	b.n	319e <update_cache+0xe>
		if (thread != _current) {
    31c2:	4b05      	ldr	r3, [pc, #20]	; (31d8 <update_cache+0x48>)
    31c4:	689b      	ldr	r3, [r3, #8]
    31c6:	42ab      	cmp	r3, r5
    31c8:	d001      	beq.n	31ce <update_cache+0x3e>
			z_reset_time_slice();
    31ca:	f7ff ff5b 	bl	3084 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
    31ce:	4b02      	ldr	r3, [pc, #8]	; (31d8 <update_cache+0x48>)
    31d0:	61dd      	str	r5, [r3, #28]
}
    31d2:	bd38      	pop	{r3, r4, r5, pc}
    31d4:	2000037c 	.word	0x2000037c
    31d8:	2000035c 	.word	0x2000035c

000031dc <move_thread_to_end_of_prio_q>:
{
    31dc:	b538      	push	{r3, r4, r5, lr}
    31de:	4605      	mov	r5, r0
	return (thread->base.thread_state & state) != 0U;
    31e0:	7b42      	ldrb	r2, [r0, #13]
	if (z_is_thread_queued(thread)) {
    31e2:	f990 300d 	ldrsb.w	r3, [r0, #13]
    31e6:	2b00      	cmp	r3, #0
    31e8:	db28      	blt.n	323c <move_thread_to_end_of_prio_q+0x60>
	thread->base.thread_state |= _THREAD_QUEUED;
    31ea:	7b6b      	ldrb	r3, [r5, #13]
    31ec:	f063 037f 	orn	r3, r3, #127	; 0x7f
    31f0:	736b      	strb	r3, [r5, #13]
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    31f2:	4b1a      	ldr	r3, [pc, #104]	; (325c <move_thread_to_end_of_prio_q+0x80>)
    31f4:	f853 4f20 	ldr.w	r4, [r3, #32]!
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    31f8:	429c      	cmp	r4, r3
    31fa:	d02d      	beq.n	3258 <move_thread_to_end_of_prio_q+0x7c>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    31fc:	b16c      	cbz	r4, 321a <move_thread_to_end_of_prio_q+0x3e>
		if (z_sched_prio_cmp(thread, t) > 0) {
    31fe:	4621      	mov	r1, r4
    3200:	4628      	mov	r0, r5
    3202:	f001 ffb2 	bl	516a <z_sched_prio_cmp>
    3206:	2800      	cmp	r0, #0
    3208:	dc20      	bgt.n	324c <move_thread_to_end_of_prio_q+0x70>
 */

static inline sys_dnode_t *sys_dlist_peek_next(sys_dlist_t *list,
					       sys_dnode_t *node)
{
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    320a:	b134      	cbz	r4, 321a <move_thread_to_end_of_prio_q+0x3e>
	return (node == list->tail) ? NULL : node->next;
    320c:	4b13      	ldr	r3, [pc, #76]	; (325c <move_thread_to_end_of_prio_q+0x80>)
    320e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    3210:	429c      	cmp	r4, r3
    3212:	d002      	beq.n	321a <move_thread_to_end_of_prio_q+0x3e>
    3214:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    3216:	2c00      	cmp	r4, #0
    3218:	d1f0      	bne.n	31fc <move_thread_to_end_of_prio_q+0x20>
 * @return N/A
 */

static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	sys_dnode_t *const tail = list->tail;
    321a:	4b10      	ldr	r3, [pc, #64]	; (325c <move_thread_to_end_of_prio_q+0x80>)
    321c:	6a5a      	ldr	r2, [r3, #36]	; 0x24

	node->next = list;
    321e:	f103 0120 	add.w	r1, r3, #32
    3222:	6029      	str	r1, [r5, #0]
	node->prev = tail;
    3224:	606a      	str	r2, [r5, #4]

	tail->next = node;
    3226:	6015      	str	r5, [r2, #0]
	list->tail = node;
    3228:	625d      	str	r5, [r3, #36]	; 0x24
	update_cache(thread == _current);
    322a:	4b0c      	ldr	r3, [pc, #48]	; (325c <move_thread_to_end_of_prio_q+0x80>)
    322c:	6898      	ldr	r0, [r3, #8]
    322e:	42a8      	cmp	r0, r5
    3230:	bf14      	ite	ne
    3232:	2000      	movne	r0, #0
    3234:	2001      	moveq	r0, #1
    3236:	f7ff ffab 	bl	3190 <update_cache>
}
    323a:	bd38      	pop	{r3, r4, r5, pc}
	thread->base.thread_state &= ~_THREAD_QUEUED;
    323c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    3240:	7342      	strb	r2, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
    3242:	4601      	mov	r1, r0
    3244:	4806      	ldr	r0, [pc, #24]	; (3260 <move_thread_to_end_of_prio_q+0x84>)
    3246:	f001 ffce 	bl	51e6 <z_priq_dumb_remove>
}
    324a:	e7ce      	b.n	31ea <move_thread_to_end_of_prio_q+0xe>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
    324c:	6863      	ldr	r3, [r4, #4]

	node->prev = prev;
    324e:	606b      	str	r3, [r5, #4]
	node->next = successor;
    3250:	602c      	str	r4, [r5, #0]
	prev->next = node;
    3252:	601d      	str	r5, [r3, #0]
	successor->prev = node;
    3254:	6065      	str	r5, [r4, #4]
}
    3256:	e7e8      	b.n	322a <move_thread_to_end_of_prio_q+0x4e>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    3258:	2400      	movs	r4, #0
    325a:	e7cf      	b.n	31fc <move_thread_to_end_of_prio_q+0x20>
    325c:	2000035c 	.word	0x2000035c
    3260:	2000037c 	.word	0x2000037c

00003264 <z_time_slice>:
{
    3264:	b510      	push	{r4, lr}
	__asm__ volatile(
    3266:	f04f 0320 	mov.w	r3, #32
    326a:	f3ef 8411 	mrs	r4, BASEPRI
    326e:	f383 8812 	msr	BASEPRI_MAX, r3
    3272:	f3bf 8f6f 	isb	sy
	if (pending_current == _current) {
    3276:	4b1c      	ldr	r3, [pc, #112]	; (32e8 <z_time_slice+0x84>)
    3278:	689b      	ldr	r3, [r3, #8]
    327a:	4a1c      	ldr	r2, [pc, #112]	; (32ec <z_time_slice+0x88>)
    327c:	6812      	ldr	r2, [r2, #0]
    327e:	4293      	cmp	r3, r2
    3280:	d01d      	beq.n	32be <z_time_slice+0x5a>
	pending_current = NULL;
    3282:	4a1a      	ldr	r2, [pc, #104]	; (32ec <z_time_slice+0x88>)
    3284:	2100      	movs	r1, #0
    3286:	6011      	str	r1, [r2, #0]
	if (slice_time && sliceable(_current)) {
    3288:	4a19      	ldr	r2, [pc, #100]	; (32f0 <z_time_slice+0x8c>)
    328a:	6812      	ldr	r2, [r2, #0]
    328c:	b322      	cbz	r2, 32d8 <z_time_slice+0x74>
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
    328e:	89da      	ldrh	r2, [r3, #14]
		&& !z_is_idle_thread_object(thread);
    3290:	2a7f      	cmp	r2, #127	; 0x7f
    3292:	d821      	bhi.n	32d8 <z_time_slice+0x74>
	uint8_t state = thread->base.thread_state;
    3294:	7b5a      	ldrb	r2, [r3, #13]
		&& !z_is_thread_prevented_from_running(thread)
    3296:	f012 0f1f 	tst.w	r2, #31
    329a:	d11d      	bne.n	32d8 <z_time_slice+0x74>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
    329c:	f993 100e 	ldrsb.w	r1, [r3, #14]
    32a0:	4a14      	ldr	r2, [pc, #80]	; (32f4 <z_time_slice+0x90>)
    32a2:	6812      	ldr	r2, [r2, #0]
    32a4:	4291      	cmp	r1, r2
    32a6:	db17      	blt.n	32d8 <z_time_slice+0x74>
		&& !z_is_idle_thread_object(thread);
    32a8:	4a13      	ldr	r2, [pc, #76]	; (32f8 <z_time_slice+0x94>)
    32aa:	4293      	cmp	r3, r2
    32ac:	d014      	beq.n	32d8 <z_time_slice+0x74>
		if (ticks >= _current_cpu->slice_ticks) {
    32ae:	4a0e      	ldr	r2, [pc, #56]	; (32e8 <z_time_slice+0x84>)
    32b0:	6912      	ldr	r2, [r2, #16]
    32b2:	4282      	cmp	r2, r0
    32b4:	dd0a      	ble.n	32cc <z_time_slice+0x68>
			_current_cpu->slice_ticks -= ticks;
    32b6:	1a10      	subs	r0, r2, r0
    32b8:	4b0b      	ldr	r3, [pc, #44]	; (32e8 <z_time_slice+0x84>)
    32ba:	6118      	str	r0, [r3, #16]
    32bc:	e00f      	b.n	32de <z_time_slice+0x7a>
		z_reset_time_slice();
    32be:	f7ff fee1 	bl	3084 <z_reset_time_slice>
	__asm__ volatile(
    32c2:	f384 8811 	msr	BASEPRI, r4
    32c6:	f3bf 8f6f 	isb	sy
		return;
    32ca:	e00c      	b.n	32e6 <z_time_slice+0x82>
			move_thread_to_end_of_prio_q(_current);
    32cc:	4618      	mov	r0, r3
    32ce:	f7ff ff85 	bl	31dc <move_thread_to_end_of_prio_q>
			z_reset_time_slice();
    32d2:	f7ff fed7 	bl	3084 <z_reset_time_slice>
    32d6:	e002      	b.n	32de <z_time_slice+0x7a>
		_current_cpu->slice_ticks = 0;
    32d8:	4b03      	ldr	r3, [pc, #12]	; (32e8 <z_time_slice+0x84>)
    32da:	2200      	movs	r2, #0
    32dc:	611a      	str	r2, [r3, #16]
    32de:	f384 8811 	msr	BASEPRI, r4
    32e2:	f3bf 8f6f 	isb	sy
}
    32e6:	bd10      	pop	{r4, pc}
    32e8:	2000035c 	.word	0x2000035c
    32ec:	20000388 	.word	0x20000388
    32f0:	20000390 	.word	0x20000390
    32f4:	2000038c 	.word	0x2000038c
    32f8:	20000130 	.word	0x20000130

000032fc <ready_thread>:
{
    32fc:	b538      	push	{r3, r4, r5, lr}
	return (thread->base.thread_state & state) != 0U;
    32fe:	7b43      	ldrb	r3, [r0, #13]
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
    3300:	f990 200d 	ldrsb.w	r2, [r0, #13]
    3304:	2a00      	cmp	r2, #0
    3306:	db2d      	blt.n	3364 <ready_thread+0x68>
    3308:	4604      	mov	r4, r0
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    330a:	f013 0f1f 	tst.w	r3, #31
    330e:	d105      	bne.n	331c <ready_thread+0x20>
	return node->next != NULL;
    3310:	6982      	ldr	r2, [r0, #24]
    3312:	b10a      	cbz	r2, 3318 <ready_thread+0x1c>
    3314:	2200      	movs	r2, #0
    3316:	e002      	b.n	331e <ready_thread+0x22>
    3318:	2201      	movs	r2, #1
    331a:	e000      	b.n	331e <ready_thread+0x22>
    331c:	2200      	movs	r2, #0
    331e:	b30a      	cbz	r2, 3364 <ready_thread+0x68>
	thread->base.thread_state |= _THREAD_QUEUED;
    3320:	f063 037f 	orn	r3, r3, #127	; 0x7f
    3324:	7363      	strb	r3, [r4, #13]
	return list->head == list;
    3326:	4b14      	ldr	r3, [pc, #80]	; (3378 <ready_thread+0x7c>)
    3328:	f853 5f20 	ldr.w	r5, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    332c:	429d      	cmp	r5, r3
    332e:	d020      	beq.n	3372 <ready_thread+0x76>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    3330:	b16d      	cbz	r5, 334e <ready_thread+0x52>
		if (z_sched_prio_cmp(thread, t) > 0) {
    3332:	4629      	mov	r1, r5
    3334:	4620      	mov	r0, r4
    3336:	f001 ff18 	bl	516a <z_sched_prio_cmp>
    333a:	2800      	cmp	r0, #0
    333c:	dc13      	bgt.n	3366 <ready_thread+0x6a>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    333e:	b135      	cbz	r5, 334e <ready_thread+0x52>
	return (node == list->tail) ? NULL : node->next;
    3340:	4b0d      	ldr	r3, [pc, #52]	; (3378 <ready_thread+0x7c>)
    3342:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    3344:	429d      	cmp	r5, r3
    3346:	d002      	beq.n	334e <ready_thread+0x52>
    3348:	682d      	ldr	r5, [r5, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    334a:	2d00      	cmp	r5, #0
    334c:	d1f0      	bne.n	3330 <ready_thread+0x34>
	sys_dnode_t *const tail = list->tail;
    334e:	4b0a      	ldr	r3, [pc, #40]	; (3378 <ready_thread+0x7c>)
    3350:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	node->next = list;
    3352:	f103 0120 	add.w	r1, r3, #32
    3356:	6021      	str	r1, [r4, #0]
	node->prev = tail;
    3358:	6062      	str	r2, [r4, #4]
	tail->next = node;
    335a:	6014      	str	r4, [r2, #0]
	list->tail = node;
    335c:	625c      	str	r4, [r3, #36]	; 0x24
		update_cache(0);
    335e:	2000      	movs	r0, #0
    3360:	f7ff ff16 	bl	3190 <update_cache>
}
    3364:	bd38      	pop	{r3, r4, r5, pc}
	sys_dnode_t *const prev = successor->prev;
    3366:	686b      	ldr	r3, [r5, #4]
	node->prev = prev;
    3368:	6063      	str	r3, [r4, #4]
	node->next = successor;
    336a:	6025      	str	r5, [r4, #0]
	prev->next = node;
    336c:	601c      	str	r4, [r3, #0]
	successor->prev = node;
    336e:	606c      	str	r4, [r5, #4]
}
    3370:	e7f5      	b.n	335e <ready_thread+0x62>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    3372:	2500      	movs	r5, #0
    3374:	e7dc      	b.n	3330 <ready_thread+0x34>
    3376:	bf00      	nop
    3378:	2000035c 	.word	0x2000035c

0000337c <z_sched_start>:
{
    337c:	b510      	push	{r4, lr}
	__asm__ volatile(
    337e:	f04f 0320 	mov.w	r3, #32
    3382:	f3ef 8411 	mrs	r4, BASEPRI
    3386:	f383 8812 	msr	BASEPRI_MAX, r3
    338a:	f3bf 8f6f 	isb	sy
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
    338e:	7b43      	ldrb	r3, [r0, #13]
	if (z_has_thread_started(thread)) {
    3390:	f013 0f04 	tst.w	r3, #4
    3394:	d104      	bne.n	33a0 <z_sched_start+0x24>
	__asm__ volatile(
    3396:	f384 8811 	msr	BASEPRI, r4
    339a:	f3bf 8f6f 	isb	sy
}
    339e:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
    33a0:	f023 0304 	bic.w	r3, r3, #4
    33a4:	7343      	strb	r3, [r0, #13]
	ready_thread(thread);
    33a6:	f7ff ffa9 	bl	32fc <ready_thread>
	z_reschedule(&sched_spinlock, key);
    33aa:	4621      	mov	r1, r4
    33ac:	4801      	ldr	r0, [pc, #4]	; (33b4 <z_sched_start+0x38>)
    33ae:	f7ff febb 	bl	3128 <z_reschedule>
    33b2:	e7f4      	b.n	339e <z_sched_start+0x22>
    33b4:	2000038c 	.word	0x2000038c

000033b8 <unready_thread>:
{
    33b8:	b510      	push	{r4, lr}
    33ba:	4604      	mov	r4, r0
	return (thread->base.thread_state & state) != 0U;
    33bc:	7b42      	ldrb	r2, [r0, #13]
	if (z_is_thread_queued(thread)) {
    33be:	f990 300d 	ldrsb.w	r3, [r0, #13]
    33c2:	2b00      	cmp	r3, #0
    33c4:	db08      	blt.n	33d8 <unready_thread+0x20>
	update_cache(thread == _current);
    33c6:	4b08      	ldr	r3, [pc, #32]	; (33e8 <unready_thread+0x30>)
    33c8:	6898      	ldr	r0, [r3, #8]
    33ca:	42a0      	cmp	r0, r4
    33cc:	bf14      	ite	ne
    33ce:	2000      	movne	r0, #0
    33d0:	2001      	moveq	r0, #1
    33d2:	f7ff fedd 	bl	3190 <update_cache>
}
    33d6:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_QUEUED;
    33d8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    33dc:	7342      	strb	r2, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
    33de:	4601      	mov	r1, r0
    33e0:	4802      	ldr	r0, [pc, #8]	; (33ec <unready_thread+0x34>)
    33e2:	f001 ff00 	bl	51e6 <z_priq_dumb_remove>
}
    33e6:	e7ee      	b.n	33c6 <unready_thread+0xe>
    33e8:	2000035c 	.word	0x2000035c
    33ec:	2000037c 	.word	0x2000037c

000033f0 <z_pend_curr>:
{
    33f0:	b510      	push	{r4, lr}
    33f2:	460c      	mov	r4, r1
    33f4:	4611      	mov	r1, r2
	pending_current = _current;
    33f6:	4b06      	ldr	r3, [pc, #24]	; (3410 <z_pend_curr+0x20>)
    33f8:	6898      	ldr	r0, [r3, #8]
    33fa:	4b06      	ldr	r3, [pc, #24]	; (3414 <z_pend_curr+0x24>)
    33fc:	6018      	str	r0, [r3, #0]
	pend(_current, wait_q, timeout);
    33fe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    3402:	f001 ff79 	bl	52f8 <pend>
    3406:	4620      	mov	r0, r4
    3408:	f7fd ff72 	bl	12f0 <arch_swap>
}
    340c:	bd10      	pop	{r4, pc}
    340e:	bf00      	nop
    3410:	2000035c 	.word	0x2000035c
    3414:	20000388 	.word	0x20000388

00003418 <z_impl_k_thread_suspend>:
{
    3418:	b538      	push	{r3, r4, r5, lr}
    341a:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
    341c:	3018      	adds	r0, #24
    341e:	f001 fff9 	bl	5414 <z_abort_timeout>
	LOCKED(&sched_spinlock) {
    3422:	2300      	movs	r3, #0
	__asm__ volatile(
    3424:	f04f 0220 	mov.w	r2, #32
    3428:	f3ef 8511 	mrs	r5, BASEPRI
    342c:	f382 8812 	msr	BASEPRI_MAX, r2
    3430:	f3bf 8f6f 	isb	sy
    3434:	e010      	b.n	3458 <z_impl_k_thread_suspend+0x40>
	thread->base.thread_state |= _THREAD_SUSPENDED;
    3436:	7b63      	ldrb	r3, [r4, #13]
    3438:	f043 0310 	orr.w	r3, r3, #16
    343c:	7363      	strb	r3, [r4, #13]
		update_cache(thread == _current);
    343e:	4b15      	ldr	r3, [pc, #84]	; (3494 <z_impl_k_thread_suspend+0x7c>)
    3440:	6898      	ldr	r0, [r3, #8]
    3442:	42a0      	cmp	r0, r4
    3444:	bf14      	ite	ne
    3446:	2000      	movne	r0, #0
    3448:	2001      	moveq	r0, #1
    344a:	f7ff fea1 	bl	3190 <update_cache>
	__asm__ volatile(
    344e:	f385 8811 	msr	BASEPRI, r5
    3452:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    3456:	2301      	movs	r3, #1
    3458:	b963      	cbnz	r3, 3474 <z_impl_k_thread_suspend+0x5c>
	return (thread->base.thread_state & state) != 0U;
    345a:	7b62      	ldrb	r2, [r4, #13]
		if (z_is_thread_queued(thread)) {
    345c:	f994 300d 	ldrsb.w	r3, [r4, #13]
    3460:	2b00      	cmp	r3, #0
    3462:	dae8      	bge.n	3436 <z_impl_k_thread_suspend+0x1e>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    3464:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    3468:	7362      	strb	r2, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
    346a:	4621      	mov	r1, r4
    346c:	480a      	ldr	r0, [pc, #40]	; (3498 <z_impl_k_thread_suspend+0x80>)
    346e:	f001 feba 	bl	51e6 <z_priq_dumb_remove>
}
    3472:	e7e0      	b.n	3436 <z_impl_k_thread_suspend+0x1e>
	if (thread == _current) {
    3474:	4b07      	ldr	r3, [pc, #28]	; (3494 <z_impl_k_thread_suspend+0x7c>)
    3476:	689b      	ldr	r3, [r3, #8]
    3478:	42a3      	cmp	r3, r4
    347a:	d000      	beq.n	347e <z_impl_k_thread_suspend+0x66>
}
    347c:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
    347e:	f04f 0320 	mov.w	r3, #32
    3482:	f3ef 8011 	mrs	r0, BASEPRI
    3486:	f383 8812 	msr	BASEPRI_MAX, r3
    348a:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
    348e:	f001 fe95 	bl	51bc <z_reschedule_irqlock>
    3492:	e7f3      	b.n	347c <z_impl_k_thread_suspend+0x64>
    3494:	2000035c 	.word	0x2000035c
    3498:	2000037c 	.word	0x2000037c

0000349c <k_sched_unlock>:

void k_sched_unlock(void)
{
    349c:	b510      	push	{r4, lr}
	LOCKED(&sched_spinlock) {
    349e:	2300      	movs	r3, #0
    34a0:	f04f 0220 	mov.w	r2, #32
    34a4:	f3ef 8411 	mrs	r4, BASEPRI
    34a8:	f382 8812 	msr	BASEPRI_MAX, r2
    34ac:	f3bf 8f6f 	isb	sy
    34b0:	b96b      	cbnz	r3, 34ce <k_sched_unlock+0x32>
		__ASSERT(_current->base.sched_locked != 0U, "");
		__ASSERT(!arch_is_in_isr(), "");

		++_current->base.sched_locked;
    34b2:	4b0c      	ldr	r3, [pc, #48]	; (34e4 <k_sched_unlock+0x48>)
    34b4:	689a      	ldr	r2, [r3, #8]
    34b6:	7bd3      	ldrb	r3, [r2, #15]
    34b8:	3301      	adds	r3, #1
    34ba:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
    34bc:	2000      	movs	r0, #0
    34be:	f7ff fe67 	bl	3190 <update_cache>
	__asm__ volatile(
    34c2:	f384 8811 	msr	BASEPRI, r4
    34c6:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    34ca:	2301      	movs	r3, #1
    34cc:	e7f0      	b.n	34b0 <k_sched_unlock+0x14>
	__asm__ volatile(
    34ce:	f04f 0320 	mov.w	r3, #32
    34d2:	f3ef 8011 	mrs	r0, BASEPRI
    34d6:	f383 8812 	msr	BASEPRI_MAX, r3
    34da:	f3bf 8f6f 	isb	sy
    34de:	f001 fe6d 	bl	51bc <z_reschedule_irqlock>
		_current, _current->base.sched_locked);

	SYS_PORT_TRACING_FUNC(k_thread, sched_unlock);

	z_reschedule_unlocked();
}
    34e2:	bd10      	pop	{r4, pc}
    34e4:	2000035c 	.word	0x2000035c

000034e8 <end_thread>:
#ifdef CONFIG_CMSIS_RTOS_V1
extern void z_thread_cmsis_status_mask_clear(struct k_thread *thread);
#endif

static void end_thread(struct k_thread *thread)
{
    34e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* We hold the lock, and the thread is known not to be running
	 * anywhere.
	 */
	if ((thread->base.thread_state & _THREAD_DEAD) == 0U) {
    34ea:	7b43      	ldrb	r3, [r0, #13]
    34ec:	f013 0f08 	tst.w	r3, #8
    34f0:	d145      	bne.n	357e <end_thread+0x96>
    34f2:	4605      	mov	r5, r0
		thread->base.thread_state |= _THREAD_DEAD;
    34f4:	f043 0308 	orr.w	r3, r3, #8
		thread->base.thread_state &= ~_THREAD_ABORTING;
    34f8:	f003 03df 	and.w	r3, r3, #223	; 0xdf
    34fc:	7343      	strb	r3, [r0, #13]
		if (z_is_thread_queued(thread)) {
    34fe:	f013 0f80 	tst.w	r3, #128	; 0x80
    3502:	d114      	bne.n	352e <end_thread+0x46>
			dequeue_thread(thread);
		}
		if (thread->base.pended_on != NULL) {
    3504:	68ab      	ldr	r3, [r5, #8]
    3506:	b15b      	cbz	r3, 3520 <end_thread+0x38>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
    3508:	4628      	mov	r0, r5
    350a:	f001 fe2c 	bl	5166 <pended_on_thread>
    350e:	4629      	mov	r1, r5
    3510:	f001 fe69 	bl	51e6 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    3514:	7b6b      	ldrb	r3, [r5, #13]
    3516:	f023 0302 	bic.w	r3, r3, #2
    351a:	736b      	strb	r3, [r5, #13]
	thread->base.pended_on = NULL;
    351c:	2300      	movs	r3, #0
    351e:	60ab      	str	r3, [r5, #8]
    3520:	f105 0018 	add.w	r0, r5, #24
    3524:	f001 ff76 	bl	5414 <z_abort_timeout>
			unpend_thread_no_timeout(thread);
		}
		(void)z_abort_thread_timeout(thread);
		unpend_all(&thread->join_queue);
    3528:	f105 0758 	add.w	r7, r5, #88	; 0x58
	while ((thread = z_waitq_head(wait_q)) != NULL) {
    352c:	e01c      	b.n	3568 <end_thread+0x80>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    352e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    3532:	7343      	strb	r3, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
    3534:	4601      	mov	r1, r0
    3536:	4812      	ldr	r0, [pc, #72]	; (3580 <end_thread+0x98>)
    3538:	f001 fe55 	bl	51e6 <z_priq_dumb_remove>
}
    353c:	e7e2      	b.n	3504 <end_thread+0x1c>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
    353e:	4620      	mov	r0, r4
    3540:	f001 fe11 	bl	5166 <pended_on_thread>
    3544:	4621      	mov	r1, r4
    3546:	f001 fe4e 	bl	51e6 <z_priq_dumb_remove>
    354a:	7b63      	ldrb	r3, [r4, #13]
    354c:	f023 0302 	bic.w	r3, r3, #2
    3550:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
    3552:	2600      	movs	r6, #0
    3554:	60a6      	str	r6, [r4, #8]
    3556:	f104 0018 	add.w	r0, r4, #24
    355a:	f001 ff5b 	bl	5414 <z_abort_timeout>
    355e:	f8c4 60ac 	str.w	r6, [r4, #172]	; 0xac
		ready_thread(thread);
    3562:	4620      	mov	r0, r4
    3564:	f7ff feca 	bl	32fc <ready_thread>
	return list->head == list;
    3568:	683c      	ldr	r4, [r7, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    356a:	42bc      	cmp	r4, r7
    356c:	d001      	beq.n	3572 <end_thread+0x8a>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
    356e:	2c00      	cmp	r4, #0
    3570:	d1e5      	bne.n	353e <end_thread+0x56>
		update_cache(1);
    3572:	2001      	movs	r0, #1
    3574:	f7ff fe0c 	bl	3190 <update_cache>

		SYS_PORT_TRACING_FUNC(k_thread, sched_abort, thread);

		z_thread_monitor_exit(thread);
    3578:	4628      	mov	r0, r5
    357a:	f7ff fc29 	bl	2dd0 <z_thread_monitor_exit>
		z_thread_perms_all_clear(thread);
		z_object_uninit(thread->stack_obj);
		z_object_uninit(thread);
#endif
	}
}
    357e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3580:	2000037c 	.word	0x2000037c

00003584 <z_sched_init>:
{
    3584:	b508      	push	{r3, lr}
	init_ready_q(&_kernel.ready_q);
    3586:	4804      	ldr	r0, [pc, #16]	; (3598 <z_sched_init+0x14>)
    3588:	f001 ff29 	bl	53de <init_ready_q>
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
    358c:	2100      	movs	r1, #0
    358e:	4608      	mov	r0, r1
    3590:	f7ff fd8e 	bl	30b0 <k_sched_time_slice_set>
}
    3594:	bd08      	pop	{r3, pc}
    3596:	bf00      	nop
    3598:	20000378 	.word	0x20000378

0000359c <z_impl_k_yield>:
{
    359c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    359e:	f04f 0320 	mov.w	r3, #32
    35a2:	f3ef 8611 	mrs	r6, BASEPRI
    35a6:	f383 8812 	msr	BASEPRI_MAX, r3
    35aa:	f3bf 8f6f 	isb	sy
		dequeue_thread(_current);
    35ae:	4c1c      	ldr	r4, [pc, #112]	; (3620 <z_impl_k_yield+0x84>)
    35b0:	68a1      	ldr	r1, [r4, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
    35b2:	7b4b      	ldrb	r3, [r1, #13]
    35b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    35b8:	734b      	strb	r3, [r1, #13]
	_priq_run_remove(thread_runq(thread), thread);
    35ba:	f104 0720 	add.w	r7, r4, #32
    35be:	4638      	mov	r0, r7
    35c0:	f001 fe11 	bl	51e6 <z_priq_dumb_remove>
	queue_thread(_current);
    35c4:	68a5      	ldr	r5, [r4, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
    35c6:	7b6b      	ldrb	r3, [r5, #13]
    35c8:	f063 037f 	orn	r3, r3, #127	; 0x7f
    35cc:	736b      	strb	r3, [r5, #13]
	return list->head == list;
    35ce:	6a24      	ldr	r4, [r4, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    35d0:	42bc      	cmp	r4, r7
    35d2:	d023      	beq.n	361c <z_impl_k_yield+0x80>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    35d4:	b16c      	cbz	r4, 35f2 <z_impl_k_yield+0x56>
		if (z_sched_prio_cmp(thread, t) > 0) {
    35d6:	4621      	mov	r1, r4
    35d8:	4628      	mov	r0, r5
    35da:	f001 fdc6 	bl	516a <z_sched_prio_cmp>
    35de:	2800      	cmp	r0, #0
    35e0:	dc16      	bgt.n	3610 <z_impl_k_yield+0x74>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    35e2:	b134      	cbz	r4, 35f2 <z_impl_k_yield+0x56>
	return (node == list->tail) ? NULL : node->next;
    35e4:	4b0e      	ldr	r3, [pc, #56]	; (3620 <z_impl_k_yield+0x84>)
    35e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    35e8:	429c      	cmp	r4, r3
    35ea:	d002      	beq.n	35f2 <z_impl_k_yield+0x56>
    35ec:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    35ee:	2c00      	cmp	r4, #0
    35f0:	d1f0      	bne.n	35d4 <z_impl_k_yield+0x38>
	sys_dnode_t *const tail = list->tail;
    35f2:	4b0b      	ldr	r3, [pc, #44]	; (3620 <z_impl_k_yield+0x84>)
    35f4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	node->next = list;
    35f6:	f103 0120 	add.w	r1, r3, #32
    35fa:	6029      	str	r1, [r5, #0]
	node->prev = tail;
    35fc:	606a      	str	r2, [r5, #4]
	tail->next = node;
    35fe:	6015      	str	r5, [r2, #0]
	list->tail = node;
    3600:	625d      	str	r5, [r3, #36]	; 0x24
	update_cache(1);
    3602:	2001      	movs	r0, #1
    3604:	f7ff fdc4 	bl	3190 <update_cache>
    3608:	4630      	mov	r0, r6
    360a:	f7fd fe71 	bl	12f0 <arch_swap>
}
    360e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	sys_dnode_t *const prev = successor->prev;
    3610:	6863      	ldr	r3, [r4, #4]
	node->prev = prev;
    3612:	606b      	str	r3, [r5, #4]
	node->next = successor;
    3614:	602c      	str	r4, [r5, #0]
	prev->next = node;
    3616:	601d      	str	r5, [r3, #0]
	successor->prev = node;
    3618:	6065      	str	r5, [r4, #4]
}
    361a:	e7f2      	b.n	3602 <z_impl_k_yield+0x66>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    361c:	2400      	movs	r4, #0
    361e:	e7d9      	b.n	35d4 <z_impl_k_yield+0x38>
    3620:	2000035c 	.word	0x2000035c

00003624 <z_tick_sleep>:
{
    3624:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3628:	4604      	mov	r4, r0
    362a:	460d      	mov	r5, r1
	if (ticks == 0) {
    362c:	ea54 0105 	orrs.w	r1, r4, r5
    3630:	d037      	beq.n	36a2 <z_tick_sleep+0x7e>
	if (Z_TICK_ABS(ticks) <= 0) {
    3632:	f06f 0101 	mvn.w	r1, #1
    3636:	1a0a      	subs	r2, r1, r0
    3638:	f04f 31ff 	mov.w	r1, #4294967295
    363c:	eb61 0305 	sbc.w	r3, r1, r5
    3640:	2a01      	cmp	r2, #1
    3642:	f173 0300 	sbcs.w	r3, r3, #0
    3646:	db30      	blt.n	36aa <z_tick_sleep+0x86>
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
    3648:	f06f 0601 	mvn.w	r6, #1
    364c:	1a36      	subs	r6, r6, r0
    364e:	f04f 0320 	mov.w	r3, #32
    3652:	f3ef 8811 	mrs	r8, BASEPRI
    3656:	f383 8812 	msr	BASEPRI_MAX, r3
    365a:	f3bf 8f6f 	isb	sy
	pending_current = _current;
    365e:	4f16      	ldr	r7, [pc, #88]	; (36b8 <z_tick_sleep+0x94>)
    3660:	68b8      	ldr	r0, [r7, #8]
    3662:	4b16      	ldr	r3, [pc, #88]	; (36bc <z_tick_sleep+0x98>)
    3664:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
    3666:	f7ff fea7 	bl	33b8 <unready_thread>
	z_add_thread_timeout(_current, timeout);
    366a:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    366c:	4622      	mov	r2, r4
    366e:	462b      	mov	r3, r5
    3670:	4913      	ldr	r1, [pc, #76]	; (36c0 <z_tick_sleep+0x9c>)
    3672:	3018      	adds	r0, #24
    3674:	f000 f8e2 	bl	383c <z_add_timeout>
	z_mark_thread_as_suspended(_current);
    3678:	68ba      	ldr	r2, [r7, #8]
	thread->base.thread_state |= _THREAD_SUSPENDED;
    367a:	7b53      	ldrb	r3, [r2, #13]
    367c:	f043 0310 	orr.w	r3, r3, #16
    3680:	7353      	strb	r3, [r2, #13]
    3682:	4640      	mov	r0, r8
    3684:	f7fd fe34 	bl	12f0 <arch_swap>
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
    3688:	2500      	movs	r5, #0
    368a:	f001 ff22 	bl	54d2 <sys_clock_tick_get_32>
    368e:	1a34      	subs	r4, r6, r0
    3690:	f165 0500 	sbc.w	r5, r5, #0
	if (ticks > 0) {
    3694:	2c01      	cmp	r4, #1
    3696:	f175 0300 	sbcs.w	r3, r5, #0
    369a:	da0a      	bge.n	36b2 <z_tick_sleep+0x8e>
	return 0;
    369c:	2000      	movs	r0, #0
}
    369e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	z_impl_k_yield();
    36a2:	f7ff ff7b 	bl	359c <z_impl_k_yield>
		return 0;
    36a6:	2000      	movs	r0, #0
    36a8:	e7f9      	b.n	369e <z_tick_sleep+0x7a>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
    36aa:	f001 ff12 	bl	54d2 <sys_clock_tick_get_32>
    36ae:	1906      	adds	r6, r0, r4
    36b0:	e7cd      	b.n	364e <z_tick_sleep+0x2a>
		return ticks;
    36b2:	4620      	mov	r0, r4
    36b4:	e7f3      	b.n	369e <z_tick_sleep+0x7a>
    36b6:	bf00      	nop
    36b8:	2000035c 	.word	0x2000035c
    36bc:	20000388 	.word	0x20000388
    36c0:	0000523d 	.word	0x0000523d

000036c4 <z_impl_k_sleep>:
{
    36c4:	b538      	push	{r3, r4, r5, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    36c6:	f1b1 3fff 	cmp.w	r1, #4294967295
    36ca:	bf08      	it	eq
    36cc:	f1b0 3fff 	cmpeq.w	r0, #4294967295
    36d0:	d01a      	beq.n	3708 <z_impl_k_sleep+0x44>
	ticks = z_tick_sleep(ticks);
    36d2:	f7ff ffa7 	bl	3624 <z_tick_sleep>
	int32_t ret = k_ticks_to_ms_floor64(ticks);
    36d6:	4604      	mov	r4, r0
    36d8:	17c5      	asrs	r5, r0, #31
			return (t * to_hz + off) / from_hz;
    36da:	0169      	lsls	r1, r5, #5
    36dc:	0143      	lsls	r3, r0, #5
    36de:	ea41 62d0 	orr.w	r2, r1, r0, lsr #27
    36e2:	1a18      	subs	r0, r3, r0
    36e4:	eb62 0305 	sbc.w	r3, r2, r5
    36e8:	009a      	lsls	r2, r3, #2
    36ea:	ea42 7290 	orr.w	r2, r2, r0, lsr #30
    36ee:	0081      	lsls	r1, r0, #2
    36f0:	4613      	mov	r3, r2
    36f2:	1908      	adds	r0, r1, r4
    36f4:	eb45 0303 	adc.w	r3, r5, r3
    36f8:	00da      	lsls	r2, r3, #3
    36fa:	ea42 7250 	orr.w	r2, r2, r0, lsr #29
    36fe:	00c1      	lsls	r1, r0, #3
    3700:	0bc8      	lsrs	r0, r1, #15
    3702:	ea40 4042 	orr.w	r0, r0, r2, lsl #17
}
    3706:	bd38      	pop	{r3, r4, r5, pc}
		k_thread_suspend(_current);
    3708:	4b03      	ldr	r3, [pc, #12]	; (3718 <z_impl_k_sleep+0x54>)
    370a:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
    370c:	f7ff fe84 	bl	3418 <z_impl_k_thread_suspend>
		return (int32_t) K_TICKS_FOREVER;
    3710:	f04f 30ff 	mov.w	r0, #4294967295
    3714:	e7f7      	b.n	3706 <z_impl_k_sleep+0x42>
    3716:	bf00      	nop
    3718:	2000035c 	.word	0x2000035c

0000371c <z_impl_z_current_get>:
}
    371c:	4b01      	ldr	r3, [pc, #4]	; (3724 <z_impl_z_current_get+0x8>)
    371e:	6898      	ldr	r0, [r3, #8]
    3720:	4770      	bx	lr
    3722:	bf00      	nop
    3724:	2000035c 	.word	0x2000035c

00003728 <z_thread_abort>:

void z_thread_abort(struct k_thread *thread)
{
    3728:	b538      	push	{r3, r4, r5, lr}
    372a:	f04f 0320 	mov.w	r3, #32
    372e:	f3ef 8511 	mrs	r5, BASEPRI
    3732:	f383 8812 	msr	BASEPRI_MAX, r3
    3736:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
    373a:	7b43      	ldrb	r3, [r0, #13]
    373c:	f013 0f08 	tst.w	r3, #8
    3740:	d004      	beq.n	374c <z_thread_abort+0x24>
	__asm__ volatile(
    3742:	f385 8811 	msr	BASEPRI, r5
    3746:	f3bf 8f6f 	isb	sy
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
    374a:	bd38      	pop	{r3, r4, r5, pc}
    374c:	4604      	mov	r4, r0
	end_thread(thread);
    374e:	f7ff fecb 	bl	34e8 <end_thread>
	if (thread == _current && !arch_is_in_isr()) {
    3752:	4b08      	ldr	r3, [pc, #32]	; (3774 <z_thread_abort+0x4c>)
    3754:	689b      	ldr	r3, [r3, #8]
    3756:	42a3      	cmp	r3, r4
    3758:	d004      	beq.n	3764 <z_thread_abort+0x3c>
    375a:	f385 8811 	msr	BASEPRI, r5
    375e:	f3bf 8f6f 	isb	sy
    3762:	e7f2      	b.n	374a <z_thread_abort+0x22>
    3764:	f3ef 8305 	mrs	r3, IPSR
    3768:	2b00      	cmp	r3, #0
    376a:	d1f6      	bne.n	375a <z_thread_abort+0x32>
    376c:	4628      	mov	r0, r5
    376e:	f7fd fdbf 	bl	12f0 <arch_swap>
	return ret;
    3772:	e7f2      	b.n	375a <z_thread_abort+0x32>
    3774:	2000035c 	.word	0x2000035c

00003778 <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
    3778:	b508      	push	{r3, lr}
	(void)memcpy(&__data_region_start, &__data_region_load_start,
		 __data_region_end - __data_region_start);
    377a:	4806      	ldr	r0, [pc, #24]	; (3794 <z_data_copy+0x1c>)
	(void)memcpy(&__data_region_start, &__data_region_load_start,
    377c:	4a06      	ldr	r2, [pc, #24]	; (3798 <z_data_copy+0x20>)
    377e:	1a12      	subs	r2, r2, r0
    3780:	4906      	ldr	r1, [pc, #24]	; (379c <z_data_copy+0x24>)
    3782:	f000 fd75 	bl	4270 <memcpy>
#ifdef CONFIG_ARCH_HAS_RAMFUNC_SUPPORT
	(void)memcpy(&__ramfunc_start, &__ramfunc_load_start,
    3786:	4a06      	ldr	r2, [pc, #24]	; (37a0 <z_data_copy+0x28>)
    3788:	4906      	ldr	r1, [pc, #24]	; (37a4 <z_data_copy+0x2c>)
    378a:	4807      	ldr	r0, [pc, #28]	; (37a8 <z_data_copy+0x30>)
    378c:	f000 fd70 	bl	4270 <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
    3790:	bd08      	pop	{r3, pc}
    3792:	bf00      	nop
    3794:	20000000 	.word	0x20000000
    3798:	20000034 	.word	0x20000034
    379c:	00005800 	.word	0x00005800
    37a0:	00000000 	.word	0x00000000
    37a4:	00005800 	.word	0x00005800
    37a8:	20000000 	.word	0x20000000

000037ac <first>:
	return list->head == list;
    37ac:	4b03      	ldr	r3, [pc, #12]	; (37bc <first+0x10>)
    37ae:	6818      	ldr	r0, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    37b0:	4298      	cmp	r0, r3
    37b2:	d000      	beq.n	37b6 <first+0xa>
static struct _timeout *first(void)
{
	sys_dnode_t *t = sys_dlist_peek_head(&timeout_list);

	return t == NULL ? NULL : CONTAINER_OF(t, struct _timeout, node);
}
    37b4:	4770      	bx	lr
    37b6:	2000      	movs	r0, #0
	return t == NULL ? NULL : CONTAINER_OF(t, struct _timeout, node);
    37b8:	e7fc      	b.n	37b4 <first+0x8>
    37ba:	bf00      	nop
    37bc:	20000024 	.word	0x20000024

000037c0 <next>:
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    37c0:	b130      	cbz	r0, 37d0 <next+0x10>
	return (node == list->tail) ? NULL : node->next;
    37c2:	4a04      	ldr	r2, [pc, #16]	; (37d4 <next+0x14>)
    37c4:	6852      	ldr	r2, [r2, #4]
    37c6:	4290      	cmp	r0, r2
    37c8:	d001      	beq.n	37ce <next+0xe>
    37ca:	6800      	ldr	r0, [r0, #0]
    37cc:	4770      	bx	lr
    37ce:	2000      	movs	r0, #0
static struct _timeout *next(struct _timeout *t)
{
	sys_dnode_t *n = sys_dlist_peek_next(&timeout_list, &t->node);

	return n == NULL ? NULL : CONTAINER_OF(n, struct _timeout, node);
}
    37d0:	4770      	bx	lr
    37d2:	bf00      	nop
    37d4:	20000024 	.word	0x20000024

000037d8 <elapsed>:

	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
    37d8:	b508      	push	{r3, lr}
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
    37da:	4b04      	ldr	r3, [pc, #16]	; (37ec <elapsed+0x14>)
    37dc:	681b      	ldr	r3, [r3, #0]
    37de:	b10b      	cbz	r3, 37e4 <elapsed+0xc>
    37e0:	2000      	movs	r0, #0
}
    37e2:	bd08      	pop	{r3, pc}
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
    37e4:	f7fe ff20 	bl	2628 <sys_clock_elapsed>
    37e8:	e7fb      	b.n	37e2 <elapsed+0xa>
    37ea:	bf00      	nop
    37ec:	20000394 	.word	0x20000394

000037f0 <next_timeout>:

static int32_t next_timeout(void)
{
    37f0:	b510      	push	{r4, lr}
	struct _timeout *to = first();
    37f2:	f7ff ffdb 	bl	37ac <first>
    37f6:	4604      	mov	r4, r0
	int32_t ticks_elapsed = elapsed();
    37f8:	f7ff ffee 	bl	37d8 <elapsed>
	int32_t ret = to == NULL ? MAX_WAIT
    37fc:	b18c      	cbz	r4, 3822 <next_timeout+0x32>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
    37fe:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
    3802:	1a12      	subs	r2, r2, r0
    3804:	eb63 73e0 	sbc.w	r3, r3, r0, asr #31
	int32_t ret = to == NULL ? MAX_WAIT
    3808:	2a01      	cmp	r2, #1
    380a:	f173 0100 	sbcs.w	r1, r3, #0
    380e:	db11      	blt.n	3834 <next_timeout+0x44>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
    3810:	4610      	mov	r0, r2
    3812:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    3816:	f173 0300 	sbcs.w	r3, r3, #0
    381a:	db04      	blt.n	3826 <next_timeout+0x36>
    381c:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    3820:	e001      	b.n	3826 <next_timeout+0x36>
	int32_t ret = to == NULL ? MAX_WAIT
    3822:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
    3826:	4b04      	ldr	r3, [pc, #16]	; (3838 <next_timeout+0x48>)
    3828:	691b      	ldr	r3, [r3, #16]
    382a:	b113      	cbz	r3, 3832 <next_timeout+0x42>
    382c:	4283      	cmp	r3, r0
    382e:	da00      	bge.n	3832 <next_timeout+0x42>
		ret = _current_cpu->slice_ticks;
    3830:	4618      	mov	r0, r3
	}
#endif
	return ret;
}
    3832:	bd10      	pop	{r4, pc}
	int32_t ret = to == NULL ? MAX_WAIT
    3834:	2000      	movs	r0, #0
    3836:	e7f6      	b.n	3826 <next_timeout+0x36>
    3838:	2000035c 	.word	0x2000035c

0000383c <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
    383c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3840:	b083      	sub	sp, #12
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    3842:	f1b3 3fff 	cmp.w	r3, #4294967295
    3846:	bf08      	it	eq
    3848:	f1b2 3fff 	cmpeq.w	r2, #4294967295
    384c:	f000 8096 	beq.w	397c <z_add_timeout+0x140>
    3850:	4682      	mov	sl, r0
    3852:	4614      	mov	r4, r2
    3854:	461d      	mov	r5, r3
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
    3856:	6081      	str	r1, [r0, #8]

	LOCKED(&timeout_lock) {
    3858:	2300      	movs	r3, #0
	__asm__ volatile(
    385a:	f04f 0220 	mov.w	r2, #32
    385e:	f3ef 8b11 	mrs	fp, BASEPRI
    3862:	f382 8812 	msr	BASEPRI_MAX, r2
    3866:	f3bf 8f6f 	isb	sy
    386a:	e02e      	b.n	38ca <z_add_timeout+0x8e>

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
		    Z_TICK_ABS(timeout.ticks) >= 0) {
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;

			to->dticks = MAX(1, ticks);
    386c:	2201      	movs	r2, #1
    386e:	2300      	movs	r3, #0
    3870:	e04b      	b.n	390a <z_add_timeout+0xce>
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
    3872:	f7ff ffb1 	bl	37d8 <elapsed>
    3876:	1822      	adds	r2, r4, r0
    3878:	eb45 73e0 	adc.w	r3, r5, r0, asr #31
    387c:	3201      	adds	r2, #1
    387e:	f143 0300 	adc.w	r3, r3, #0
    3882:	f8ca 2010 	str.w	r2, [sl, #16]
    3886:	f8ca 3014 	str.w	r3, [sl, #20]
    388a:	e042      	b.n	3912 <z_add_timeout+0xd6>
		}

		for (t = first(); t != NULL; t = next(t)) {
			if (t->dticks > to->dticks) {
				t->dticks -= to->dticks;
    388c:	9b00      	ldr	r3, [sp, #0]
    388e:	1ac2      	subs	r2, r0, r3
    3890:	9b01      	ldr	r3, [sp, #4]
    3892:	eb61 0303 	sbc.w	r3, r1, r3
    3896:	f8cc 2010 	str.w	r2, [ip, #16]
    389a:	f8cc 3014 	str.w	r3, [ip, #20]
	sys_dnode_t *const prev = successor->prev;
    389e:	f8dc 3004 	ldr.w	r3, [ip, #4]
	node->prev = prev;
    38a2:	f8ca 3004 	str.w	r3, [sl, #4]
	node->next = successor;
    38a6:	f8ca c000 	str.w	ip, [sl]
	prev->next = node;
    38aa:	f8c3 a000 	str.w	sl, [r3]
	successor->prev = node;
    38ae:	f8cc a004 	str.w	sl, [ip, #4]
				break;
			}
			to->dticks -= t->dticks;
		}

		if (t == NULL) {
    38b2:	f1bc 0f00 	cmp.w	ip, #0
    38b6:	d049      	beq.n	394c <z_add_timeout+0x110>
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
    38b8:	f7ff ff78 	bl	37ac <first>
    38bc:	4582      	cmp	sl, r0
    38be:	d050      	beq.n	3962 <z_add_timeout+0x126>
	__asm__ volatile(
    38c0:	f38b 8811 	msr	BASEPRI, fp
    38c4:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
    38c8:	2301      	movs	r3, #1
    38ca:	2b00      	cmp	r3, #0
    38cc:	d156      	bne.n	397c <z_add_timeout+0x140>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
    38ce:	f06f 0301 	mvn.w	r3, #1
    38d2:	ebb3 0804 	subs.w	r8, r3, r4
    38d6:	f04f 30ff 	mov.w	r0, #4294967295
    38da:	eb60 0905 	sbc.w	r9, r0, r5
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
    38de:	f1b8 0f00 	cmp.w	r8, #0
    38e2:	f179 0300 	sbcs.w	r3, r9, #0
    38e6:	dbc4      	blt.n	3872 <z_add_timeout+0x36>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
    38e8:	4a26      	ldr	r2, [pc, #152]	; (3984 <z_add_timeout+0x148>)
    38ea:	6813      	ldr	r3, [r2, #0]
    38ec:	6852      	ldr	r2, [r2, #4]
    38ee:	18e3      	adds	r3, r4, r3
    38f0:	eb45 0202 	adc.w	r2, r5, r2
    38f4:	f06f 0101 	mvn.w	r1, #1
    38f8:	1ace      	subs	r6, r1, r3
    38fa:	eb60 0702 	sbc.w	r7, r0, r2
			to->dticks = MAX(1, ticks);
    38fe:	4632      	mov	r2, r6
    3900:	463b      	mov	r3, r7
    3902:	2e01      	cmp	r6, #1
    3904:	f177 0100 	sbcs.w	r1, r7, #0
    3908:	dbb0      	blt.n	386c <z_add_timeout+0x30>
    390a:	f8ca 2010 	str.w	r2, [sl, #16]
    390e:	f8ca 3014 	str.w	r3, [sl, #20]
		for (t = first(); t != NULL; t = next(t)) {
    3912:	f7ff ff4b 	bl	37ac <first>
    3916:	4684      	mov	ip, r0
    3918:	f1bc 0f00 	cmp.w	ip, #0
    391c:	d0c9      	beq.n	38b2 <z_add_timeout+0x76>
			if (t->dticks > to->dticks) {
    391e:	e9dc 0104 	ldrd	r0, r1, [ip, #16]
    3922:	e9da 2304 	ldrd	r2, r3, [sl, #16]
    3926:	e9cd 2300 	strd	r2, r3, [sp]
    392a:	4282      	cmp	r2, r0
    392c:	418b      	sbcs	r3, r1
    392e:	dbad      	blt.n	388c <z_add_timeout+0x50>
			to->dticks -= t->dticks;
    3930:	9b00      	ldr	r3, [sp, #0]
    3932:	1a1a      	subs	r2, r3, r0
    3934:	9b01      	ldr	r3, [sp, #4]
    3936:	eb63 0301 	sbc.w	r3, r3, r1
    393a:	f8ca 2010 	str.w	r2, [sl, #16]
    393e:	f8ca 3014 	str.w	r3, [sl, #20]
		for (t = first(); t != NULL; t = next(t)) {
    3942:	4660      	mov	r0, ip
    3944:	f7ff ff3c 	bl	37c0 <next>
    3948:	4684      	mov	ip, r0
    394a:	e7e5      	b.n	3918 <z_add_timeout+0xdc>
	sys_dnode_t *const tail = list->tail;
    394c:	4b0e      	ldr	r3, [pc, #56]	; (3988 <z_add_timeout+0x14c>)
    394e:	685a      	ldr	r2, [r3, #4]
	node->next = list;
    3950:	f8ca 3000 	str.w	r3, [sl]
	node->prev = tail;
    3954:	f8ca 2004 	str.w	r2, [sl, #4]
	tail->next = node;
    3958:	f8c2 a000 	str.w	sl, [r2]
	list->tail = node;
    395c:	f8c3 a004 	str.w	sl, [r3, #4]
}
    3960:	e7aa      	b.n	38b8 <z_add_timeout+0x7c>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
    3962:	f7ff ff45 	bl	37f0 <next_timeout>

			if (next_time == 0 ||
    3966:	4603      	mov	r3, r0
    3968:	b118      	cbz	r0, 3972 <z_add_timeout+0x136>
			    _current_cpu->slice_ticks != next_time) {
    396a:	4a08      	ldr	r2, [pc, #32]	; (398c <z_add_timeout+0x150>)
    396c:	6912      	ldr	r2, [r2, #16]
			if (next_time == 0 ||
    396e:	4282      	cmp	r2, r0
    3970:	d0a6      	beq.n	38c0 <z_add_timeout+0x84>
				sys_clock_set_timeout(next_time, false);
    3972:	2100      	movs	r1, #0
    3974:	4618      	mov	r0, r3
    3976:	f7fe fe23 	bl	25c0 <sys_clock_set_timeout>
    397a:	e7a1      	b.n	38c0 <z_add_timeout+0x84>
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
    397c:	b003      	add	sp, #12
    397e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3982:	bf00      	nop
    3984:	20000290 	.word	0x20000290
    3988:	20000024 	.word	0x20000024
    398c:	2000035c 	.word	0x2000035c

00003990 <sys_clock_announce>:
		}
	}
}

void sys_clock_announce(int32_t ticks)
{
    3990:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3992:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
    3994:	f7ff fc66 	bl	3264 <z_time_slice>
	__asm__ volatile(
    3998:	f04f 0320 	mov.w	r3, #32
    399c:	f3ef 8511 	mrs	r5, BASEPRI
    39a0:	f383 8812 	msr	BASEPRI_MAX, r3
    39a4:	f3bf 8f6f 	isb	sy
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
    39a8:	4b28      	ldr	r3, [pc, #160]	; (3a4c <sys_clock_announce+0xbc>)
    39aa:	601c      	str	r4, [r3, #0]

	while (first() != NULL && first()->dticks <= announce_remaining) {
    39ac:	f7ff fefe 	bl	37ac <first>
    39b0:	4604      	mov	r4, r0
    39b2:	b350      	cbz	r0, 3a0a <sys_clock_announce+0x7a>
    39b4:	e9d0 6704 	ldrd	r6, r7, [r0, #16]
    39b8:	4b24      	ldr	r3, [pc, #144]	; (3a4c <sys_clock_announce+0xbc>)
    39ba:	681b      	ldr	r3, [r3, #0]
    39bc:	17d9      	asrs	r1, r3, #31
    39be:	42b3      	cmp	r3, r6
    39c0:	eb71 0207 	sbcs.w	r2, r1, r7
    39c4:	db21      	blt.n	3a0a <sys_clock_announce+0x7a>
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
    39c6:	4a22      	ldr	r2, [pc, #136]	; (3a50 <sys_clock_announce+0xc0>)
    39c8:	e9d2 0100 	ldrd	r0, r1, [r2]
    39cc:	1980      	adds	r0, r0, r6
    39ce:	eb41 71e6 	adc.w	r1, r1, r6, asr #31
    39d2:	e9c2 0100 	strd	r0, r1, [r2]
		announce_remaining -= dt;
    39d6:	1b9b      	subs	r3, r3, r6
    39d8:	4a1c      	ldr	r2, [pc, #112]	; (3a4c <sys_clock_announce+0xbc>)
    39da:	6013      	str	r3, [r2, #0]
		t->dticks = 0;
    39dc:	2200      	movs	r2, #0
    39de:	2300      	movs	r3, #0
    39e0:	e9c4 2304 	strd	r2, r3, [r4, #16]
		remove_timeout(t);
    39e4:	4620      	mov	r0, r4
    39e6:	f001 fcfe 	bl	53e6 <remove_timeout>
	__asm__ volatile(
    39ea:	f385 8811 	msr	BASEPRI, r5
    39ee:	f3bf 8f6f 	isb	sy

		k_spin_unlock(&timeout_lock, key);
		t->fn(t);
    39f2:	68a3      	ldr	r3, [r4, #8]
    39f4:	4620      	mov	r0, r4
    39f6:	4798      	blx	r3
	__asm__ volatile(
    39f8:	f04f 0320 	mov.w	r3, #32
    39fc:	f3ef 8511 	mrs	r5, BASEPRI
    3a00:	f383 8812 	msr	BASEPRI_MAX, r3
    3a04:	f3bf 8f6f 	isb	sy
    3a08:	e7d0      	b.n	39ac <sys_clock_announce+0x1c>
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
    3a0a:	b144      	cbz	r4, 3a1e <sys_clock_announce+0x8e>
		first()->dticks -= announce_remaining;
    3a0c:	4b0f      	ldr	r3, [pc, #60]	; (3a4c <sys_clock_announce+0xbc>)
    3a0e:	6819      	ldr	r1, [r3, #0]
    3a10:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
    3a14:	1a52      	subs	r2, r2, r1
    3a16:	eb63 73e1 	sbc.w	r3, r3, r1, asr #31
    3a1a:	e9c4 2304 	strd	r2, r3, [r4, #16]
	}

	curr_tick += announce_remaining;
    3a1e:	480c      	ldr	r0, [pc, #48]	; (3a50 <sys_clock_announce+0xc0>)
    3a20:	490a      	ldr	r1, [pc, #40]	; (3a4c <sys_clock_announce+0xbc>)
    3a22:	680c      	ldr	r4, [r1, #0]
    3a24:	e9d0 2300 	ldrd	r2, r3, [r0]
    3a28:	1912      	adds	r2, r2, r4
    3a2a:	eb43 73e4 	adc.w	r3, r3, r4, asr #31
    3a2e:	e9c0 2300 	strd	r2, r3, [r0]
	announce_remaining = 0;
    3a32:	2400      	movs	r4, #0
    3a34:	600c      	str	r4, [r1, #0]

	sys_clock_set_timeout(next_timeout(), false);
    3a36:	f7ff fedb 	bl	37f0 <next_timeout>
    3a3a:	4621      	mov	r1, r4
    3a3c:	f7fe fdc0 	bl	25c0 <sys_clock_set_timeout>
	__asm__ volatile(
    3a40:	f385 8811 	msr	BASEPRI, r5
    3a44:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
    3a48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3a4a:	bf00      	nop
    3a4c:	20000394 	.word	0x20000394
    3a50:	20000290 	.word	0x20000290

00003a54 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
    3a54:	b510      	push	{r4, lr}
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
    3a56:	2100      	movs	r1, #0
	__asm__ volatile(
    3a58:	f04f 0320 	mov.w	r3, #32
    3a5c:	f3ef 8411 	mrs	r4, BASEPRI
    3a60:	f383 8812 	msr	BASEPRI_MAX, r3
    3a64:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;
    3a68:	2200      	movs	r2, #0
    3a6a:	2300      	movs	r3, #0
	LOCKED(&timeout_lock) {
    3a6c:	b969      	cbnz	r1, 3a8a <sys_clock_tick_get+0x36>
		t = curr_tick + sys_clock_elapsed();
    3a6e:	f7fe fddb 	bl	2628 <sys_clock_elapsed>
    3a72:	4b07      	ldr	r3, [pc, #28]	; (3a90 <sys_clock_tick_get+0x3c>)
    3a74:	e9d3 2300 	ldrd	r2, r3, [r3]
    3a78:	1812      	adds	r2, r2, r0
    3a7a:	f143 0300 	adc.w	r3, r3, #0
	__asm__ volatile(
    3a7e:	f384 8811 	msr	BASEPRI, r4
    3a82:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
    3a86:	2101      	movs	r1, #1
    3a88:	e7f0      	b.n	3a6c <sys_clock_tick_get+0x18>
	}
	return t;
}
    3a8a:	4610      	mov	r0, r2
    3a8c:	4619      	mov	r1, r3
    3a8e:	bd10      	pop	{r4, pc}
    3a90:	20000290 	.word	0x20000290

00003a94 <z_timer_expiration_handler>:
 * @param t  Timeout used by the timer.
 *
 * @return N/A
 */
void z_timer_expiration_handler(struct _timeout *t)
{
    3a94:	b570      	push	{r4, r5, r6, lr}
    3a96:	4604      	mov	r4, r0
	__asm__ volatile(
    3a98:	f04f 0320 	mov.w	r3, #32
    3a9c:	f3ef 8611 	mrs	r6, BASEPRI
    3aa0:	f383 8812 	msr	BASEPRI_MAX, r3
    3aa4:	f3bf 8f6f 	isb	sy
    3aa8:	4635      	mov	r5, r6

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
    3aaa:	e9d0 230a 	ldrd	r2, r3, [r0, #40]	; 0x28
    3aae:	ea52 0103 	orrs.w	r1, r2, r3
    3ab2:	d005      	beq.n	3ac0 <z_timer_expiration_handler+0x2c>
    3ab4:	f1b3 3fff 	cmp.w	r3, #4294967295
    3ab8:	bf08      	it	eq
    3aba:	f1b2 3fff 	cmpeq.w	r2, #4294967295
    3abe:	d127      	bne.n	3b10 <z_timer_expiration_handler+0x7c>
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
			     timer->period);
	}

	/* update timer's status */
	timer->status += 1U;
    3ac0:	6b23      	ldr	r3, [r4, #48]	; 0x30
    3ac2:	3301      	adds	r3, #1
    3ac4:	6323      	str	r3, [r4, #48]	; 0x30

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
    3ac6:	6a23      	ldr	r3, [r4, #32]
    3ac8:	b173      	cbz	r3, 3ae8 <z_timer_expiration_handler+0x54>
	__asm__ volatile(
    3aca:	f386 8811 	msr	BASEPRI, r6
    3ace:	f3bf 8f6f 	isb	sy
		/* Unlock for user handler. */
		k_spin_unlock(&lock, key);
		timer->expiry_fn(timer);
    3ad2:	6a23      	ldr	r3, [r4, #32]
    3ad4:	4620      	mov	r0, r4
    3ad6:	4798      	blx	r3
	__asm__ volatile(
    3ad8:	f04f 0320 	mov.w	r3, #32
    3adc:	f3ef 8511 	mrs	r5, BASEPRI
    3ae0:	f383 8812 	msr	BASEPRI_MAX, r3
    3ae4:	f3bf 8f6f 	isb	sy
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
    3ae8:	f104 0318 	add.w	r3, r4, #24
	return list->head == list;
    3aec:	69a4      	ldr	r4, [r4, #24]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    3aee:	42a3      	cmp	r3, r4
    3af0:	d012      	beq.n	3b18 <z_timer_expiration_handler+0x84>
		return;
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
    3af2:	b18c      	cbz	r4, 3b18 <z_timer_expiration_handler+0x84>
		k_spin_unlock(&lock, key);
		return;
	}

	z_unpend_thread_no_timeout(thread);
    3af4:	4620      	mov	r0, r4
    3af6:	f001 fb42 	bl	517e <z_unpend_thread_no_timeout>
    3afa:	2300      	movs	r3, #0
    3afc:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
	__asm__ volatile(
    3b00:	f385 8811 	msr	BASEPRI, r5
    3b04:	f3bf 8f6f 	isb	sy

	arch_thread_return_value_set(thread, 0);

	k_spin_unlock(&lock, key);

	z_ready_thread(thread);
    3b08:	4620      	mov	r0, r4
    3b0a:	f001 fb7b 	bl	5204 <z_ready_thread>
}
    3b0e:	bd70      	pop	{r4, r5, r6, pc}
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    3b10:	4904      	ldr	r1, [pc, #16]	; (3b24 <z_timer_expiration_handler+0x90>)
    3b12:	f7ff fe93 	bl	383c <z_add_timeout>
    3b16:	e7d3      	b.n	3ac0 <z_timer_expiration_handler+0x2c>
    3b18:	f385 8811 	msr	BASEPRI, r5
    3b1c:	f3bf 8f6f 	isb	sy
		return;
    3b20:	e7f5      	b.n	3b0e <z_timer_expiration_handler+0x7a>
    3b22:	bf00      	nop
    3b24:	00003a95 	.word	0x00003a95

00003b28 <z_impl_k_timer_start>:
}


void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
    3b28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3b2c:	b087      	sub	sp, #28
    3b2e:	4614      	mov	r4, r2
    3b30:	461d      	mov	r5, r3
    3b32:	e9dd 8910 	ldrd	r8, r9, [sp, #64]	; 0x40
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, start, timer);

	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
    3b36:	f1b3 3fff 	cmp.w	r3, #4294967295
    3b3a:	bf08      	it	eq
    3b3c:	f1b2 3fff 	cmpeq.w	r2, #4294967295
    3b40:	d035      	beq.n	3bae <z_impl_k_timer_start+0x86>
    3b42:	4606      	mov	r6, r0
    3b44:	4613      	mov	r3, r2
    3b46:	462a      	mov	r2, r5
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
    3b48:	f1b9 3fff 	cmp.w	r9, #4294967295
    3b4c:	bf08      	it	eq
    3b4e:	f1b8 3fff 	cmpeq.w	r8, #4294967295
    3b52:	d012      	beq.n	3b7a <z_impl_k_timer_start+0x52>
    3b54:	ea58 0109 	orrs.w	r1, r8, r9
    3b58:	d00f      	beq.n	3b7a <z_impl_k_timer_start+0x52>
	    Z_TICK_ABS(period.ticks) < 0) {
    3b5a:	f06f 0701 	mvn.w	r7, #1
    3b5e:	ebb7 0708 	subs.w	r7, r7, r8
    3b62:	9702      	str	r7, [sp, #8]
    3b64:	f04f 31ff 	mov.w	r1, #4294967295
    3b68:	eb61 0709 	sbc.w	r7, r1, r9
    3b6c:	9703      	str	r7, [sp, #12]
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
    3b6e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    3b72:	2800      	cmp	r0, #0
    3b74:	f171 0100 	sbcs.w	r1, r1, #0
    3b78:	db1c      	blt.n	3bb4 <z_impl_k_timer_start+0x8c>
		period.ticks = MAX(period.ticks - 1, 1);
	}
	if (Z_TICK_ABS(duration.ticks) < 0) {
    3b7a:	f06f 0101 	mvn.w	r1, #1
    3b7e:	ebb1 0a03 	subs.w	sl, r1, r3
    3b82:	f04f 31ff 	mov.w	r1, #4294967295
    3b86:	eb61 0b02 	sbc.w	fp, r1, r2
    3b8a:	f1ba 0f00 	cmp.w	sl, #0
    3b8e:	f17b 0100 	sbcs.w	r1, fp, #0
    3b92:	db23      	blt.n	3bdc <z_impl_k_timer_start+0xb4>
		duration.ticks = MAX(duration.ticks - 1, 0);
	}

	(void)z_abort_timeout(&timer->timeout);
    3b94:	4630      	mov	r0, r6
    3b96:	f001 fc3d 	bl	5414 <z_abort_timeout>
	timer->period = period;
    3b9a:	e9c6 890a 	strd	r8, r9, [r6, #40]	; 0x28
	timer->status = 0U;
    3b9e:	2300      	movs	r3, #0
    3ba0:	6333      	str	r3, [r6, #48]	; 0x30

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    3ba2:	4622      	mov	r2, r4
    3ba4:	462b      	mov	r3, r5
    3ba6:	4917      	ldr	r1, [pc, #92]	; (3c04 <z_impl_k_timer_start+0xdc>)
    3ba8:	4630      	mov	r0, r6
    3baa:	f7ff fe47 	bl	383c <z_add_timeout>
		     duration);
}
    3bae:	b007      	add	sp, #28
    3bb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		period.ticks = MAX(period.ticks - 1, 1);
    3bb4:	f118 31ff 	adds.w	r1, r8, #4294967295
    3bb8:	9104      	str	r1, [sp, #16]
    3bba:	f149 31ff 	adc.w	r1, r9, #4294967295
    3bbe:	9105      	str	r1, [sp, #20]
    3bc0:	e9dd 7804 	ldrd	r7, r8, [sp, #16]
    3bc4:	4638      	mov	r0, r7
    3bc6:	4641      	mov	r1, r8
    3bc8:	2f01      	cmp	r7, #1
    3bca:	f178 0700 	sbcs.w	r7, r8, #0
    3bce:	db02      	blt.n	3bd6 <z_impl_k_timer_start+0xae>
    3bd0:	4680      	mov	r8, r0
    3bd2:	4689      	mov	r9, r1
    3bd4:	e7d1      	b.n	3b7a <z_impl_k_timer_start+0x52>
    3bd6:	2001      	movs	r0, #1
    3bd8:	2100      	movs	r1, #0
    3bda:	e7f9      	b.n	3bd0 <z_impl_k_timer_start+0xa8>
		duration.ticks = MAX(duration.ticks - 1, 0);
    3bdc:	f113 33ff 	adds.w	r3, r3, #4294967295
    3be0:	9300      	str	r3, [sp, #0]
    3be2:	f142 33ff 	adc.w	r3, r2, #4294967295
    3be6:	9301      	str	r3, [sp, #4]
    3be8:	e9dd 0100 	ldrd	r0, r1, [sp]
    3bec:	4602      	mov	r2, r0
    3bee:	460b      	mov	r3, r1
    3bf0:	2800      	cmp	r0, #0
    3bf2:	f171 0100 	sbcs.w	r1, r1, #0
    3bf6:	db02      	blt.n	3bfe <z_impl_k_timer_start+0xd6>
    3bf8:	4614      	mov	r4, r2
    3bfa:	461d      	mov	r5, r3
    3bfc:	e7ca      	b.n	3b94 <z_impl_k_timer_start+0x6c>
    3bfe:	2200      	movs	r2, #0
    3c00:	4613      	mov	r3, r2
    3c02:	e7f9      	b.n	3bf8 <z_impl_k_timer_start+0xd0>
    3c04:	00003a95 	.word	0x00003a95

00003c08 <uart_cb>:

static void uart_cb(const struct device *dev, struct uart_event *evt, void *user_data)
{

    3c08:	4770      	bx	lr

00003c0a <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
    3c0a:	4602      	mov	r2, r0
    3c0c:	b158      	cbz	r0, 3c26 <sys_notify_validate+0x1c>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    3c0e:	6843      	ldr	r3, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
    3c10:	f003 0303 	and.w	r3, r3, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
    3c14:	2b01      	cmp	r3, #1
    3c16:	d003      	beq.n	3c20 <sys_notify_validate+0x16>
    3c18:	2b03      	cmp	r3, #3
    3c1a:	d107      	bne.n	3c2c <sys_notify_validate+0x22>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		if (notify->method.callback == NULL) {
    3c1c:	6803      	ldr	r3, [r0, #0]
    3c1e:	b143      	cbz	r3, 3c32 <sys_notify_validate+0x28>
		break;
	}

	/* Clear the result here instead of in all callers. */
	if (rv == 0) {
		notify->result = 0;
    3c20:	2000      	movs	r0, #0
    3c22:	6090      	str	r0, [r2, #8]
    3c24:	4770      	bx	lr
		return -EINVAL;
    3c26:	f06f 0015 	mvn.w	r0, #21
    3c2a:	4770      	bx	lr
	switch (sys_notify_get_method(notify)) {
    3c2c:	f06f 0015 	mvn.w	r0, #21
    3c30:	4770      	bx	lr
			rv = -EINVAL;
    3c32:	f06f 0015 	mvn.w	r0, #21
	}

	return rv;
}
    3c36:	4770      	bx	lr

00003c38 <sys_notify_finalize>:

sys_notify_generic_callback sys_notify_finalize(struct sys_notify *notify,
						    int res)
{
    3c38:	4603      	mov	r3, r0
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    3c3a:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
    3c3c:	f002 0203 	and.w	r2, r2, #3
	uint32_t method = sys_notify_get_method(notify);

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
    3c40:	6081      	str	r1, [r0, #8]
	switch (method) {
    3c42:	2a03      	cmp	r2, #3
    3c44:	d103      	bne.n	3c4e <sys_notify_finalize+0x16>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
    3c46:	6800      	ldr	r0, [r0, #0]
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
    3c48:	2200      	movs	r2, #0
    3c4a:	605a      	str	r2, [r3, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
    3c4c:	4770      	bx	lr
	sys_notify_generic_callback rv = NULL;
    3c4e:	2000      	movs	r0, #0
    3c50:	e7fa      	b.n	3c48 <sys_notify_finalize+0x10>

00003c52 <arch_printk_char_out>:
}
    3c52:	2000      	movs	r0, #0
    3c54:	4770      	bx	lr

00003c56 <str_out>:
{
    3c56:	b410      	push	{r4}
	if (ctx->str == NULL || ctx->count >= ctx->max) {
    3c58:	680c      	ldr	r4, [r1, #0]
    3c5a:	b154      	cbz	r4, 3c72 <str_out+0x1c>
    3c5c:	688a      	ldr	r2, [r1, #8]
    3c5e:	684b      	ldr	r3, [r1, #4]
    3c60:	429a      	cmp	r2, r3
    3c62:	da06      	bge.n	3c72 <str_out+0x1c>
	if (ctx->count == ctx->max - 1) {
    3c64:	3b01      	subs	r3, #1
    3c66:	429a      	cmp	r2, r3
    3c68:	d008      	beq.n	3c7c <str_out+0x26>
		ctx->str[ctx->count++] = c;
    3c6a:	1c53      	adds	r3, r2, #1
    3c6c:	608b      	str	r3, [r1, #8]
    3c6e:	54a0      	strb	r0, [r4, r2]
    3c70:	e002      	b.n	3c78 <str_out+0x22>
		ctx->count++;
    3c72:	688b      	ldr	r3, [r1, #8]
    3c74:	3301      	adds	r3, #1
    3c76:	608b      	str	r3, [r1, #8]
}
    3c78:	bc10      	pop	{r4}
    3c7a:	4770      	bx	lr
		ctx->str[ctx->count++] = '\0';
    3c7c:	1c53      	adds	r3, r2, #1
    3c7e:	608b      	str	r3, [r1, #8]
    3c80:	2300      	movs	r3, #0
    3c82:	54a3      	strb	r3, [r4, r2]
    3c84:	e7f8      	b.n	3c78 <str_out+0x22>

00003c86 <printk>:
{
    3c86:	b40f      	push	{r0, r1, r2, r3}
    3c88:	b500      	push	{lr}
    3c8a:	b083      	sub	sp, #12
    3c8c:	a904      	add	r1, sp, #16
    3c8e:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
    3c92:	9101      	str	r1, [sp, #4]
		vprintk(fmt, ap);
    3c94:	f7fc fbe0 	bl	458 <vprintk>
}
    3c98:	b003      	add	sp, #12
    3c9a:	f85d eb04 	ldr.w	lr, [sp], #4
    3c9e:	b004      	add	sp, #16
    3ca0:	4770      	bx	lr

00003ca2 <snprintk>:
{
    3ca2:	b40c      	push	{r2, r3}
    3ca4:	b500      	push	{lr}
    3ca6:	b083      	sub	sp, #12
    3ca8:	ab04      	add	r3, sp, #16
    3caa:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
    3cae:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
    3cb0:	f7fc fbe2 	bl	478 <vsnprintk>
}
    3cb4:	b003      	add	sp, #12
    3cb6:	f85d eb04 	ldr.w	lr, [sp], #4
    3cba:	b002      	add	sp, #8
    3cbc:	4770      	bx	lr

00003cbe <set_state>:
	mgr->flags = (state & ONOFF_STATE_MASK)
    3cbe:	f001 0307 	and.w	r3, r1, #7
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    3cc2:	8b01      	ldrh	r1, [r0, #24]
    3cc4:	f021 0107 	bic.w	r1, r1, #7
    3cc8:	4319      	orrs	r1, r3
	mgr->flags = (state & ONOFF_STATE_MASK)
    3cca:	8301      	strh	r1, [r0, #24]
}
    3ccc:	4770      	bx	lr

00003cce <notify_monitors>:
{
    3cce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3cd2:	4606      	mov	r6, r0
    3cd4:	460f      	mov	r7, r1
    3cd6:	4690      	mov	r8, r2
	return list->head;
    3cd8:	6881      	ldr	r1, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    3cda:	b119      	cbz	r1, 3ce4 <notify_monitors+0x16>
    3cdc:	460c      	mov	r4, r1
Z_GENLIST_PEEK_NEXT(slist, snode)
    3cde:	b131      	cbz	r1, 3cee <notify_monitors+0x20>
	return node->next;
    3ce0:	680c      	ldr	r4, [r1, #0]
    3ce2:	e004      	b.n	3cee <notify_monitors+0x20>
    3ce4:	460c      	mov	r4, r1
    3ce6:	e002      	b.n	3cee <notify_monitors+0x20>
    3ce8:	4623      	mov	r3, r4
    3cea:	4621      	mov	r1, r4
    3cec:	461c      	mov	r4, r3
    3cee:	b159      	cbz	r1, 3d08 <notify_monitors+0x3a>
		mon->callback(mgr, mon, state, res);
    3cf0:	684d      	ldr	r5, [r1, #4]
    3cf2:	4643      	mov	r3, r8
    3cf4:	463a      	mov	r2, r7
    3cf6:	4630      	mov	r0, r6
    3cf8:	47a8      	blx	r5
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    3cfa:	2c00      	cmp	r4, #0
    3cfc:	d0f4      	beq.n	3ce8 <notify_monitors+0x1a>
    3cfe:	4623      	mov	r3, r4
Z_GENLIST_PEEK_NEXT(slist, snode)
    3d00:	2c00      	cmp	r4, #0
    3d02:	d0f2      	beq.n	3cea <notify_monitors+0x1c>
	return node->next;
    3d04:	6823      	ldr	r3, [r4, #0]
    3d06:	e7f0      	b.n	3cea <notify_monitors+0x1c>
}
    3d08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00003d0c <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    3d0c:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
    3d0e:	f013 0307 	ands.w	r3, r3, #7
    3d12:	d103      	bne.n	3d1c <process_recheck+0x10>
	return list->head;
    3d14:	6802      	ldr	r2, [r0, #0]
	    && !sys_slist_is_empty(&mgr->clients)) {
    3d16:	b10a      	cbz	r2, 3d1c <process_recheck+0x10>
		evt = EVT_START;
    3d18:	2003      	movs	r0, #3
    3d1a:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
    3d1c:	2b02      	cmp	r3, #2
    3d1e:	d003      	beq.n	3d28 <process_recheck+0x1c>
	} else if ((state == ONOFF_STATE_ERROR)
    3d20:	2b01      	cmp	r3, #1
    3d22:	d006      	beq.n	3d32 <process_recheck+0x26>
	int evt = EVT_NOP;
    3d24:	2000      	movs	r0, #0
    3d26:	4770      	bx	lr
		   && (mgr->refs == 0U)) {
    3d28:	8b42      	ldrh	r2, [r0, #26]
    3d2a:	2a00      	cmp	r2, #0
    3d2c:	d1f8      	bne.n	3d20 <process_recheck+0x14>
		evt = EVT_STOP;
    3d2e:	2004      	movs	r0, #4
    3d30:	4770      	bx	lr
    3d32:	6803      	ldr	r3, [r0, #0]
		   && !sys_slist_is_empty(&mgr->clients)) {
    3d34:	b10b      	cbz	r3, 3d3a <process_recheck+0x2e>
		evt = EVT_RESET;
    3d36:	2005      	movs	r0, #5
}
    3d38:	4770      	bx	lr
	int evt = EVT_NOP;
    3d3a:	2000      	movs	r0, #0
    3d3c:	4770      	bx	lr

00003d3e <process_complete>:
{
    3d3e:	b538      	push	{r3, r4, r5, lr}
    3d40:	4604      	mov	r4, r0
    3d42:	460d      	mov	r5, r1
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    3d44:	8b03      	ldrh	r3, [r0, #24]
	if (res < 0) {
    3d46:	2a00      	cmp	r2, #0
    3d48:	db07      	blt.n	3d5a <process_complete+0x1c>
    3d4a:	f003 0307 	and.w	r3, r3, #7
		   || (state == ONOFF_STATE_RESETTING)) {
    3d4e:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
    3d50:	2a01      	cmp	r2, #1
    3d52:	d90e      	bls.n	3d72 <process_complete+0x34>
	} else if (state == ONOFF_STATE_TO_OFF) {
    3d54:	2b04      	cmp	r3, #4
    3d56:	d032      	beq.n	3dbe <process_complete+0x80>
}
    3d58:	bd38      	pop	{r3, r4, r5, pc}
		*clients = mgr->clients;
    3d5a:	e9d0 0100 	ldrd	r0, r1, [r0]
    3d5e:	e885 0003 	stmia.w	r5, {r0, r1}
	list->head = NULL;
    3d62:	2300      	movs	r3, #0
    3d64:	6023      	str	r3, [r4, #0]
	list->tail = NULL;
    3d66:	6063      	str	r3, [r4, #4]
		set_state(mgr, ONOFF_STATE_ERROR);
    3d68:	2101      	movs	r1, #1
    3d6a:	4620      	mov	r0, r4
    3d6c:	f7ff ffa7 	bl	3cbe <set_state>
    3d70:	e7f2      	b.n	3d58 <process_complete+0x1a>
		*clients = mgr->clients;
    3d72:	e9d0 0100 	ldrd	r0, r1, [r0]
    3d76:	e885 0003 	stmia.w	r5, {r0, r1}
	list->head = NULL;
    3d7a:	2200      	movs	r2, #0
    3d7c:	6022      	str	r2, [r4, #0]
	list->tail = NULL;
    3d7e:	6062      	str	r2, [r4, #4]
		if (state == ONOFF_STATE_TO_ON) {
    3d80:	2b06      	cmp	r3, #6
    3d82:	d117      	bne.n	3db4 <process_complete+0x76>
	return list->head;
    3d84:	682b      	ldr	r3, [r5, #0]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    3d86:	b13b      	cbz	r3, 3d98 <process_complete+0x5a>
				mgr->refs += 1U;
    3d88:	8b62      	ldrh	r2, [r4, #26]
    3d8a:	3201      	adds	r2, #1
    3d8c:	8362      	strh	r2, [r4, #26]
Z_GENLIST_PEEK_NEXT(slist, snode)
    3d8e:	2b00      	cmp	r3, #0
    3d90:	d0f9      	beq.n	3d86 <process_complete+0x48>
	return node->next;
    3d92:	681b      	ldr	r3, [r3, #0]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    3d94:	2b00      	cmp	r3, #0
    3d96:	d1f6      	bne.n	3d86 <process_complete+0x48>
			set_state(mgr, ONOFF_STATE_ON);
    3d98:	2102      	movs	r1, #2
    3d9a:	4620      	mov	r0, r4
    3d9c:	f7ff ff8f 	bl	3cbe <set_state>
		if (process_recheck(mgr) != EVT_NOP) {
    3da0:	4620      	mov	r0, r4
    3da2:	f7ff ffb3 	bl	3d0c <process_recheck>
    3da6:	2800      	cmp	r0, #0
    3da8:	d0d6      	beq.n	3d58 <process_complete+0x1a>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    3daa:	8b23      	ldrh	r3, [r4, #24]
    3dac:	f043 0320 	orr.w	r3, r3, #32
    3db0:	8323      	strh	r3, [r4, #24]
    3db2:	e7d1      	b.n	3d58 <process_complete+0x1a>
			set_state(mgr, ONOFF_STATE_OFF);
    3db4:	2100      	movs	r1, #0
    3db6:	4620      	mov	r0, r4
    3db8:	f7ff ff81 	bl	3cbe <set_state>
    3dbc:	e7f0      	b.n	3da0 <process_complete+0x62>
		set_state(mgr, ONOFF_STATE_OFF);
    3dbe:	2100      	movs	r1, #0
    3dc0:	f7ff ff7d 	bl	3cbe <set_state>
		if (process_recheck(mgr) != EVT_NOP) {
    3dc4:	4620      	mov	r0, r4
    3dc6:	f7ff ffa1 	bl	3d0c <process_recheck>
    3dca:	2800      	cmp	r0, #0
    3dcc:	d0c4      	beq.n	3d58 <process_complete+0x1a>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    3dce:	8b23      	ldrh	r3, [r4, #24]
    3dd0:	f043 0320 	orr.w	r3, r3, #32
    3dd4:	8323      	strh	r3, [r4, #24]
}
    3dd6:	e7bf      	b.n	3d58 <process_complete+0x1a>

00003dd8 <validate_args>:
	if ((mgr == NULL) || (cli == NULL)) {
    3dd8:	b158      	cbz	r0, 3df2 <validate_args+0x1a>
{
    3dda:	b510      	push	{r4, lr}
    3ddc:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
    3dde:	b159      	cbz	r1, 3df8 <validate_args+0x20>
	int rv = sys_notify_validate(&cli->notify);
    3de0:	1d08      	adds	r0, r1, #4
    3de2:	f7ff ff12 	bl	3c0a <sys_notify_validate>
	if ((rv == 0)
    3de6:	b918      	cbnz	r0, 3df0 <validate_args+0x18>
	    && ((cli->notify.flags
    3de8:	68a3      	ldr	r3, [r4, #8]
    3dea:	f033 0303 	bics.w	r3, r3, #3
    3dee:	d106      	bne.n	3dfe <validate_args+0x26>
}
    3df0:	bd10      	pop	{r4, pc}
		return -EINVAL;
    3df2:	f06f 0015 	mvn.w	r0, #21
}
    3df6:	4770      	bx	lr
		return -EINVAL;
    3df8:	f06f 0015 	mvn.w	r0, #21
    3dfc:	e7f8      	b.n	3df0 <validate_args+0x18>
		rv = -EINVAL;
    3dfe:	f06f 0015 	mvn.w	r0, #21
    3e02:	e7f5      	b.n	3df0 <validate_args+0x18>

00003e04 <notify_one>:
{
    3e04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3e08:	4607      	mov	r7, r0
    3e0a:	460c      	mov	r4, r1
    3e0c:	4616      	mov	r6, r2
    3e0e:	461d      	mov	r5, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    3e10:	4619      	mov	r1, r3
    3e12:	1d20      	adds	r0, r4, #4
    3e14:	f7ff ff10 	bl	3c38 <sys_notify_finalize>
	if (cb) {
    3e18:	b128      	cbz	r0, 3e26 <notify_one+0x22>
    3e1a:	4680      	mov	r8, r0
		cb(mgr, cli, state, res);
    3e1c:	462b      	mov	r3, r5
    3e1e:	4632      	mov	r2, r6
    3e20:	4621      	mov	r1, r4
    3e22:	4638      	mov	r0, r7
    3e24:	47c0      	blx	r8
}
    3e26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00003e2a <notify_all>:
{
    3e2a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    3e2e:	4681      	mov	r9, r0
    3e30:	460c      	mov	r4, r1
    3e32:	4690      	mov	r8, r2
    3e34:	461f      	mov	r7, r3
	while (!sys_slist_is_empty(list)) {
    3e36:	e005      	b.n	3e44 <notify_all+0x1a>
	list->tail = node;
    3e38:	6065      	str	r5, [r4, #4]
		notify_one(mgr, cli, state, res);
    3e3a:	463b      	mov	r3, r7
    3e3c:	4642      	mov	r2, r8
    3e3e:	4648      	mov	r0, r9
    3e40:	f7ff ffe0 	bl	3e04 <notify_one>
	return list->head;
    3e44:	6821      	ldr	r1, [r4, #0]
	while (!sys_slist_is_empty(list)) {
    3e46:	b129      	cbz	r1, 3e54 <notify_all+0x2a>
	return node->next;
    3e48:	680d      	ldr	r5, [r1, #0]
	list->head = node;
    3e4a:	6025      	str	r5, [r4, #0]
	return list->tail;
    3e4c:	6866      	ldr	r6, [r4, #4]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_snode_t *sys_slist_get_not_empty(sys_slist_t *list);

Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    3e4e:	428e      	cmp	r6, r1
    3e50:	d1f3      	bne.n	3e3a <notify_all+0x10>
    3e52:	e7f1      	b.n	3e38 <notify_all+0xe>
}
    3e54:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00003e58 <transition_complete>:
{
    3e58:	b510      	push	{r4, lr}
	__asm__ volatile(
    3e5a:	f04f 0420 	mov.w	r4, #32
    3e5e:	f3ef 8211 	mrs	r2, BASEPRI
    3e62:	f384 8812 	msr	BASEPRI_MAX, r4
    3e66:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
    3e6a:	6141      	str	r1, [r0, #20]
	process_event(mgr, EVT_COMPLETE, key);
    3e6c:	2101      	movs	r1, #1
    3e6e:	f7fc fb19 	bl	4a4 <process_event>
}
    3e72:	bd10      	pop	{r4, pc}

00003e74 <onoff_manager_init>:
	if ((mgr == NULL)
    3e74:	4603      	mov	r3, r0
    3e76:	b168      	cbz	r0, 3e94 <onoff_manager_init+0x20>
	    || (transitions == NULL)
    3e78:	b179      	cbz	r1, 3e9a <onoff_manager_init+0x26>
	    || (transitions->start == NULL)
    3e7a:	680a      	ldr	r2, [r1, #0]
    3e7c:	b182      	cbz	r2, 3ea0 <onoff_manager_init+0x2c>
	    || (transitions->stop == NULL)) {
    3e7e:	684a      	ldr	r2, [r1, #4]
    3e80:	b18a      	cbz	r2, 3ea6 <onoff_manager_init+0x32>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
    3e82:	2000      	movs	r0, #0
    3e84:	6018      	str	r0, [r3, #0]
    3e86:	6058      	str	r0, [r3, #4]
    3e88:	6098      	str	r0, [r3, #8]
    3e8a:	60d8      	str	r0, [r3, #12]
    3e8c:	6158      	str	r0, [r3, #20]
    3e8e:	6198      	str	r0, [r3, #24]
    3e90:	6119      	str	r1, [r3, #16]
	return 0;
    3e92:	4770      	bx	lr
		return -EINVAL;
    3e94:	f06f 0015 	mvn.w	r0, #21
    3e98:	4770      	bx	lr
    3e9a:	f06f 0015 	mvn.w	r0, #21
    3e9e:	4770      	bx	lr
    3ea0:	f06f 0015 	mvn.w	r0, #21
    3ea4:	4770      	bx	lr
    3ea6:	f06f 0015 	mvn.w	r0, #21
}
    3eaa:	4770      	bx	lr

00003eac <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
    3eac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3eae:	4604      	mov	r4, r0
    3eb0:	460f      	mov	r7, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
    3eb2:	f7ff ff91 	bl	3dd8 <validate_args>

	if (rv < 0) {
    3eb6:	1e06      	subs	r6, r0, #0
    3eb8:	db37      	blt.n	3f2a <onoff_request+0x7e>
    3eba:	f04f 0320 	mov.w	r3, #32
    3ebe:	f3ef 8211 	mrs	r2, BASEPRI
    3ec2:	f383 8812 	msr	BASEPRI_MAX, r3
    3ec6:	f3bf 8f6f 	isb	sy
		return rv;
	}

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    3eca:	8b25      	ldrh	r5, [r4, #24]
    3ecc:	f005 0507 	and.w	r5, r5, #7

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
    3ed0:	8b63      	ldrh	r3, [r4, #26]
    3ed2:	f64f 71ff 	movw	r1, #65535	; 0xffff
    3ed6:	428b      	cmp	r3, r1
    3ed8:	d02f      	beq.n	3f3a <onoff_request+0x8e>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
    3eda:	462e      	mov	r6, r5
	if (state == ONOFF_STATE_ON) {
    3edc:	2d02      	cmp	r5, #2
    3ede:	d00c      	beq.n	3efa <onoff_request+0x4e>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
	} else if ((state == ONOFF_STATE_OFF)
    3ee0:	b18d      	cbz	r5, 3f06 <onoff_request+0x5a>
		   || (state == ONOFF_STATE_TO_OFF)
    3ee2:	2d04      	cmp	r5, #4
    3ee4:	d00f      	beq.n	3f06 <onoff_request+0x5a>
		   || (state == ONOFF_STATE_TO_ON)) {
    3ee6:	2d06      	cmp	r5, #6
    3ee8:	d00d      	beq.n	3f06 <onoff_request+0x5a>
		/* Start if OFF, queue client */
		start = (state == ONOFF_STATE_OFF);
		add_client = true;
	} else if (state == ONOFF_STATE_RESETTING) {
    3eea:	2d05      	cmp	r5, #5
    3eec:	d01f      	beq.n	3f2e <onoff_request+0x82>
		rv = -ENOTSUP;
	} else {
		__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
		rv = -EIO;
    3eee:	f06f 0604 	mvn.w	r6, #4
	bool notify = false;            /* do client notification */
    3ef2:	2100      	movs	r1, #0
	bool start = false;             /* trigger a start transition */
    3ef4:	460b      	mov	r3, r1
	bool add_client = false;        /* add client to pending list */
    3ef6:	4608      	mov	r0, r1
    3ef8:	e00a      	b.n	3f10 <onoff_request+0x64>
		mgr->refs += 1U;
    3efa:	3301      	adds	r3, #1
    3efc:	8363      	strh	r3, [r4, #26]
		notify = true;
    3efe:	2101      	movs	r1, #1
	bool start = false;             /* trigger a start transition */
    3f00:	2300      	movs	r3, #0
	bool add_client = false;        /* add client to pending list */
    3f02:	4618      	mov	r0, r3
    3f04:	e004      	b.n	3f10 <onoff_request+0x64>
		start = (state == ONOFF_STATE_OFF);
    3f06:	fab5 f385 	clz	r3, r5
    3f0a:	095b      	lsrs	r3, r3, #5
	bool notify = false;            /* do client notification */
    3f0c:	2100      	movs	r1, #0
		add_client = true;
    3f0e:	2001      	movs	r0, #1
	}

out:
	if (add_client) {
    3f10:	b128      	cbz	r0, 3f1e <onoff_request+0x72>
	parent->next = child;
    3f12:	2000      	movs	r0, #0
    3f14:	6038      	str	r0, [r7, #0]
	return list->tail;
    3f16:	6860      	ldr	r0, [r4, #4]
Z_GENLIST_APPEND(slist, snode)
    3f18:	b1a8      	cbz	r0, 3f46 <onoff_request+0x9a>
	parent->next = child;
    3f1a:	6007      	str	r7, [r0, #0]
	list->tail = node;
    3f1c:	6067      	str	r7, [r4, #4]
		sys_slist_append(&mgr->clients, &cli->node);
	}

	if (start) {
    3f1e:	b9ab      	cbnz	r3, 3f4c <onoff_request+0xa0>
	__asm__ volatile(
    3f20:	f382 8811 	msr	BASEPRI, r2
    3f24:	f3bf 8f6f 	isb	sy
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
    3f28:	b9a9      	cbnz	r1, 3f56 <onoff_request+0xaa>
			notify_one(mgr, cli, state, 0);
		}
	}

	return rv;
}
    3f2a:	4630      	mov	r0, r6
    3f2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		rv = -ENOTSUP;
    3f2e:	f06f 0685 	mvn.w	r6, #133	; 0x85
	bool notify = false;            /* do client notification */
    3f32:	2100      	movs	r1, #0
	bool start = false;             /* trigger a start transition */
    3f34:	460b      	mov	r3, r1
	bool add_client = false;        /* add client to pending list */
    3f36:	4608      	mov	r0, r1
    3f38:	e7ea      	b.n	3f10 <onoff_request+0x64>
		rv = -EAGAIN;
    3f3a:	f06f 060a 	mvn.w	r6, #10
	bool notify = false;            /* do client notification */
    3f3e:	2100      	movs	r1, #0
	bool start = false;             /* trigger a start transition */
    3f40:	460b      	mov	r3, r1
	bool add_client = false;        /* add client to pending list */
    3f42:	4608      	mov	r0, r1
    3f44:	e7e4      	b.n	3f10 <onoff_request+0x64>
    3f46:	6067      	str	r7, [r4, #4]
	list->head = node;
    3f48:	6027      	str	r7, [r4, #0]
}
    3f4a:	e7e8      	b.n	3f1e <onoff_request+0x72>
		process_event(mgr, EVT_RECHECK, key);
    3f4c:	2102      	movs	r1, #2
    3f4e:	4620      	mov	r0, r4
    3f50:	f7fc faa8 	bl	4a4 <process_event>
    3f54:	e7e9      	b.n	3f2a <onoff_request+0x7e>
			notify_one(mgr, cli, state, 0);
    3f56:	2300      	movs	r3, #0
    3f58:	462a      	mov	r2, r5
    3f5a:	4639      	mov	r1, r7
    3f5c:	4620      	mov	r0, r4
    3f5e:	f7ff ff51 	bl	3e04 <notify_one>
    3f62:	e7e2      	b.n	3f2a <onoff_request+0x7e>

00003f64 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
    3f64:	b508      	push	{r3, lr}
    3f66:	4604      	mov	r4, r0
    3f68:	4608      	mov	r0, r1
    3f6a:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
    3f6c:	461a      	mov	r2, r3
    3f6e:	47a0      	blx	r4
	return z_impl_z_current_get();
    3f70:	f7ff fbd4 	bl	371c <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
    3f74:	f7fd fc3e 	bl	17f4 <z_impl_k_thread_abort>

00003f78 <extract_decimal>:
{
    3f78:	b410      	push	{r4}
    3f7a:	4604      	mov	r4, r0
	const char *sp = *str;
    3f7c:	6802      	ldr	r2, [r0, #0]
	size_t val = 0;
    3f7e:	2000      	movs	r0, #0
	while (isdigit((int)(unsigned char)*sp)) {
    3f80:	7813      	ldrb	r3, [r2, #0]
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
    3f82:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
    3f86:	2909      	cmp	r1, #9
    3f88:	d806      	bhi.n	3f98 <extract_decimal+0x20>
		val = 10U * val + *sp++ - '0';
    3f8a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    3f8e:	3201      	adds	r2, #1
    3f90:	eb03 0040 	add.w	r0, r3, r0, lsl #1
    3f94:	3830      	subs	r0, #48	; 0x30
    3f96:	e7f3      	b.n	3f80 <extract_decimal+0x8>
	*str = sp;
    3f98:	6022      	str	r2, [r4, #0]
}
    3f9a:	bc10      	pop	{r4}
    3f9c:	4770      	bx	lr

00003f9e <encode_uint>:
{
    3f9e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3fa2:	b083      	sub	sp, #12
    3fa4:	4604      	mov	r4, r0
    3fa6:	460d      	mov	r5, r1
    3fa8:	9201      	str	r2, [sp, #4]
    3faa:	469a      	mov	sl, r3
    3fac:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
	bool upcase = isupper((int)conv->specifier);
    3fb0:	78d3      	ldrb	r3, [r2, #3]
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
    3fb2:	f1a3 0b41 	sub.w	fp, r3, #65	; 0x41
	switch (specifier) {
    3fb6:	2b6f      	cmp	r3, #111	; 0x6f
    3fb8:	d00f      	beq.n	3fda <encode_uint+0x3c>
    3fba:	d906      	bls.n	3fca <encode_uint+0x2c>
    3fbc:	2b70      	cmp	r3, #112	; 0x70
    3fbe:	d00f      	beq.n	3fe0 <encode_uint+0x42>
    3fc0:	2b78      	cmp	r3, #120	; 0x78
    3fc2:	d110      	bne.n	3fe6 <encode_uint+0x48>
		return 16;
    3fc4:	f04f 0910 	mov.w	r9, #16
    3fc8:	e026      	b.n	4018 <encode_uint+0x7a>
	switch (specifier) {
    3fca:	2b58      	cmp	r3, #88	; 0x58
    3fcc:	d002      	beq.n	3fd4 <encode_uint+0x36>
    3fce:	f04f 090a 	mov.w	r9, #10
    3fd2:	e021      	b.n	4018 <encode_uint+0x7a>
		return 16;
    3fd4:	f04f 0910 	mov.w	r9, #16
    3fd8:	e01e      	b.n	4018 <encode_uint+0x7a>
		return 8;
    3fda:	f04f 0908 	mov.w	r9, #8
    3fde:	e01b      	b.n	4018 <encode_uint+0x7a>
		return 16;
    3fe0:	f04f 0910 	mov.w	r9, #16
    3fe4:	e018      	b.n	4018 <encode_uint+0x7a>
	switch (specifier) {
    3fe6:	f04f 090a 	mov.w	r9, #10
	char *bp = bps + (bpe - bps);
    3fea:	e015      	b.n	4018 <encode_uint+0x7a>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    3fec:	f1bb 0f19 	cmp.w	fp, #25
    3ff0:	d820      	bhi.n	4034 <encode_uint+0x96>
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
    3ff2:	b2d2      	uxtb	r2, r2
		*--bp = (lsv <= 9) ? ('0' + lsv)
    3ff4:	3237      	adds	r2, #55	; 0x37
    3ff6:	b2d2      	uxtb	r2, r2
    3ff8:	f808 2d01 	strb.w	r2, [r8, #-1]!
		value /= radix;
    3ffc:	4632      	mov	r2, r6
    3ffe:	463b      	mov	r3, r7
    4000:	4620      	mov	r0, r4
    4002:	4629      	mov	r1, r5
    4004:	f7fc f858 	bl	b8 <__aeabi_uldivmod>
	} while ((value != 0) && (bps < bp));
    4008:	42bd      	cmp	r5, r7
    400a:	bf08      	it	eq
    400c:	42b4      	cmpeq	r4, r6
    400e:	d315      	bcc.n	403c <encode_uint+0x9e>
    4010:	45d0      	cmp	r8, sl
    4012:	d913      	bls.n	403c <encode_uint+0x9e>
		value /= radix;
    4014:	4604      	mov	r4, r0
    4016:	460d      	mov	r5, r1
		unsigned int lsv = (unsigned int)(value % radix);
    4018:	464e      	mov	r6, r9
    401a:	2700      	movs	r7, #0
    401c:	464a      	mov	r2, r9
    401e:	463b      	mov	r3, r7
    4020:	4620      	mov	r0, r4
    4022:	4629      	mov	r1, r5
    4024:	f7fc f848 	bl	b8 <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    4028:	2a09      	cmp	r2, #9
    402a:	d8df      	bhi.n	3fec <encode_uint+0x4e>
    402c:	b2d2      	uxtb	r2, r2
    402e:	3230      	adds	r2, #48	; 0x30
    4030:	b2d2      	uxtb	r2, r2
    4032:	e7e1      	b.n	3ff8 <encode_uint+0x5a>
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
    4034:	b2d2      	uxtb	r2, r2
		*--bp = (lsv <= 9) ? ('0' + lsv)
    4036:	3257      	adds	r2, #87	; 0x57
    4038:	b2d2      	uxtb	r2, r2
    403a:	e7dd      	b.n	3ff8 <encode_uint+0x5a>
	if (conv->flag_hash) {
    403c:	9b01      	ldr	r3, [sp, #4]
    403e:	781b      	ldrb	r3, [r3, #0]
    4040:	f013 0f20 	tst.w	r3, #32
    4044:	d005      	beq.n	4052 <encode_uint+0xb4>
		if (radix == 8) {
    4046:	f1b9 0f08 	cmp.w	r9, #8
    404a:	d006      	beq.n	405a <encode_uint+0xbc>
		} else if (radix == 16) {
    404c:	f1b9 0f10 	cmp.w	r9, #16
    4050:	d009      	beq.n	4066 <encode_uint+0xc8>
}
    4052:	4640      	mov	r0, r8
    4054:	b003      	add	sp, #12
    4056:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			conv->altform_0 = true;
    405a:	9a01      	ldr	r2, [sp, #4]
    405c:	7893      	ldrb	r3, [r2, #2]
    405e:	f043 0308 	orr.w	r3, r3, #8
    4062:	7093      	strb	r3, [r2, #2]
    4064:	e7f5      	b.n	4052 <encode_uint+0xb4>
			conv->altform_0c = true;
    4066:	9a01      	ldr	r2, [sp, #4]
    4068:	7893      	ldrb	r3, [r2, #2]
    406a:	f043 0310 	orr.w	r3, r3, #16
    406e:	7093      	strb	r3, [r2, #2]
    4070:	e7ef      	b.n	4052 <encode_uint+0xb4>

00004072 <outs>:
{
    4072:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4076:	4607      	mov	r7, r0
    4078:	460e      	mov	r6, r1
    407a:	4614      	mov	r4, r2
    407c:	4698      	mov	r8, r3
	size_t count = 0;
    407e:	2500      	movs	r5, #0
	while ((sp < ep) || ((ep == NULL) && *sp)) {
    4080:	e006      	b.n	4090 <outs+0x1e>
		int rc = out((int)*sp++, ctx);
    4082:	4631      	mov	r1, r6
    4084:	f814 0b01 	ldrb.w	r0, [r4], #1
    4088:	47b8      	blx	r7
		if (rc < 0) {
    408a:	2800      	cmp	r0, #0
    408c:	db09      	blt.n	40a2 <outs+0x30>
		++count;
    408e:	3501      	adds	r5, #1
	while ((sp < ep) || ((ep == NULL) && *sp)) {
    4090:	4544      	cmp	r4, r8
    4092:	d3f6      	bcc.n	4082 <outs+0x10>
    4094:	f1b8 0f00 	cmp.w	r8, #0
    4098:	d102      	bne.n	40a0 <outs+0x2e>
    409a:	7823      	ldrb	r3, [r4, #0]
    409c:	2b00      	cmp	r3, #0
    409e:	d1f0      	bne.n	4082 <outs+0x10>
	return (int)count;
    40a0:	4628      	mov	r0, r5
}
    40a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000040a6 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_DISASSEMBLY, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
    40a6:	4770      	bx	lr

000040a8 <pm_policy_next_state>:
		}
	}

error:
	LOG_DBG("No suitable power state found for cpu: %d!", cpu);
	return (struct pm_state_info){PM_STATE_ACTIVE, 0, 0};
    40a8:	2200      	movs	r2, #0
    40aa:	6002      	str	r2, [r0, #0]
    40ac:	6042      	str	r2, [r0, #4]
    40ae:	6082      	str	r2, [r0, #8]
}
    40b0:	4770      	bx	lr

000040b2 <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    40b2:	b508      	push	{r3, lr}

	if (esf != NULL) {
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    40b4:	f001 f80e 	bl	50d4 <z_fatal_error>
}
    40b8:	bd08      	pop	{r3, pc}

000040ba <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
    40ba:	b508      	push	{r3, lr}
    40bc:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
    40be:	6800      	ldr	r0, [r0, #0]
    40c0:	f7ff fff7 	bl	40b2 <z_arm_fatal_error>

	memcpy(&esf_copy, esf, offsetof(z_arch_esf_t, extra_info));
	esf_copy.extra_info = (struct __extra_esf_info) { 0 };
	z_arm_fatal_error(reason, &esf_copy);
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
}
    40c4:	bd08      	pop	{r3, pc}

000040c6 <z_irq_spurious>:
 * called.
 *
 * @return N/A
 */
void z_irq_spurious(const void *unused)
{
    40c6:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
    40c8:	2100      	movs	r1, #0
    40ca:	2001      	movs	r0, #1
    40cc:	f7ff fff1 	bl	40b2 <z_arm_fatal_error>
}
    40d0:	bd08      	pop	{r3, pc}

000040d2 <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
    40d2:	b508      	push	{r3, lr}
	handler();
    40d4:	f7fd f8f2 	bl	12bc <z_SysNmiOnReset>
	z_arm_int_exit();
    40d8:	f7fd f9e8 	bl	14ac <z_arm_exc_exit>
}
    40dc:	bd08      	pop	{r3, pc}

000040de <memory_fault_recoverable>:
}
    40de:	2000      	movs	r0, #0
    40e0:	4770      	bx	lr

000040e2 <debug_monitor>:
	*recoverable = false;
    40e2:	2300      	movs	r3, #0
    40e4:	700b      	strb	r3, [r1, #0]
}
    40e6:	4770      	bx	lr

000040e8 <fault_handle>:
{
    40e8:	b508      	push	{r3, lr}
	*recoverable = false;
    40ea:	2300      	movs	r3, #0
    40ec:	7013      	strb	r3, [r2, #0]
	switch (fault) {
    40ee:	1ecb      	subs	r3, r1, #3
    40f0:	2b09      	cmp	r3, #9
    40f2:	d81a      	bhi.n	412a <fault_handle+0x42>
    40f4:	e8df f003 	tbb	[pc, r3]
    40f8:	110d0905 	.word	0x110d0905
    40fc:	19191919 	.word	0x19191919
    4100:	1419      	.short	0x1419
		reason = hard_fault(esf, recoverable);
    4102:	4611      	mov	r1, r2
    4104:	f7fd fa5a 	bl	15bc <hard_fault>
		break;
    4108:	e010      	b.n	412c <fault_handle+0x44>
		reason = mem_manage_fault(esf, 0, recoverable);
    410a:	2100      	movs	r1, #0
    410c:	f7fd fa12 	bl	1534 <mem_manage_fault>
		break;
    4110:	e00c      	b.n	412c <fault_handle+0x44>
		reason = bus_fault(esf, 0, recoverable);
    4112:	2100      	movs	r1, #0
    4114:	f7fd f9d8 	bl	14c8 <bus_fault>
		break;
    4118:	e008      	b.n	412c <fault_handle+0x44>
		reason = usage_fault(esf);
    411a:	f7fd f9f9 	bl	1510 <usage_fault>
		break;
    411e:	e005      	b.n	412c <fault_handle+0x44>
		debug_monitor(esf, recoverable);
    4120:	4611      	mov	r1, r2
    4122:	f7ff ffde 	bl	40e2 <debug_monitor>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    4126:	2000      	movs	r0, #0
		break;
    4128:	e000      	b.n	412c <fault_handle+0x44>
	*recoverable = false;
    412a:	2000      	movs	r0, #0
}
    412c:	bd08      	pop	{r3, pc}

0000412e <mpu_partition_is_valid>:
		((part->size & (part->size - 1U)) == 0U)
    412e:	6843      	ldr	r3, [r0, #4]
    4130:	1e5a      	subs	r2, r3, #1
		&&
    4132:	4213      	tst	r3, r2
    4134:	d106      	bne.n	4144 <mpu_partition_is_valid+0x16>
		&&
    4136:	2b1f      	cmp	r3, #31
    4138:	d906      	bls.n	4148 <mpu_partition_is_valid+0x1a>
		((part->start & (part->size - 1U)) == 0U);
    413a:	6803      	ldr	r3, [r0, #0]
		&&
    413c:	421a      	tst	r2, r3
    413e:	d005      	beq.n	414c <mpu_partition_is_valid+0x1e>
    4140:	2000      	movs	r0, #0
    4142:	4770      	bx	lr
    4144:	2000      	movs	r0, #0
    4146:	4770      	bx	lr
    4148:	2000      	movs	r0, #0
    414a:	4770      	bx	lr
    414c:	2001      	movs	r0, #1
}
    414e:	4770      	bx	lr

00004150 <region_allocate_and_init>:
	if (index > (get_num_regions() - 1U)) {
    4150:	2807      	cmp	r0, #7
    4152:	d805      	bhi.n	4160 <region_allocate_and_init+0x10>
{
    4154:	b510      	push	{r4, lr}
    4156:	4604      	mov	r4, r0
	region_init(index, region_conf);
    4158:	f7fd fb82 	bl	1860 <region_init>
	return index;
    415c:	4620      	mov	r0, r4
}
    415e:	bd10      	pop	{r4, pc}
		return -EINVAL;
    4160:	f06f 0015 	mvn.w	r0, #21
}
    4164:	4770      	bx	lr

00004166 <mpu_configure_region>:
{
    4166:	b500      	push	{lr}
    4168:	b085      	sub	sp, #20
	region_conf.base = new_region->start;
    416a:	680b      	ldr	r3, [r1, #0]
    416c:	9301      	str	r3, [sp, #4]
	get_region_attr_from_mpu_partition_info(&region_conf.attr,
    416e:	684b      	ldr	r3, [r1, #4]
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    4170:	688a      	ldr	r2, [r1, #8]
	if (size <= 32U) {
    4172:	2b20      	cmp	r3, #32
    4174:	d912      	bls.n	419c <mpu_configure_region+0x36>
	if (size > (1UL << 31)) {
    4176:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    417a:	d811      	bhi.n	41a0 <mpu_configure_region+0x3a>
	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
    417c:	3b01      	subs	r3, #1
    417e:	fab3 f383 	clz	r3, r3
    4182:	f1c3 031f 	rsb	r3, r3, #31
    4186:	005b      	lsls	r3, r3, #1
    4188:	f003 033e 	and.w	r3, r3, #62	; 0x3e
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    418c:	4313      	orrs	r3, r2
    418e:	9303      	str	r3, [sp, #12]
	return region_allocate_and_init(index,
    4190:	a901      	add	r1, sp, #4
    4192:	f7ff ffdd 	bl	4150 <region_allocate_and_init>
}
    4196:	b005      	add	sp, #20
    4198:	f85d fb04 	ldr.w	pc, [sp], #4
		return REGION_32B;
    419c:	2308      	movs	r3, #8
    419e:	e7f5      	b.n	418c <mpu_configure_region+0x26>
		return REGION_4G;
    41a0:	233e      	movs	r3, #62	; 0x3e
    41a2:	e7f3      	b.n	418c <mpu_configure_region+0x26>

000041a4 <mpu_configure_regions>:
{
    41a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    41a8:	4680      	mov	r8, r0
    41aa:	460f      	mov	r7, r1
    41ac:	4699      	mov	r9, r3
	int reg_index = start_reg_index;
    41ae:	4616      	mov	r6, r2
	for (i = 0; i < regions_num; i++) {
    41b0:	2500      	movs	r5, #0
    41b2:	e009      	b.n	41c8 <mpu_configure_regions+0x24>
		reg_index = mpu_configure_region(reg_index, &regions[i]);
    41b4:	4621      	mov	r1, r4
    41b6:	b2f0      	uxtb	r0, r6
    41b8:	f7ff ffd5 	bl	4166 <mpu_configure_region>
    41bc:	4606      	mov	r6, r0
		if (reg_index == -EINVAL) {
    41be:	f110 0f16 	cmn.w	r0, #22
    41c2:	d014      	beq.n	41ee <mpu_configure_regions+0x4a>
		reg_index++;
    41c4:	3601      	adds	r6, #1
	for (i = 0; i < regions_num; i++) {
    41c6:	3501      	adds	r5, #1
    41c8:	42bd      	cmp	r5, r7
    41ca:	da10      	bge.n	41ee <mpu_configure_regions+0x4a>
		if (regions[i].size == 0U) {
    41cc:	eb05 0445 	add.w	r4, r5, r5, lsl #1
    41d0:	eb08 0484 	add.w	r4, r8, r4, lsl #2
    41d4:	6862      	ldr	r2, [r4, #4]
    41d6:	2a00      	cmp	r2, #0
    41d8:	d0f5      	beq.n	41c6 <mpu_configure_regions+0x22>
		if (do_sanity_check &&
    41da:	f1b9 0f00 	cmp.w	r9, #0
    41de:	d0e9      	beq.n	41b4 <mpu_configure_regions+0x10>
				(!mpu_partition_is_valid(&regions[i]))) {
    41e0:	4620      	mov	r0, r4
    41e2:	f7ff ffa4 	bl	412e <mpu_partition_is_valid>
		if (do_sanity_check &&
    41e6:	2800      	cmp	r0, #0
    41e8:	d1e4      	bne.n	41b4 <mpu_configure_regions+0x10>
			return -EINVAL;
    41ea:	f06f 0615 	mvn.w	r6, #21
}
    41ee:	4630      	mov	r0, r6
    41f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000041f4 <arm_core_mpu_configure_static_mpu_regions>:
{
    41f4:	b508      	push	{r3, lr}
	if (mpu_configure_static_mpu_regions(static_regions, regions_num,
    41f6:	f7fd fb43 	bl	1880 <mpu_configure_static_mpu_regions>
}
    41fa:	bd08      	pop	{r3, pc}

000041fc <arm_core_mpu_configure_dynamic_mpu_regions>:
{
    41fc:	b508      	push	{r3, lr}
	if (mpu_configure_dynamic_mpu_regions(dynamic_regions, regions_num)
    41fe:	f7fd fb49 	bl	1894 <mpu_configure_dynamic_mpu_regions>
}
    4202:	bd08      	pop	{r3, pc}

00004204 <strncpy>:

char *strncpy(char *ZRESTRICT d, const char *ZRESTRICT s, size_t n)
{
	char *dest = d;

	while ((n > 0) && *s != '\0') {
    4204:	4603      	mov	r3, r0
    4206:	b1a2      	cbz	r2, 4232 <strncpy+0x2e>
{
    4208:	b410      	push	{r4}
	while ((n > 0) && *s != '\0') {
    420a:	780c      	ldrb	r4, [r1, #0]
    420c:	b12c      	cbz	r4, 421a <strncpy+0x16>
		*d = *s;
    420e:	f803 4b01 	strb.w	r4, [r3], #1
		s++;
    4212:	3101      	adds	r1, #1
		d++;
		n--;
    4214:	3a01      	subs	r2, #1
	while ((n > 0) && *s != '\0') {
    4216:	2a00      	cmp	r2, #0
    4218:	d1f7      	bne.n	420a <strncpy+0x6>
	}

	while (n > 0) {
    421a:	b122      	cbz	r2, 4226 <strncpy+0x22>
		*d = '\0';
    421c:	2100      	movs	r1, #0
    421e:	f803 1b01 	strb.w	r1, [r3], #1
		d++;
		n--;
    4222:	3a01      	subs	r2, #1
    4224:	e7f9      	b.n	421a <strncpy+0x16>
	}

	return dest;
}
    4226:	bc10      	pop	{r4}
    4228:	4770      	bx	lr
		*d = '\0';
    422a:	2100      	movs	r1, #0
    422c:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
    4230:	3a01      	subs	r2, #1
	while (n > 0) {
    4232:	2a00      	cmp	r2, #0
    4234:	d1f9      	bne.n	422a <strncpy+0x26>
    4236:	4770      	bx	lr

00004238 <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
    4238:	4603      	mov	r3, r0
	size_t n = 0;
    423a:	2000      	movs	r0, #0

	while (*s != '\0') {
    423c:	781a      	ldrb	r2, [r3, #0]
    423e:	b112      	cbz	r2, 4246 <strlen+0xe>
		s++;
    4240:	3301      	adds	r3, #1
		n++;
    4242:	3001      	adds	r0, #1
    4244:	e7fa      	b.n	423c <strlen+0x4>
	}

	return n;
}
    4246:	4770      	bx	lr

00004248 <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
    4248:	4603      	mov	r3, r0
	size_t n = 0;
    424a:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
    424c:	781a      	ldrb	r2, [r3, #0]
    424e:	b122      	cbz	r2, 425a <strnlen+0x12>
    4250:	4288      	cmp	r0, r1
    4252:	d202      	bcs.n	425a <strnlen+0x12>
		s++;
    4254:	3301      	adds	r3, #1
		n++;
    4256:	3001      	adds	r0, #1
    4258:	e7f8      	b.n	424c <strnlen+0x4>
	}

	return n;
}
    425a:	4770      	bx	lr

0000425c <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
    425c:	7803      	ldrb	r3, [r0, #0]
    425e:	780a      	ldrb	r2, [r1, #0]
    4260:	4293      	cmp	r3, r2
    4262:	d103      	bne.n	426c <strcmp+0x10>
    4264:	b113      	cbz	r3, 426c <strcmp+0x10>
		s1++;
    4266:	3001      	adds	r0, #1
		s2++;
    4268:	3101      	adds	r1, #1
    426a:	e7f7      	b.n	425c <strcmp>
	}

	return *s1 - *s2;
}
    426c:	1a98      	subs	r0, r3, r2
    426e:	4770      	bx	lr

00004270 <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *ZRESTRICT d, const void *ZRESTRICT s, size_t n)
{
    4270:	b410      	push	{r4}
	const unsigned char *s_byte = (const unsigned char *)s;

#if !defined(CONFIG_MINIMAL_LIBC_OPTIMIZE_STRING_FOR_SIZE)
	const uintptr_t mask = sizeof(mem_word_t) - 1;

	if ((((uintptr_t)d ^ (uintptr_t)s_byte) & mask) == 0) {
    4272:	ea80 0301 	eor.w	r3, r0, r1
    4276:	f013 0f03 	tst.w	r3, #3
    427a:	d001      	beq.n	4280 <memcpy+0x10>
	unsigned char *d_byte = (unsigned char *)d;
    427c:	4603      	mov	r3, r0
    427e:	e017      	b.n	42b0 <memcpy+0x40>
    4280:	4603      	mov	r3, r0

		/* do byte-sized copying until word-aligned or finished */

		while (((uintptr_t)d_byte) & mask) {
    4282:	f013 0f03 	tst.w	r3, #3
    4286:	d00b      	beq.n	42a0 <memcpy+0x30>
			if (n == 0) {
    4288:	b1a2      	cbz	r2, 42b4 <memcpy+0x44>
				return d;
			}
			*(d_byte++) = *(s_byte++);
    428a:	f811 4b01 	ldrb.w	r4, [r1], #1
    428e:	f803 4b01 	strb.w	r4, [r3], #1
			n--;
    4292:	3a01      	subs	r2, #1
    4294:	e7f5      	b.n	4282 <memcpy+0x12>

		mem_word_t *d_word = (mem_word_t *)d_byte;
		const mem_word_t *s_word = (const mem_word_t *)s_byte;

		while (n >= sizeof(mem_word_t)) {
			*(d_word++) = *(s_word++);
    4296:	f851 4b04 	ldr.w	r4, [r1], #4
    429a:	f843 4b04 	str.w	r4, [r3], #4
			n -= sizeof(mem_word_t);
    429e:	3a04      	subs	r2, #4
		while (n >= sizeof(mem_word_t)) {
    42a0:	2a03      	cmp	r2, #3
    42a2:	d8f8      	bhi.n	4296 <memcpy+0x26>
    42a4:	e004      	b.n	42b0 <memcpy+0x40>
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
		*(d_byte++) = *(s_byte++);
    42a6:	f811 4b01 	ldrb.w	r4, [r1], #1
    42aa:	f803 4b01 	strb.w	r4, [r3], #1
		n--;
    42ae:	3a01      	subs	r2, #1
	while (n > 0) {
    42b0:	2a00      	cmp	r2, #0
    42b2:	d1f8      	bne.n	42a6 <memcpy+0x36>
	}

	return d;
}
    42b4:	bc10      	pop	{r4}
    42b6:	4770      	bx	lr

000042b8 <memset>:
 *
 * @return pointer to start of buffer
 */

void *memset(void *buf, int c, size_t n)
{
    42b8:	b410      	push	{r4}
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
    42ba:	b2cc      	uxtb	r4, r1
	unsigned char *d_byte = (unsigned char *)buf;
    42bc:	4603      	mov	r3, r0

#if !defined(CONFIG_MINIMAL_LIBC_OPTIMIZE_STRING_FOR_SIZE)
	while (((uintptr_t)d_byte) & (sizeof(mem_word_t) - 1)) {
    42be:	f013 0f03 	tst.w	r3, #3
    42c2:	d004      	beq.n	42ce <memset+0x16>
		if (n == 0) {
    42c4:	b19a      	cbz	r2, 42ee <memset+0x36>
			return buf;
		}
		*(d_byte++) = c_byte;
    42c6:	f803 4b01 	strb.w	r4, [r3], #1
		n--;
    42ca:	3a01      	subs	r2, #1
    42cc:	e7f7      	b.n	42be <memset+0x6>
	}

	/* do word-sized initialization as long as possible */

	mem_word_t *d_word = (mem_word_t *)d_byte;
	mem_word_t c_word = (mem_word_t)c_byte;
    42ce:	b2c9      	uxtb	r1, r1

	c_word |= c_word << 8;
    42d0:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
	c_word |= c_word << 16;
    42d4:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
#if Z_MEM_WORD_T_WIDTH > 32
	c_word |= c_word << 32;
#endif

	while (n >= sizeof(mem_word_t)) {
    42d8:	2a03      	cmp	r2, #3
    42da:	d906      	bls.n	42ea <memset+0x32>
		*(d_word++) = c_word;
    42dc:	f843 1b04 	str.w	r1, [r3], #4
		n -= sizeof(mem_word_t);
    42e0:	3a04      	subs	r2, #4
    42e2:	e7f9      	b.n	42d8 <memset+0x20>

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
		*(d_byte++) = c_byte;
    42e4:	f803 4b01 	strb.w	r4, [r3], #1
		n--;
    42e8:	3a01      	subs	r2, #1
	while (n > 0) {
    42ea:	2a00      	cmp	r2, #0
    42ec:	d1fa      	bne.n	42e4 <memset+0x2c>
	}

	return buf;
}
    42ee:	bc10      	pop	{r4}
    42f0:	4770      	bx	lr

000042f2 <nordicsemi_nrf52_init>:
	__asm__ volatile(
    42f2:	f04f 0220 	mov.w	r2, #32
    42f6:	f3ef 8311 	mrs	r3, BASEPRI
    42fa:	f382 8812 	msr	BASEPRI_MAX, r2
    42fe:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
    4302:	f383 8811 	msr	BASEPRI, r3
    4306:	f3bf 8f6f 	isb	sy
}
    430a:	2000      	movs	r0, #0
    430c:	4770      	bx	lr

0000430e <pm_power_state_set>:
#include <logging/log.h>
LOG_MODULE_DECLARE(soc, CONFIG_SOC_LOG_LEVEL);

/* Invoke Low Power/System Off specific Tasks */
__weak void pm_power_state_set(struct pm_state_info info)
{
    430e:	b084      	sub	sp, #16
    4310:	ab04      	add	r3, sp, #16
    4312:	e903 0007 	stmdb	r3, {r0, r1, r2}
	switch (info.state) {
    4316:	f89d 3004 	ldrb.w	r3, [sp, #4]
    431a:	2b06      	cmp	r3, #6
    431c:	d001      	beq.n	4322 <pm_power_state_set+0x14>
		break;
	default:
		LOG_DBG("Unsupported power state %u", info.state);
		break;
	}
}
    431e:	b004      	add	sp, #16
    4320:	4770      	bx	lr
    p_reg->SYSTEMOFF = POWER_SYSTEMOFF_SYSTEMOFF_Enter;
    4322:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4326:	2201      	movs	r2, #1
    4328:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
    432c:	f3bf 8f4f 	dsb	sy
        __WFE();
    4330:	bf20      	wfe
    while (true)
    4332:	e7fd      	b.n	4330 <pm_power_state_set+0x22>

00004334 <pm_power_state_exit_post_ops>:

/* Handle SOC specific activity after Low Power Mode Exit */
__weak void pm_power_state_exit_post_ops(struct pm_state_info info)
{
    4334:	b084      	sub	sp, #16
    4336:	ab04      	add	r3, sp, #16
    4338:	e903 0007 	stmdb	r3, {r0, r1, r2}
    433c:	2300      	movs	r3, #0
    433e:	f383 8811 	msr	BASEPRI, r3
    4342:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
    4346:	b004      	add	sp, #16
    4348:	4770      	bx	lr

0000434a <get_sub_data>:
	struct nrf_clock_control_data *data = dev->data;
    434a:	6900      	ldr	r0, [r0, #16]
	return &data->subsys[type];
    434c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    4350:	0089      	lsls	r1, r1, #2
    4352:	3138      	adds	r1, #56	; 0x38
}
    4354:	4408      	add	r0, r1
    4356:	4770      	bx	lr

00004358 <get_sub_config>:
	const struct nrf_clock_control_config *config =
    4358:	6840      	ldr	r0, [r0, #4]
}
    435a:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
    435e:	4770      	bx	lr

00004360 <get_onoff_manager>:
	struct nrf_clock_control_data *data = dev->data;
    4360:	6900      	ldr	r0, [r0, #16]
	return &data->mgr[type];
    4362:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
}
    4366:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    436a:	4770      	bx	lr

0000436c <get_status>:
{
    436c:	b508      	push	{r3, lr}
	return GET_STATUS(get_sub_data(dev, type)->flags);
    436e:	b2c9      	uxtb	r1, r1
    4370:	f7ff ffeb 	bl	434a <get_sub_data>
    4374:	6880      	ldr	r0, [r0, #8]
}
    4376:	f000 0007 	and.w	r0, r0, #7
    437a:	bd08      	pop	{r3, pc}

0000437c <set_off_state>:
	__asm__ volatile(
    437c:	f04f 0320 	mov.w	r3, #32
    4380:	f3ef 8211 	mrs	r2, BASEPRI
    4384:	f383 8812 	msr	BASEPRI_MAX, r3
    4388:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    438c:	6803      	ldr	r3, [r0, #0]
	if ((current_ctx != 0) && (current_ctx != ctx)) {
    438e:	f013 03c0 	ands.w	r3, r3, #192	; 0xc0
    4392:	d001      	beq.n	4398 <set_off_state+0x1c>
    4394:	428b      	cmp	r3, r1
    4396:	d107      	bne.n	43a8 <set_off_state+0x2c>
		*flags = CLOCK_CONTROL_STATUS_OFF;
    4398:	2301      	movs	r3, #1
    439a:	6003      	str	r3, [r0, #0]
	int err = 0;
    439c:	2000      	movs	r0, #0
	__asm__ volatile(
    439e:	f382 8811 	msr	BASEPRI, r2
    43a2:	f3bf 8f6f 	isb	sy
}
    43a6:	4770      	bx	lr
		err = -EPERM;
    43a8:	f04f 30ff 	mov.w	r0, #4294967295
    43ac:	e7f7      	b.n	439e <set_off_state+0x22>

000043ae <set_starting_state>:
{
    43ae:	b410      	push	{r4}
	__asm__ volatile(
    43b0:	f04f 0320 	mov.w	r3, #32
    43b4:	f3ef 8211 	mrs	r2, BASEPRI
    43b8:	f383 8812 	msr	BASEPRI_MAX, r3
    43bc:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    43c0:	6803      	ldr	r3, [r0, #0]
    43c2:	f003 04c0 	and.w	r4, r3, #192	; 0xc0
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
    43c6:	f003 0307 	and.w	r3, r3, #7
    43ca:	2b01      	cmp	r3, #1
    43cc:	d009      	beq.n	43e2 <set_starting_state+0x34>
	} else if (current_ctx != ctx) {
    43ce:	428c      	cmp	r4, r1
    43d0:	d00a      	beq.n	43e8 <set_starting_state+0x3a>
		err = -EPERM;
    43d2:	f04f 30ff 	mov.w	r0, #4294967295
	__asm__ volatile(
    43d6:	f382 8811 	msr	BASEPRI, r2
    43da:	f3bf 8f6f 	isb	sy
}
    43de:	bc10      	pop	{r4}
    43e0:	4770      	bx	lr
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
    43e2:	6001      	str	r1, [r0, #0]
	int err = 0;
    43e4:	2000      	movs	r0, #0
    43e6:	e7f6      	b.n	43d6 <set_starting_state+0x28>
		err = -EALREADY;
    43e8:	f06f 0077 	mvn.w	r0, #119	; 0x77
    43ec:	e7f3      	b.n	43d6 <set_starting_state+0x28>

000043ee <set_on_state>:
	__asm__ volatile(
    43ee:	f04f 0320 	mov.w	r3, #32
    43f2:	f3ef 8211 	mrs	r2, BASEPRI
    43f6:	f383 8812 	msr	BASEPRI_MAX, r3
    43fa:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
    43fe:	6803      	ldr	r3, [r0, #0]
    4400:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    4404:	f043 0302 	orr.w	r3, r3, #2
    4408:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
    440a:	f382 8811 	msr	BASEPRI, r2
    440e:	f3bf 8f6f 	isb	sy
}
    4412:	4770      	bx	lr

00004414 <clkstarted_handle>:
{
    4414:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4416:	4606      	mov	r6, r0
    4418:	460c      	mov	r4, r1
	struct nrf_clock_control_sub_data *sub_data = get_sub_data(dev, type);
    441a:	f7ff ff96 	bl	434a <get_sub_data>
	clock_control_cb_t callback = sub_data->cb;
    441e:	6805      	ldr	r5, [r0, #0]
	void *user_data = sub_data->user_data;
    4420:	6847      	ldr	r7, [r0, #4]
	sub_data->cb = NULL;
    4422:	2300      	movs	r3, #0
    4424:	f840 3b08 	str.w	r3, [r0], #8
	set_on_state(&sub_data->flags);
    4428:	f7ff ffe1 	bl	43ee <set_on_state>
	if (callback) {
    442c:	b11d      	cbz	r5, 4436 <clkstarted_handle+0x22>
		callback(dev, (clock_control_subsys_t)type, user_data);
    442e:	463a      	mov	r2, r7
    4430:	4621      	mov	r1, r4
    4432:	4630      	mov	r0, r6
    4434:	47a8      	blx	r5
}
    4436:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00004438 <stop>:
{
    4438:	b570      	push	{r4, r5, r6, lr}
    443a:	4606      	mov	r6, r0
    443c:	4615      	mov	r5, r2
	enum clock_control_nrf_type type = (enum clock_control_nrf_type)subsys;
    443e:	b2cc      	uxtb	r4, r1
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
    4440:	4621      	mov	r1, r4
    4442:	f7ff ff82 	bl	434a <get_sub_data>
	err = set_off_state(&subdata->flags, ctx);
    4446:	4629      	mov	r1, r5
    4448:	3008      	adds	r0, #8
    444a:	f7ff ff97 	bl	437c <set_off_state>
	if (err < 0) {
    444e:	2800      	cmp	r0, #0
    4450:	db06      	blt.n	4460 <stop+0x28>
	get_sub_config(dev, type)->stop();
    4452:	4621      	mov	r1, r4
    4454:	4630      	mov	r0, r6
    4456:	f7ff ff7f 	bl	4358 <get_sub_config>
    445a:	6843      	ldr	r3, [r0, #4]
    445c:	4798      	blx	r3
	return 0;
    445e:	2000      	movs	r0, #0
}
    4460:	bd70      	pop	{r4, r5, r6, pc}

00004462 <api_stop>:
{
    4462:	b508      	push	{r3, lr}
	return stop(dev, subsys, CTX_API);
    4464:	2280      	movs	r2, #128	; 0x80
    4466:	f7ff ffe7 	bl	4438 <stop>
}
    446a:	bd08      	pop	{r3, pc}

0000446c <async_start>:
{
    446c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4470:	4606      	mov	r6, r0
    4472:	4690      	mov	r8, r2
    4474:	461f      	mov	r7, r3
	enum clock_control_nrf_type type = (enum clock_control_nrf_type)subsys;
    4476:	b2cd      	uxtb	r5, r1
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
    4478:	4629      	mov	r1, r5
    447a:	f7ff ff66 	bl	434a <get_sub_data>
    447e:	4604      	mov	r4, r0
	err = set_starting_state(&subdata->flags, ctx);
    4480:	9906      	ldr	r1, [sp, #24]
    4482:	3008      	adds	r0, #8
    4484:	f7ff ff93 	bl	43ae <set_starting_state>
	if (err < 0) {
    4488:	2800      	cmp	r0, #0
    448a:	db09      	blt.n	44a0 <async_start+0x34>
	subdata->cb = cb;
    448c:	f8c4 8000 	str.w	r8, [r4]
	subdata->user_data = user_data;
    4490:	6067      	str	r7, [r4, #4]
	 get_sub_config(dev, type)->start();
    4492:	4629      	mov	r1, r5
    4494:	4630      	mov	r0, r6
    4496:	f7ff ff5f 	bl	4358 <get_sub_config>
    449a:	6803      	ldr	r3, [r0, #0]
    449c:	4798      	blx	r3
	return 0;
    449e:	2000      	movs	r0, #0
}
    44a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000044a4 <api_start>:
{
    44a4:	b510      	push	{r4, lr}
    44a6:	b082      	sub	sp, #8
	return async_start(dev, subsys, cb, user_data, CTX_API);
    44a8:	2480      	movs	r4, #128	; 0x80
    44aa:	9400      	str	r4, [sp, #0]
    44ac:	f7ff ffde 	bl	446c <async_start>
}
    44b0:	b002      	add	sp, #8
    44b2:	bd10      	pop	{r4, pc}

000044b4 <onoff_started_callback>:
{
    44b4:	b510      	push	{r4, lr}
    44b6:	4614      	mov	r4, r2
	struct onoff_manager *mgr = get_onoff_manager(dev, type);
    44b8:	b2c9      	uxtb	r1, r1
    44ba:	f7ff ff51 	bl	4360 <get_onoff_manager>
	notify(mgr, 0);
    44be:	2100      	movs	r1, #0
    44c0:	47a0      	blx	r4
}
    44c2:	bd10      	pop	{r4, pc}

000044c4 <hfclk_start>:
{
    44c4:	b508      	push	{r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
    44c6:	2001      	movs	r0, #1
    44c8:	f7fe fa2c 	bl	2924 <nrfx_clock_start>
}
    44cc:	bd08      	pop	{r3, pc}

000044ce <lfclk_start>:
{
    44ce:	b508      	push	{r3, lr}
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
    44d0:	2000      	movs	r0, #0
    44d2:	f7fe fa27 	bl	2924 <nrfx_clock_start>
}
    44d6:	bd08      	pop	{r3, pc}

000044d8 <hfclk_stop>:
{
    44d8:	b508      	push	{r3, lr}
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
    44da:	2001      	movs	r0, #1
    44dc:	f7fe fa5a 	bl	2994 <nrfx_clock_stop>
}
    44e0:	bd08      	pop	{r3, pc}

000044e2 <lfclk_stop>:
{
    44e2:	b508      	push	{r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    44e4:	2000      	movs	r0, #0
    44e6:	f7fe fa55 	bl	2994 <nrfx_clock_stop>
}
    44ea:	bd08      	pop	{r3, pc}

000044ec <blocking_start_callback>:
{
    44ec:	b508      	push	{r3, lr}
    44ee:	4610      	mov	r0, r2
		arch_syscall_invoke1(*(uintptr_t *)&sem, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    44f0:	f7fe fd6a 	bl	2fc8 <z_impl_k_sem_give>
}
    44f4:	bd08      	pop	{r3, pc}

000044f6 <uarte_nrfx_pins_configure>:
	return dev->config;
    44f6:	6843      	ldr	r3, [r0, #4]
	if (!sleep) {
    44f8:	2900      	cmp	r1, #0
    44fa:	d15d      	bne.n	45b8 <uarte_nrfx_pins_configure+0xc2>
		if (cfg->tx_pin != NRF_UARTE_PSEL_DISCONNECTED) {
    44fc:	68da      	ldr	r2, [r3, #12]
    44fe:	f1b2 3fff 	cmp.w	r2, #4294967295
    4502:	d010      	beq.n	4526 <uarte_nrfx_pins_configure+0x30>
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;
    4504:	f002 021f 	and.w	r2, r2, #31
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    4508:	2101      	movs	r1, #1
    450a:	fa01 f202 	lsl.w	r2, r1, r2
    p_reg->OUTSET = set_mask;
    450e:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    4512:	f8c1 2508 	str.w	r2, [r1, #1288]	; 0x508
			nrf_gpio_cfg_output(cfg->tx_pin);
    4516:	68da      	ldr	r2, [r3, #12]
    *p_pin = pin_number & 0x1F;
    4518:	f002 021f 	and.w	r2, r2, #31
    reg->PIN_CNF[pin_number] = cnf;
    451c:	f502 72e0 	add.w	r2, r2, #448	; 0x1c0
    4520:	2003      	movs	r0, #3
    4522:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
		if (cfg->rx_pin != NRF_UARTE_PSEL_DISCONNECTED) {
    4526:	691a      	ldr	r2, [r3, #16]
    4528:	f1b2 3fff 	cmp.w	r2, #4294967295
    452c:	d00c      	beq.n	4548 <uarte_nrfx_pins_configure+0x52>
					   (cfg->rx_pull_up ?
    452e:	7f19      	ldrb	r1, [r3, #28]
			nrf_gpio_cfg_input(cfg->rx_pin,
    4530:	2900      	cmp	r1, #0
    4532:	d03d      	beq.n	45b0 <uarte_nrfx_pins_configure+0xba>
    4534:	2103      	movs	r1, #3
    *p_pin = pin_number & 0x1F;
    4536:	f002 021f 	and.w	r2, r2, #31
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    453a:	0089      	lsls	r1, r1, #2
    reg->PIN_CNF[pin_number] = cnf;
    453c:	f502 72e0 	add.w	r2, r2, #448	; 0x1c0
    4540:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
    4544:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
		if (cfg->rts_pin != NRF_UARTE_PSEL_DISCONNECTED) {
    4548:	695a      	ldr	r2, [r3, #20]
    454a:	f1b2 3fff 	cmp.w	r2, #4294967295
    454e:	d010      	beq.n	4572 <uarte_nrfx_pins_configure+0x7c>
    *p_pin = pin_number & 0x1F;
    4550:	f002 021f 	and.w	r2, r2, #31
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    4554:	2101      	movs	r1, #1
    4556:	fa01 f202 	lsl.w	r2, r1, r2
    p_reg->OUTSET = set_mask;
    455a:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    455e:	f8c1 2508 	str.w	r2, [r1, #1288]	; 0x508
			nrf_gpio_cfg_output(cfg->rts_pin);
    4562:	695a      	ldr	r2, [r3, #20]
    *p_pin = pin_number & 0x1F;
    4564:	f002 021f 	and.w	r2, r2, #31
    reg->PIN_CNF[pin_number] = cnf;
    4568:	f502 72e0 	add.w	r2, r2, #448	; 0x1c0
    456c:	2003      	movs	r0, #3
    456e:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
		if (cfg->cts_pin != NRF_UARTE_PSEL_DISCONNECTED) {
    4572:	699a      	ldr	r2, [r3, #24]
    4574:	f1b2 3fff 	cmp.w	r2, #4294967295
    4578:	d00b      	beq.n	4592 <uarte_nrfx_pins_configure+0x9c>
					   (cfg->cts_pull_up ?
    457a:	7f59      	ldrb	r1, [r3, #29]
			nrf_gpio_cfg_input(cfg->cts_pin,
    457c:	b1d1      	cbz	r1, 45b4 <uarte_nrfx_pins_configure+0xbe>
    457e:	2103      	movs	r1, #3
    *p_pin = pin_number & 0x1F;
    4580:	f002 021f 	and.w	r2, r2, #31
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    4584:	0089      	lsls	r1, r1, #2
    reg->PIN_CNF[pin_number] = cnf;
    4586:	f502 72e0 	add.w	r2, r2, #448	; 0x1c0
    458a:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
    458e:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
	nrf_uarte_txrx_pins_set(cfg->uarte_regs, cfg->tx_pin, cfg->rx_pin);
    4592:	681a      	ldr	r2, [r3, #0]
    4594:	68d8      	ldr	r0, [r3, #12]
    4596:	6919      	ldr	r1, [r3, #16]
    p_reg->PSEL.TXD = pseltxd;
    4598:	f8c2 050c 	str.w	r0, [r2, #1292]	; 0x50c
    p_reg->PSEL.RXD = pselrxd;
    459c:	f8c2 1514 	str.w	r1, [r2, #1300]	; 0x514
	nrf_uarte_hwfc_pins_set(cfg->uarte_regs, cfg->rts_pin, cfg->cts_pin);
    45a0:	681a      	ldr	r2, [r3, #0]
    45a2:	6959      	ldr	r1, [r3, #20]
    45a4:	699b      	ldr	r3, [r3, #24]
    p_reg->PSEL.RTS = pselrts;
    45a6:	f8c2 1508 	str.w	r1, [r2, #1288]	; 0x508
    p_reg->PSEL.CTS = pselcts;
    45aa:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
}
    45ae:	4770      	bx	lr
			nrf_gpio_cfg_input(cfg->rx_pin,
    45b0:	2100      	movs	r1, #0
    45b2:	e7c0      	b.n	4536 <uarte_nrfx_pins_configure+0x40>
			nrf_gpio_cfg_input(cfg->cts_pin,
    45b4:	2100      	movs	r1, #0
    45b6:	e7e3      	b.n	4580 <uarte_nrfx_pins_configure+0x8a>
		if (cfg->tx_pin != NRF_UARTE_PSEL_DISCONNECTED) {
    45b8:	68da      	ldr	r2, [r3, #12]
    45ba:	f1b2 3fff 	cmp.w	r2, #4294967295
    45be:	d008      	beq.n	45d2 <uarte_nrfx_pins_configure+0xdc>
    *p_pin = pin_number & 0x1F;
    45c0:	f002 021f 	and.w	r2, r2, #31
    reg->PIN_CNF[pin_number] = cnf;
    45c4:	f502 72e0 	add.w	r2, r2, #448	; 0x1c0
    45c8:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    45cc:	2002      	movs	r0, #2
    45ce:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
		if (cfg->rx_pin != NRF_UARTE_PSEL_DISCONNECTED) {
    45d2:	691a      	ldr	r2, [r3, #16]
    45d4:	f1b2 3fff 	cmp.w	r2, #4294967295
    45d8:	d008      	beq.n	45ec <uarte_nrfx_pins_configure+0xf6>
    *p_pin = pin_number & 0x1F;
    45da:	f002 021f 	and.w	r2, r2, #31
    reg->PIN_CNF[pin_number] = cnf;
    45de:	f502 72e0 	add.w	r2, r2, #448	; 0x1c0
    45e2:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    45e6:	2002      	movs	r0, #2
    45e8:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
		if (cfg->rts_pin != NRF_UARTE_PSEL_DISCONNECTED) {
    45ec:	695a      	ldr	r2, [r3, #20]
    45ee:	f1b2 3fff 	cmp.w	r2, #4294967295
    45f2:	d008      	beq.n	4606 <uarte_nrfx_pins_configure+0x110>
    *p_pin = pin_number & 0x1F;
    45f4:	f002 021f 	and.w	r2, r2, #31
    reg->PIN_CNF[pin_number] = cnf;
    45f8:	f502 72e0 	add.w	r2, r2, #448	; 0x1c0
    45fc:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    4600:	2002      	movs	r0, #2
    4602:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
		if (cfg->cts_pin != NRF_UARTE_PSEL_DISCONNECTED) {
    4606:	699a      	ldr	r2, [r3, #24]
    4608:	f1b2 3fff 	cmp.w	r2, #4294967295
    460c:	d0c1      	beq.n	4592 <uarte_nrfx_pins_configure+0x9c>
    *p_pin = pin_number & 0x1F;
    460e:	f002 021f 	and.w	r2, r2, #31
    reg->PIN_CNF[pin_number] = cnf;
    4612:	f502 72e0 	add.w	r2, r2, #448	; 0x1c0
    4616:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    461a:	2002      	movs	r0, #2
    461c:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
}
    4620:	e7b7      	b.n	4592 <uarte_nrfx_pins_configure+0x9c>

00004622 <endtx_isr>:
	return dev->config;
    4622:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    4624:	681b      	ldr	r3, [r3, #0]
	__asm__ volatile(
    4626:	f04f 0120 	mov.w	r1, #32
    462a:	f3ef 8211 	mrs	r2, BASEPRI
    462e:	f381 8812 	msr	BASEPRI_MAX, r1
    4632:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    4636:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
    463a:	b131      	cbz	r1, 464a <endtx_isr+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    463c:	2100      	movs	r1, #0
    463e:	f8c3 1120 	str.w	r1, [r3, #288]	; 0x120
    4642:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    4646:	2101      	movs	r1, #1
    4648:	60d9      	str	r1, [r3, #12]
	__asm__ volatile(
    464a:	f382 8811 	msr	BASEPRI, r2
    464e:	f3bf 8f6f 	isb	sy
}
    4652:	4770      	bx	lr

00004654 <uarte_nrfx_configure>:
{
    4654:	b570      	push	{r4, r5, r6, lr}
    4656:	b082      	sub	sp, #8
    4658:	4605      	mov	r5, r0
    465a:	460c      	mov	r4, r1
	switch (cfg->stop_bits) {
    465c:	794b      	ldrb	r3, [r1, #5]
    465e:	2b01      	cmp	r3, #1
    4660:	d006      	beq.n	4670 <uarte_nrfx_configure+0x1c>
    4662:	2b03      	cmp	r3, #3
    4664:	d011      	beq.n	468a <uarte_nrfx_configure+0x36>
    4666:	f06f 0385 	mvn.w	r3, #133	; 0x85
}
    466a:	4618      	mov	r0, r3
    466c:	b002      	add	sp, #8
    466e:	bd70      	pop	{r4, r5, r6, pc}
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
    4670:	2300      	movs	r3, #0
    4672:	f88d 3006 	strb.w	r3, [sp, #6]
	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
    4676:	79a3      	ldrb	r3, [r4, #6]
    4678:	2b03      	cmp	r3, #3
    467a:	d138      	bne.n	46ee <uarte_nrfx_configure+0x9a>
	switch (cfg->flow_ctrl) {
    467c:	79e3      	ldrb	r3, [r4, #7]
    467e:	b143      	cbz	r3, 4692 <uarte_nrfx_configure+0x3e>
    4680:	2b01      	cmp	r3, #1
    4682:	d010      	beq.n	46a6 <uarte_nrfx_configure+0x52>
    4684:	f06f 0385 	mvn.w	r3, #133	; 0x85
    4688:	e7ef      	b.n	466a <uarte_nrfx_configure+0x16>
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
    468a:	2310      	movs	r3, #16
    468c:	f88d 3006 	strb.w	r3, [sp, #6]
		break;
    4690:	e7f1      	b.n	4676 <uarte_nrfx_configure+0x22>
		uarte_cfg.hwfc = NRF_UARTE_HWFC_DISABLED;
    4692:	2300      	movs	r3, #0
    4694:	f88d 3004 	strb.w	r3, [sp, #4]
	switch (cfg->parity) {
    4698:	7923      	ldrb	r3, [r4, #4]
    469a:	b143      	cbz	r3, 46ae <uarte_nrfx_configure+0x5a>
    469c:	2b02      	cmp	r3, #2
    469e:	d022      	beq.n	46e6 <uarte_nrfx_configure+0x92>
    46a0:	f06f 0385 	mvn.w	r3, #133	; 0x85
    46a4:	e7e1      	b.n	466a <uarte_nrfx_configure+0x16>
		uarte_cfg.hwfc = NRF_UARTE_HWFC_ENABLED;
    46a6:	2301      	movs	r3, #1
    46a8:	f88d 3004 	strb.w	r3, [sp, #4]
		break;
    46ac:	e7f4      	b.n	4698 <uarte_nrfx_configure+0x44>
		uarte_cfg.parity = NRF_UARTE_PARITY_EXCLUDED;
    46ae:	2300      	movs	r3, #0
    46b0:	f88d 3005 	strb.w	r3, [sp, #5]
	if (baudrate_set(dev, cfg->baudrate) != 0) {
    46b4:	6821      	ldr	r1, [r4, #0]
    46b6:	4628      	mov	r0, r5
    46b8:	f7fd fae8 	bl	1c8c <baudrate_set>
    46bc:	4603      	mov	r3, r0
    46be:	b9c8      	cbnz	r0, 46f4 <uarte_nrfx_configure+0xa0>
	return dev->config;
    46c0:	686a      	ldr	r2, [r5, #4]
	return config->uarte_regs;
    46c2:	6810      	ldr	r0, [r2, #0]
    p_reg->CONFIG = (uint32_t)p_cfg->parity
    46c4:	f89d 1005 	ldrb.w	r1, [sp, #5]
                    | (uint32_t)p_cfg->stop
    46c8:	f89d 6006 	ldrb.w	r6, [sp, #6]
                    | (uint32_t)p_cfg->hwfc;
    46cc:	f89d 2004 	ldrb.w	r2, [sp, #4]
    46d0:	4331      	orrs	r1, r6
    46d2:	430a      	orrs	r2, r1
    p_reg->CONFIG = (uint32_t)p_cfg->parity
    46d4:	f8c0 256c 	str.w	r2, [r0, #1388]	; 0x56c
	return dev->data;
    46d8:	692a      	ldr	r2, [r5, #16]
	get_dev_data(dev)->uart_config = *cfg;
    46da:	3204      	adds	r2, #4
    46dc:	e894 0003 	ldmia.w	r4, {r0, r1}
    46e0:	e882 0003 	stmia.w	r2, {r0, r1}
	return 0;
    46e4:	e7c1      	b.n	466a <uarte_nrfx_configure+0x16>
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
    46e6:	230e      	movs	r3, #14
    46e8:	f88d 3005 	strb.w	r3, [sp, #5]
		break;
    46ec:	e7e2      	b.n	46b4 <uarte_nrfx_configure+0x60>
		return -ENOTSUP;
    46ee:	f06f 0385 	mvn.w	r3, #133	; 0x85
    46f2:	e7ba      	b.n	466a <uarte_nrfx_configure+0x16>
		return -ENOTSUP;
    46f4:	f06f 0385 	mvn.w	r3, #133	; 0x85
    46f8:	e7b7      	b.n	466a <uarte_nrfx_configure+0x16>

000046fa <uarte_nrfx_config_get>:
{
    46fa:	460b      	mov	r3, r1
	return dev->data;
    46fc:	6902      	ldr	r2, [r0, #16]
	*cfg = get_dev_data(dev)->uart_config;
    46fe:	6891      	ldr	r1, [r2, #8]
    4700:	6850      	ldr	r0, [r2, #4]
    4702:	e883 0003 	stmia.w	r3, {r0, r1}
}
    4706:	2000      	movs	r0, #0
    4708:	4770      	bx	lr

0000470a <uarte_nrfx_err_check>:
	return dev->config;
    470a:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    470c:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
    470e:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
    4712:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
    4716:	4770      	bx	lr

00004718 <is_tx_ready>:
	return dev->config;
    4718:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    471a:	681a      	ldr	r2, [r3, #0]
	bool ppi_endtx = get_dev_config(dev)->flags & UARTE_CFG_FLAG_PPI_ENDTX;
    471c:	685b      	ldr	r3, [r3, #4]
    471e:	f003 0302 	and.w	r3, r3, #2
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    4722:	f8d2 1158 	ldr.w	r1, [r2, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
    4726:	b929      	cbnz	r1, 4734 <is_tx_ready+0x1c>
    4728:	b933      	cbnz	r3, 4738 <is_tx_ready+0x20>
    472a:	f8d2 3120 	ldr.w	r3, [r2, #288]	; 0x120
    472e:	b92b      	cbnz	r3, 473c <is_tx_ready+0x24>
    4730:	2000      	movs	r0, #0
    4732:	4770      	bx	lr
    4734:	2001      	movs	r0, #1
    4736:	4770      	bx	lr
    4738:	2000      	movs	r0, #0
    473a:	4770      	bx	lr
    473c:	2001      	movs	r0, #1
}
    473e:	4770      	bx	lr

00004740 <uarte_enable>:
	return dev->data;
    4740:	6903      	ldr	r3, [r0, #16]
	if (data->async) {
    4742:	68db      	ldr	r3, [r3, #12]
    4744:	b123      	cbz	r3, 4750 <uarte_enable+0x10>
		bool disabled = data->async->low_power_mask == 0;
    4746:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
		data->async->low_power_mask |= mask;
    474a:	4311      	orrs	r1, r2
    474c:	f8c3 10c8 	str.w	r1, [r3, #200]	; 0xc8
	return dev->config;
    4750:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    4752:	681b      	ldr	r3, [r3, #0]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    4754:	2208      	movs	r2, #8
    4756:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
}
    475a:	4770      	bx	lr

0000475c <tx_start>:
{
    475c:	b510      	push	{r4, lr}
	return dev->config;
    475e:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    4760:	681c      	ldr	r4, [r3, #0]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    4762:	f8c4 1544 	str.w	r1, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    4766:	f8c4 2548 	str.w	r2, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    476a:	2300      	movs	r3, #0
    476c:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    4770:	f8d4 2120 	ldr.w	r2, [r4, #288]	; 0x120
    4774:	f8c4 3158 	str.w	r3, [r4, #344]	; 0x158
    4778:	f8d4 3158 	ldr.w	r3, [r4, #344]	; 0x158
	return dev->config;
    477c:	6843      	ldr	r3, [r0, #4]
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
    477e:	685b      	ldr	r3, [r3, #4]
    4780:	f013 0f10 	tst.w	r3, #16
    4784:	d102      	bne.n	478c <tx_start+0x30>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    4786:	2301      	movs	r3, #1
    4788:	60a3      	str	r3, [r4, #8]
}
    478a:	bd10      	pop	{r4, pc}
		uarte_enable(dev, UARTE_LOW_POWER_TX);
    478c:	2101      	movs	r1, #1
    478e:	f7ff ffd7 	bl	4740 <uarte_enable>
    p_reg->INTENSET = mask;
    4792:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
    4796:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
}
    479a:	e7f4      	b.n	4786 <tx_start+0x2a>

0000479c <uart_disable>:
	return dev->config;
    479c:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    479e:	681b      	ldr	r3, [r3, #0]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    47a0:	2200      	movs	r2, #0
    47a2:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
}
    47a6:	4770      	bx	lr

000047a8 <uarte_nrfx_rx_counting_init>:
	return dev->config;
    47a8:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    47aa:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    47ac:	2204      	movs	r2, #4
    47ae:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    47b2:	2000      	movs	r0, #0
    47b4:	4770      	bx	lr

000047b6 <start_tx_locked>:
{
    47b6:	b538      	push	{r3, r4, r5, lr}
    47b8:	4605      	mov	r5, r0
    47ba:	460c      	mov	r4, r1
	if (!is_tx_ready(dev)) {
    47bc:	f7ff ffac 	bl	4718 <is_tx_ready>
    47c0:	b920      	cbnz	r0, 47cc <start_tx_locked+0x16>
		data->async->pending_tx = true;
    47c2:	68e3      	ldr	r3, [r4, #12]
    47c4:	2201      	movs	r2, #1
    47c6:	f883 20d4 	strb.w	r2, [r3, #212]	; 0xd4
}
    47ca:	bd38      	pop	{r3, r4, r5, pc}
		data->async->pending_tx = false;
    47cc:	68e3      	ldr	r3, [r4, #12]
    47ce:	2200      	movs	r2, #0
    47d0:	f883 20d4 	strb.w	r2, [r3, #212]	; 0xd4
		data->async->tx_amount = -1;
    47d4:	68e3      	ldr	r3, [r4, #12]
    47d6:	f04f 32ff 	mov.w	r2, #4294967295
    47da:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
		tx_start(dev, data->async->xfer_buf, data->async->xfer_len);
    47de:	68e3      	ldr	r3, [r4, #12]
    47e0:	695a      	ldr	r2, [r3, #20]
    47e2:	6919      	ldr	r1, [r3, #16]
    47e4:	4628      	mov	r0, r5
    47e6:	f7ff ffb9 	bl	475c <tx_start>
}
    47ea:	e7ee      	b.n	47ca <start_tx_locked+0x14>

000047ec <user_callback>:
{
    47ec:	b508      	push	{r3, lr}
	return dev->data;
    47ee:	6903      	ldr	r3, [r0, #16]
	if (data->async->user_callback) {
    47f0:	68da      	ldr	r2, [r3, #12]
    47f2:	6813      	ldr	r3, [r2, #0]
    47f4:	b10b      	cbz	r3, 47fa <user_callback+0xe>
		data->async->user_callback(dev, evt, data->async->user_data);
    47f6:	6852      	ldr	r2, [r2, #4]
    47f8:	4798      	blx	r3
}
    47fa:	bd08      	pop	{r3, pc}

000047fc <notify_uart_rx_rdy>:
{
    47fc:	b500      	push	{lr}
    47fe:	b087      	sub	sp, #28
	return dev->data;
    4800:	6902      	ldr	r2, [r0, #16]
	struct uart_event evt = {
    4802:	2300      	movs	r3, #0
    4804:	9301      	str	r3, [sp, #4]
    4806:	9302      	str	r3, [sp, #8]
    4808:	9303      	str	r3, [sp, #12]
    480a:	9304      	str	r3, [sp, #16]
    480c:	9305      	str	r3, [sp, #20]
    480e:	2302      	movs	r3, #2
    4810:	f88d 3004 	strb.w	r3, [sp, #4]
		.data.rx.buf = data->async->rx_buf,
    4814:	68d3      	ldr	r3, [r2, #12]
    4816:	6e1a      	ldr	r2, [r3, #96]	; 0x60
	struct uart_event evt = {
    4818:	9202      	str	r2, [sp, #8]
		.data.rx.offset = data->async->rx_offset
    481a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
	struct uart_event evt = {
    481c:	9303      	str	r3, [sp, #12]
    481e:	9104      	str	r1, [sp, #16]
	user_callback(dev, &evt);
    4820:	a901      	add	r1, sp, #4
    4822:	f7ff ffe3 	bl	47ec <user_callback>
}
    4826:	b007      	add	sp, #28
    4828:	f85d fb04 	ldr.w	pc, [sp], #4

0000482c <notify_rx_buf_release>:
	if (*buf) {
    482c:	680b      	ldr	r3, [r1, #0]
    482e:	b1ab      	cbz	r3, 485c <notify_rx_buf_release+0x30>
{
    4830:	b530      	push	{r4, r5, lr}
    4832:	b087      	sub	sp, #28
    4834:	460c      	mov	r4, r1
    4836:	4615      	mov	r5, r2
		struct uart_event evt = {
    4838:	2300      	movs	r3, #0
    483a:	9301      	str	r3, [sp, #4]
    483c:	9303      	str	r3, [sp, #12]
    483e:	9304      	str	r3, [sp, #16]
    4840:	9305      	str	r3, [sp, #20]
    4842:	2304      	movs	r3, #4
    4844:	f88d 3004 	strb.w	r3, [sp, #4]
			.data.rx_buf.buf = *buf,
    4848:	680b      	ldr	r3, [r1, #0]
		struct uart_event evt = {
    484a:	9302      	str	r3, [sp, #8]
		user_callback(dev, &evt);
    484c:	a901      	add	r1, sp, #4
    484e:	f7ff ffcd 	bl	47ec <user_callback>
		if (clear) {
    4852:	b10d      	cbz	r5, 4858 <notify_rx_buf_release+0x2c>
			*buf = NULL;
    4854:	2300      	movs	r3, #0
    4856:	6023      	str	r3, [r4, #0]
}
    4858:	b007      	add	sp, #28
    485a:	bd30      	pop	{r4, r5, pc}
    485c:	4770      	bx	lr

0000485e <notify_rx_disable>:
{
    485e:	b500      	push	{lr}
    4860:	b087      	sub	sp, #28
	struct uart_event evt = {
    4862:	2300      	movs	r3, #0
    4864:	9301      	str	r3, [sp, #4]
    4866:	9302      	str	r3, [sp, #8]
    4868:	9303      	str	r3, [sp, #12]
    486a:	9304      	str	r3, [sp, #16]
    486c:	9305      	str	r3, [sp, #20]
    486e:	2305      	movs	r3, #5
    4870:	f88d 3004 	strb.w	r3, [sp, #4]
	user_callback(dev, (struct uart_event *)&evt);
    4874:	a901      	add	r1, sp, #4
    4876:	f7ff ffb9 	bl	47ec <user_callback>
}
    487a:	b007      	add	sp, #28
    487c:	f85d fb04 	ldr.w	pc, [sp], #4

00004880 <uarte_nrfx_rx_buf_rsp>:
{
    4880:	b470      	push	{r4, r5, r6}
	return dev->data;
    4882:	6904      	ldr	r4, [r0, #16]
	return dev->config;
    4884:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    4886:	681b      	ldr	r3, [r3, #0]
	__asm__ volatile(
    4888:	f04f 0020 	mov.w	r0, #32
    488c:	f3ef 8511 	mrs	r5, BASEPRI
    4890:	f380 8812 	msr	BASEPRI_MAX, r0
    4894:	f3bf 8f6f 	isb	sy
	if (data->async->rx_buf == NULL) {
    4898:	68e0      	ldr	r0, [r4, #12]
    489a:	6e06      	ldr	r6, [r0, #96]	; 0x60
    489c:	b1ae      	cbz	r6, 48ca <uarte_nrfx_rx_buf_rsp+0x4a>
	} else if (data->async->rx_next_buf == NULL) {
    489e:	6ec6      	ldr	r6, [r0, #108]	; 0x6c
    48a0:	b9b6      	cbnz	r6, 48d0 <uarte_nrfx_rx_buf_rsp+0x50>
		data->async->rx_next_buf = buf;
    48a2:	66c1      	str	r1, [r0, #108]	; 0x6c
		data->async->rx_next_buf_len = len;
    48a4:	68e0      	ldr	r0, [r4, #12]
    48a6:	6702      	str	r2, [r0, #112]	; 0x70
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    48a8:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    48ac:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    p_reg->SHORTS |= mask;
    48b0:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    48b4:	f042 0220 	orr.w	r2, r2, #32
    48b8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
		err = 0;
    48bc:	2000      	movs	r0, #0
	__asm__ volatile(
    48be:	f385 8811 	msr	BASEPRI, r5
    48c2:	f3bf 8f6f 	isb	sy
}
    48c6:	bc70      	pop	{r4, r5, r6}
    48c8:	4770      	bx	lr
		err = -EACCES;
    48ca:	f06f 000c 	mvn.w	r0, #12
    48ce:	e7f6      	b.n	48be <uarte_nrfx_rx_buf_rsp+0x3e>
		err = -EBUSY;
    48d0:	f06f 000f 	mvn.w	r0, #15
    48d4:	e7f3      	b.n	48be <uarte_nrfx_rx_buf_rsp+0x3e>

000048d6 <uarte_nrfx_callback_set>:
	return dev->data;
    48d6:	6903      	ldr	r3, [r0, #16]
	if (!data->async) {
    48d8:	68d8      	ldr	r0, [r3, #12]
    48da:	b120      	cbz	r0, 48e6 <uarte_nrfx_callback_set+0x10>
	data->async->user_callback = callback;
    48dc:	6001      	str	r1, [r0, #0]
	data->async->user_data = user_data;
    48de:	68db      	ldr	r3, [r3, #12]
    48e0:	605a      	str	r2, [r3, #4]
	return 0;
    48e2:	2000      	movs	r0, #0
    48e4:	4770      	bx	lr
		return -ENOTSUP;
    48e6:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
    48ea:	4770      	bx	lr

000048ec <uarte_nrfx_poll_in>:
	return dev->data;
    48ec:	6902      	ldr	r2, [r0, #16]
	return dev->config;
    48ee:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    48f0:	681b      	ldr	r3, [r3, #0]
	if (data->async) {
    48f2:	68d0      	ldr	r0, [r2, #12]
    48f4:	b960      	cbnz	r0, 4910 <uarte_nrfx_poll_in+0x24>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    48f6:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
    48fa:	b160      	cbz	r0, 4916 <uarte_nrfx_poll_in+0x2a>
	*c = data->rx_data;
    48fc:	7d52      	ldrb	r2, [r2, #21]
    48fe:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4900:	2000      	movs	r0, #0
    4902:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
    4906:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    490a:	2201      	movs	r2, #1
    490c:	601a      	str	r2, [r3, #0]
	return 0;
    490e:	4770      	bx	lr
		return -ENOTSUP;
    4910:	f06f 0085 	mvn.w	r0, #133	; 0x85
    4914:	4770      	bx	lr
		return -1;
    4916:	f04f 30ff 	mov.w	r0, #4294967295
}
    491a:	4770      	bx	lr

0000491c <wait_tx_ready>:
{
    491c:	b570      	push	{r4, r5, r6, lr}
    491e:	4606      	mov	r6, r0
    4920:	e014      	b.n	494c <wait_tx_ready+0x30>
		if (res) {
    4922:	b17d      	cbz	r5, 4944 <wait_tx_ready+0x28>
	__asm__ volatile(
    4924:	f04f 0320 	mov.w	r3, #32
    4928:	f3ef 8411 	mrs	r4, BASEPRI
    492c:	f383 8812 	msr	BASEPRI_MAX, r3
    4930:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
    4934:	4630      	mov	r0, r6
    4936:	f7ff feef 	bl	4718 <is_tx_ready>
    493a:	b9a0      	cbnz	r0, 4966 <wait_tx_ready+0x4a>
	__asm__ volatile(
    493c:	f384 8811 	msr	BASEPRI, r4
    4940:	f3bf 8f6f 	isb	sy
	return z_impl_k_sleep(timeout);
    4944:	2021      	movs	r0, #33	; 0x21
    4946:	2100      	movs	r1, #0
    4948:	f7fe febc 	bl	36c4 <z_impl_k_sleep>
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
    494c:	2464      	movs	r4, #100	; 0x64
    494e:	4630      	mov	r0, r6
    4950:	f7ff fee2 	bl	4718 <is_tx_ready>
    4954:	4605      	mov	r5, r0
    4956:	2800      	cmp	r0, #0
    4958:	d1e3      	bne.n	4922 <wait_tx_ready+0x6>
    495a:	2001      	movs	r0, #1
    495c:	f000 fba0 	bl	50a0 <nrfx_busy_wait>
    4960:	3c01      	subs	r4, #1
    4962:	d1f4      	bne.n	494e <wait_tx_ready+0x32>
    4964:	e7dd      	b.n	4922 <wait_tx_ready+0x6>
}
    4966:	4620      	mov	r0, r4
    4968:	bd70      	pop	{r4, r5, r6, pc}

0000496a <uarte_nrfx_rx_disable>:
{
    496a:	b538      	push	{r3, r4, r5, lr}
	return dev->data;
    496c:	6905      	ldr	r5, [r0, #16]
	return dev->config;
    496e:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    4970:	681c      	ldr	r4, [r3, #0]
	if (data->async->rx_buf == NULL) {
    4972:	68eb      	ldr	r3, [r5, #12]
    4974:	6e1a      	ldr	r2, [r3, #96]	; 0x60
    4976:	b1ba      	cbz	r2, 49a8 <uarte_nrfx_rx_disable+0x3e>
	if (data->async->rx_next_buf != NULL) {
    4978:	6edb      	ldr	r3, [r3, #108]	; 0x6c
    497a:	b153      	cbz	r3, 4992 <uarte_nrfx_rx_disable+0x28>
    p_reg->SHORTS &= ~(mask);
    497c:	f8d4 3200 	ldr.w	r3, [r4, #512]	; 0x200
    4980:	f023 0320 	bic.w	r3, r3, #32
    4984:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4988:	2300      	movs	r3, #0
    498a:	f8c4 314c 	str.w	r3, [r4, #332]	; 0x14c
    498e:	f8d4 314c 	ldr.w	r3, [r4, #332]	; 0x14c
	k_timer_stop(&data->async->rx_timeout_timer);
    4992:	68e8      	ldr	r0, [r5, #12]
    4994:	3088      	adds	r0, #136	; 0x88
	z_impl_k_timer_stop(timer);
    4996:	f000 fdb2 	bl	54fe <z_impl_k_timer_stop>
	data->async->rx_enabled = false;
    499a:	68eb      	ldr	r3, [r5, #12]
    499c:	2000      	movs	r0, #0
    499e:	f883 00d2 	strb.w	r0, [r3, #210]	; 0xd2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    49a2:	2301      	movs	r3, #1
    49a4:	6063      	str	r3, [r4, #4]
}
    49a6:	bd38      	pop	{r3, r4, r5, pc}
		return -EFAULT;
    49a8:	f06f 000d 	mvn.w	r0, #13
    49ac:	e7fb      	b.n	49a6 <uarte_nrfx_rx_disable+0x3c>

000049ae <error_isr>:
{
    49ae:	b510      	push	{r4, lr}
    49b0:	b086      	sub	sp, #24
    49b2:	4604      	mov	r4, r0
	return dev->config;
    49b4:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    49b6:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
    49b8:	f8d3 2480 	ldr.w	r2, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
    49bc:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480
	struct uart_event evt = {
    49c0:	2300      	movs	r3, #0
    49c2:	9301      	str	r3, [sp, #4]
    49c4:	9302      	str	r3, [sp, #8]
    49c6:	9303      	str	r3, [sp, #12]
    49c8:	9304      	str	r3, [sp, #16]
    49ca:	9305      	str	r3, [sp, #20]
    49cc:	2306      	movs	r3, #6
    49ce:	f88d 3004 	strb.w	r3, [sp, #4]
		.data.rx_stop.reason = UARTE_ERROR_FROM_MASK(err),
    49d2:	f012 0f01 	tst.w	r2, #1
    49d6:	d108      	bne.n	49ea <error_isr+0x3c>
    49d8:	f012 0f02 	tst.w	r2, #2
    49dc:	d111      	bne.n	4a02 <error_isr+0x54>
    49de:	f012 0f04 	tst.w	r2, #4
    49e2:	d110      	bne.n	4a06 <error_isr+0x58>
    49e4:	f002 0208 	and.w	r2, r2, #8
    49e8:	e000      	b.n	49ec <error_isr+0x3e>
    49ea:	2201      	movs	r2, #1
	struct uart_event evt = {
    49ec:	f88d 2008 	strb.w	r2, [sp, #8]
	user_callback(dev, &evt);
    49f0:	a901      	add	r1, sp, #4
    49f2:	4620      	mov	r0, r4
    49f4:	f7ff fefa 	bl	47ec <user_callback>
	(void) uarte_nrfx_rx_disable(dev);
    49f8:	4620      	mov	r0, r4
    49fa:	f7ff ffb6 	bl	496a <uarte_nrfx_rx_disable>
}
    49fe:	b006      	add	sp, #24
    4a00:	bd10      	pop	{r4, pc}
		.data.rx_stop.reason = UARTE_ERROR_FROM_MASK(err),
    4a02:	2202      	movs	r2, #2
    4a04:	e7f2      	b.n	49ec <error_isr+0x3e>
    4a06:	2204      	movs	r2, #4
    4a08:	e7f0      	b.n	49ec <error_isr+0x3e>

00004a0a <uarte_nrfx_tx_abort>:
{
    4a0a:	b538      	push	{r3, r4, r5, lr}
	return dev->data;
    4a0c:	6903      	ldr	r3, [r0, #16]
	return dev->config;
    4a0e:	6842      	ldr	r2, [r0, #4]
	return config->uarte_regs;
    4a10:	6815      	ldr	r5, [r2, #0]
	if (data->async->tx_buf == NULL) {
    4a12:	68da      	ldr	r2, [r3, #12]
    4a14:	6891      	ldr	r1, [r2, #8]
    4a16:	b151      	cbz	r1, 4a2e <uarte_nrfx_tx_abort+0x24>
	data->async->pending_tx = false;
    4a18:	2400      	movs	r4, #0
    4a1a:	f882 40d4 	strb.w	r4, [r2, #212]	; 0xd4
	k_timer_stop(&data->async->tx_timeout_timer);
    4a1e:	68d8      	ldr	r0, [r3, #12]
    4a20:	3028      	adds	r0, #40	; 0x28
    4a22:	f000 fd6c 	bl	54fe <z_impl_k_timer_stop>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    4a26:	2301      	movs	r3, #1
    4a28:	60eb      	str	r3, [r5, #12]
	return 0;
    4a2a:	4620      	mov	r0, r4
}
    4a2c:	bd38      	pop	{r3, r4, r5, pc}
		return -EFAULT;
    4a2e:	f06f 000d 	mvn.w	r0, #13
    4a32:	e7fb      	b.n	4a2c <uarte_nrfx_tx_abort+0x22>

00004a34 <tx_timeout>:
{
    4a34:	b508      	push	{r3, lr}
	return timer->user_data;
    4a36:	6b43      	ldr	r3, [r0, #52]	; 0x34
	(void) uarte_nrfx_tx_abort(data->dev);
    4a38:	6818      	ldr	r0, [r3, #0]
    4a3a:	f7ff ffe6 	bl	4a0a <uarte_nrfx_tx_abort>
}
    4a3e:	bd08      	pop	{r3, pc}

00004a40 <endrx_isr>:
{
    4a40:	b570      	push	{r4, r5, r6, lr}
    4a42:	4605      	mov	r5, r0
	return dev->data;
    4a44:	6904      	ldr	r4, [r0, #16]
	return dev->config;
    4a46:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    4a48:	681e      	ldr	r6, [r3, #0]
	data->async->is_in_irq = true;
    4a4a:	68e3      	ldr	r3, [r4, #12]
    4a4c:	2201      	movs	r2, #1
    4a4e:	f883 20d5 	strb.w	r2, [r3, #213]	; 0xd5
	k_timer_stop(&data->async->rx_timeout_timer);
    4a52:	68e0      	ldr	r0, [r4, #12]
    4a54:	3088      	adds	r0, #136	; 0x88
    4a56:	f000 fd52 	bl	54fe <z_impl_k_timer_stop>
}

NRF_STATIC_INLINE uint32_t nrf_uarte_rx_amount_get(NRF_UARTE_Type const * p_reg)
{
    return p_reg->RXD.AMOUNT;
    4a5a:	f8d6 253c 	ldr.w	r2, [r6, #1340]	; 0x53c
				data->async->rx_flush_cnt;
    4a5e:	68e3      	ldr	r3, [r4, #12]
    4a60:	f893 10d1 	ldrb.w	r1, [r3, #209]	; 0xd1
	const int rx_amount = nrf_uarte_rx_amount_get(uarte) +
    4a64:	4411      	add	r1, r2
	data->async->rx_flush_cnt = 0;
    4a66:	2200      	movs	r2, #0
    4a68:	f883 20d1 	strb.w	r2, [r3, #209]	; 0xd1
	int rx_len = rx_amount - data->async->rx_offset;
    4a6c:	68e3      	ldr	r3, [r4, #12]
    4a6e:	6e9a      	ldr	r2, [r3, #104]	; 0x68
	if (rx_len < 0) {
    4a70:	1a89      	subs	r1, r1, r2
    4a72:	d40b      	bmi.n	4a8c <endrx_isr+0x4c>
	data->async->rx_total_user_byte_cnt += rx_len;
    4a74:	6f9a      	ldr	r2, [r3, #120]	; 0x78
    4a76:	440a      	add	r2, r1
    4a78:	679a      	str	r2, [r3, #120]	; 0x78
	if (rx_len > 0) {
    4a7a:	2900      	cmp	r1, #0
    4a7c:	dc08      	bgt.n	4a90 <endrx_isr+0x50>
	if (!data->async->rx_enabled) {
    4a7e:	68e1      	ldr	r1, [r4, #12]
    4a80:	f891 30d2 	ldrb.w	r3, [r1, #210]	; 0xd2
    4a84:	b943      	cbnz	r3, 4a98 <endrx_isr+0x58>
		data->async->is_in_irq = false;
    4a86:	f881 30d5 	strb.w	r3, [r1, #213]	; 0xd5
}
    4a8a:	bd70      	pop	{r4, r5, r6, pc}
		rx_len = 0;
    4a8c:	2100      	movs	r1, #0
    4a8e:	e7f1      	b.n	4a74 <endrx_isr+0x34>
		notify_uart_rx_rdy(dev, rx_len);
    4a90:	4628      	mov	r0, r5
    4a92:	f7ff feb3 	bl	47fc <notify_uart_rx_rdy>
    4a96:	e7f2      	b.n	4a7e <endrx_isr+0x3e>
	notify_rx_buf_release(dev, &data->async->rx_buf, false);
    4a98:	2200      	movs	r2, #0
    4a9a:	3160      	adds	r1, #96	; 0x60
    4a9c:	4628      	mov	r0, r5
    4a9e:	f7ff fec5 	bl	482c <notify_rx_buf_release>
	__asm__ volatile(
    4aa2:	f04f 0320 	mov.w	r3, #32
    4aa6:	f3ef 8111 	mrs	r1, BASEPRI
    4aaa:	f383 8812 	msr	BASEPRI_MAX, r3
    4aae:	f3bf 8f6f 	isb	sy
	if (data->async->rx_next_buf) {
    4ab2:	68e3      	ldr	r3, [r4, #12]
    4ab4:	6eda      	ldr	r2, [r3, #108]	; 0x6c
    4ab6:	b1f2      	cbz	r2, 4af6 <endrx_isr+0xb6>
		data->async->rx_buf = data->async->rx_next_buf;
    4ab8:	661a      	str	r2, [r3, #96]	; 0x60
		data->async->rx_buf_len = data->async->rx_next_buf_len;
    4aba:	68e3      	ldr	r3, [r4, #12]
    4abc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
    4abe:	665a      	str	r2, [r3, #100]	; 0x64
		data->async->rx_next_buf = NULL;
    4ac0:	68e2      	ldr	r2, [r4, #12]
    4ac2:	2300      	movs	r3, #0
    4ac4:	66d3      	str	r3, [r2, #108]	; 0x6c
		data->async->rx_next_buf_len = 0;
    4ac6:	68e2      	ldr	r2, [r4, #12]
    4ac8:	6713      	str	r3, [r2, #112]	; 0x70
		data->async->rx_offset = 0;
    4aca:	68e2      	ldr	r2, [r4, #12]
    4acc:	6693      	str	r3, [r2, #104]	; 0x68
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    4ace:	f8d6 314c 	ldr.w	r3, [r6, #332]	; 0x14c
		if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXSTARTED)) {
    4ad2:	b90b      	cbnz	r3, 4ad8 <endrx_isr+0x98>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    4ad4:	2301      	movs	r3, #1
    4ad6:	6033      	str	r3, [r6, #0]
    p_reg->SHORTS &= ~(mask);
    4ad8:	f8d6 3200 	ldr.w	r3, [r6, #512]	; 0x200
    4adc:	f023 0320 	bic.w	r3, r3, #32
    4ae0:	f8c6 3200 	str.w	r3, [r6, #512]	; 0x200
	__asm__ volatile(
    4ae4:	f381 8811 	msr	BASEPRI, r1
    4ae8:	f3bf 8f6f 	isb	sy
	data->async->is_in_irq = false;
    4aec:	68e3      	ldr	r3, [r4, #12]
    4aee:	2200      	movs	r2, #0
    4af0:	f883 20d5 	strb.w	r2, [r3, #213]	; 0xd5
    4af4:	e7c9      	b.n	4a8a <endrx_isr+0x4a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    4af6:	2301      	movs	r3, #1
    4af8:	6073      	str	r3, [r6, #4]
}
    4afa:	e7f3      	b.n	4ae4 <endrx_isr+0xa4>

00004afc <rx_timeout>:
{
    4afc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4afe:	6b44      	ldr	r4, [r0, #52]	; 0x34
	const struct device *dev = data->dev;
    4b00:	6826      	ldr	r6, [r4, #0]
	return dev->config;
    4b02:	6872      	ldr	r2, [r6, #4]
	if (data->async->is_in_irq) {
    4b04:	68e3      	ldr	r3, [r4, #12]
    4b06:	f893 30d5 	ldrb.w	r3, [r3, #213]	; 0xd5
    4b0a:	2b00      	cmp	r3, #0
    4b0c:	d138      	bne.n	4b80 <rx_timeout+0x84>
    4b0e:	f003 07ff 	and.w	r7, r3, #255	; 0xff
	return config->uarte_regs;
    4b12:	6813      	ldr	r3, [r2, #0]
    p_reg->INTENCLR = mask;
    4b14:	2210      	movs	r2, #16
    4b16:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
		read = data->async->rx_cnt.cnt;
    4b1a:	68e3      	ldr	r3, [r4, #12]
    4b1c:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
	if (read != data->async->rx_total_byte_cnt) {
    4b20:	6f59      	ldr	r1, [r3, #116]	; 0x74
    4b22:	4291      	cmp	r1, r2
    4b24:	d004      	beq.n	4b30 <rx_timeout+0x34>
		data->async->rx_total_byte_cnt = read;
    4b26:	675a      	str	r2, [r3, #116]	; 0x74
		data->async->rx_timeout_left = data->async->rx_timeout;
    4b28:	68e3      	ldr	r3, [r4, #12]
    4b2a:	6fda      	ldr	r2, [r3, #124]	; 0x7c
    4b2c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	int32_t len = data->async->rx_total_byte_cnt
    4b30:	68e3      	ldr	r3, [r4, #12]
    4b32:	6f5d      	ldr	r5, [r3, #116]	; 0x74
		    - data->async->rx_total_user_byte_cnt;
    4b34:	6f9a      	ldr	r2, [r3, #120]	; 0x78
	if (!hw_rx_counting_enabled(data) &&
    4b36:	1aad      	subs	r5, r5, r2
    4b38:	d423      	bmi.n	4b82 <rx_timeout+0x86>
	if (len + data->async->rx_offset > data->async->rx_buf_len) {
    4b3a:	68e3      	ldr	r3, [r4, #12]
    4b3c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
    4b3e:	18a8      	adds	r0, r5, r2
    4b40:	6e59      	ldr	r1, [r3, #100]	; 0x64
    4b42:	4288      	cmp	r0, r1
    4b44:	d901      	bls.n	4b4a <rx_timeout+0x4e>
		len = data->async->rx_buf_len - data->async->rx_offset;
    4b46:	1a8d      	subs	r5, r1, r2
		clipped = true;
    4b48:	2701      	movs	r7, #1
	if (len > 0) {
    4b4a:	2d00      	cmp	r5, #0
    4b4c:	dd13      	ble.n	4b76 <rx_timeout+0x7a>
		if (clipped ||
    4b4e:	b92f      	cbnz	r7, 4b5c <rx_timeout+0x60>
			(data->async->rx_timeout_left
    4b50:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
				< data->async->rx_timeout_slab)) {
    4b54:	f8d3 1080 	ldr.w	r1, [r3, #128]	; 0x80
		if (clipped ||
    4b58:	428a      	cmp	r2, r1
    4b5a:	da16      	bge.n	4b8a <rx_timeout+0x8e>
			notify_uart_rx_rdy(dev, len);
    4b5c:	4629      	mov	r1, r5
    4b5e:	4630      	mov	r0, r6
    4b60:	f7ff fe4c 	bl	47fc <notify_uart_rx_rdy>
			data->async->rx_offset += len;
    4b64:	68e2      	ldr	r2, [r4, #12]
    4b66:	6e93      	ldr	r3, [r2, #104]	; 0x68
    4b68:	442b      	add	r3, r5
    4b6a:	6693      	str	r3, [r2, #104]	; 0x68
			data->async->rx_total_user_byte_cnt += len;
    4b6c:	68e2      	ldr	r2, [r4, #12]
    4b6e:	6f93      	ldr	r3, [r2, #120]	; 0x78
    4b70:	441d      	add	r5, r3
    4b72:	6795      	str	r5, [r2, #120]	; 0x78
		if (clipped) {
    4b74:	b96f      	cbnz	r7, 4b92 <rx_timeout+0x96>
	return dev->config;
    4b76:	6873      	ldr	r3, [r6, #4]
	return config->uarte_regs;
    4b78:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    4b7a:	2210      	movs	r2, #16
    4b7c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    4b80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		data->async->rx_cnt.cnt = data->async->rx_total_user_byte_cnt;
    4b82:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		len = 0;
    4b86:	2500      	movs	r5, #0
    4b88:	e7d7      	b.n	4b3a <rx_timeout+0x3e>
			data->async->rx_timeout_left -=
    4b8a:	1a52      	subs	r2, r2, r1
    4b8c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    4b90:	e7f0      	b.n	4b74 <rx_timeout+0x78>
			k_timer_stop(&data->async->rx_timeout_timer);
    4b92:	68e0      	ldr	r0, [r4, #12]
    4b94:	3088      	adds	r0, #136	; 0x88
    4b96:	f000 fcb2 	bl	54fe <z_impl_k_timer_stop>
}
    4b9a:	e7ec      	b.n	4b76 <rx_timeout+0x7a>

00004b9c <setup_tx_cache>:
{
    4b9c:	b508      	push	{r3, lr}
	size_t remaining = data->async->tx_size - data->async->tx_cache_offset;
    4b9e:	68c3      	ldr	r3, [r0, #12]
    4ba0:	68da      	ldr	r2, [r3, #12]
    4ba2:	6a19      	ldr	r1, [r3, #32]
	if (!remaining) {
    4ba4:	1a52      	subs	r2, r2, r1
    4ba6:	d101      	bne.n	4bac <setup_tx_cache+0x10>
		return false;
    4ba8:	2000      	movs	r0, #0
}
    4baa:	bd08      	pop	{r3, pc}
	size_t len = MIN(remaining, sizeof(data->async->tx_cache));
    4bac:	2a08      	cmp	r2, #8
    4bae:	bf28      	it	cs
    4bb0:	2208      	movcs	r2, #8
	data->async->xfer_len = len;
    4bb2:	615a      	str	r2, [r3, #20]
	data->async->xfer_buf = data->async->tx_cache;
    4bb4:	68c3      	ldr	r3, [r0, #12]
    4bb6:	f103 0118 	add.w	r1, r3, #24
    4bba:	6119      	str	r1, [r3, #16]
	memcpy(data->async->tx_cache, &data->async->tx_buf[data->async->tx_cache_offset], len);
    4bbc:	68c0      	ldr	r0, [r0, #12]
    4bbe:	6881      	ldr	r1, [r0, #8]
    4bc0:	6a03      	ldr	r3, [r0, #32]
    4bc2:	4419      	add	r1, r3
    4bc4:	3018      	adds	r0, #24
    4bc6:	f7ff fb53 	bl	4270 <memcpy>
	return true;
    4bca:	2001      	movs	r0, #1
    4bcc:	e7ed      	b.n	4baa <setup_tx_cache+0xe>

00004bce <uarte_instance_init>:

static int uarte_instance_init(const struct device *dev,
			       uint8_t interrupts_active)
{
    4bce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4bd2:	4604      	mov	r4, r0
	return dev->config;
    4bd4:	6847      	ldr	r7, [r0, #4]
	return config->uarte_regs;
    4bd6:	683d      	ldr	r5, [r7, #0]
	return dev->data;
    4bd8:	6906      	ldr	r6, [r0, #16]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    4bda:	2100      	movs	r1, #0
    4bdc:	f8c5 1500 	str.w	r1, [r5, #1280]	; 0x500
	struct uarte_nrfx_data *data = get_dev_data(dev);
	const struct uarte_nrfx_config *cfg = get_dev_config(dev);

	nrf_uarte_disable(uarte);

	data->dev = dev;
    4be0:	6030      	str	r0, [r6, #0]
	err = pinctrl_apply_state(cfg->pcfg, PINCTRL_STATE_DEFAULT);
	if (err < 0) {
		return err;
	}
#else
	uarte_nrfx_pins_configure(dev, false);
    4be2:	f7ff fc88 	bl	44f6 <uarte_nrfx_pins_configure>
	return dev->data;
    4be6:	6921      	ldr	r1, [r4, #16]
#endif /* CONFIG_PINCTRL */

	err = uarte_nrfx_configure(dev, &get_dev_data(dev)->uart_config);
    4be8:	3104      	adds	r1, #4
    4bea:	4620      	mov	r0, r4
    4bec:	f7ff fd32 	bl	4654 <uarte_nrfx_configure>
	if (err) {
    4bf0:	4680      	mov	r8, r0
    4bf2:	bb18      	cbnz	r0, 4c3c <uarte_instance_init+0x6e>
		return err;
	}

	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
	    cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
    4bf4:	687b      	ldr	r3, [r7, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
    4bf6:	f013 0f02 	tst.w	r3, #2
    4bfa:	d122      	bne.n	4c42 <uarte_instance_init+0x74>
		}
	}


#ifdef CONFIG_UART_ASYNC_API
	if (data->async) {
    4bfc:	68f3      	ldr	r3, [r6, #12]
    4bfe:	b343      	cbz	r3, 4c52 <uarte_instance_init+0x84>
		err = uarte_nrfx_init(dev);
    4c00:	4620      	mov	r0, r4
    4c02:	f7fd fa83 	bl	210c <uarte_nrfx_init>
		if (err < 0) {
    4c06:	2800      	cmp	r0, #0
    4c08:	db36      	blt.n	4c78 <uarte_instance_init+0xaa>
			nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
			nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STARTRX);
		}
	}

	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
    4c0a:	687b      	ldr	r3, [r7, #4]
    4c0c:	f013 0f02 	tst.w	r3, #2
    4c10:	d103      	bne.n	4c1a <uarte_instance_init+0x4c>
    p_reg->INTENSET = mask;
    4c12:	f44f 7380 	mov.w	r3, #256	; 0x100
    4c16:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
		nrf_uarte_int_enable(uarte, NRF_UARTE_INT_ENDTX_MASK);
	}

	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
    4c1a:	687b      	ldr	r3, [r7, #4]
    4c1c:	f013 0f10 	tst.w	r3, #16
    4c20:	d003      	beq.n	4c2a <uarte_instance_init+0x5c>
    4c22:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
    4c26:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304

	/* Set TXSTOPPED event by requesting fake (zero-length) transfer.
	 * Pointer to RAM variable (data->tx_buffer) is set because otherwise
	 * such operation may result in HardFault or RAM corruption.
	 */
	nrf_uarte_tx_buffer_set(uarte, &data->char_out, 0);
    4c2a:	3614      	adds	r6, #20
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    4c2c:	f8c5 6544 	str.w	r6, [r5, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    4c30:	2300      	movs	r3, #0
    4c32:	f8c5 3548 	str.w	r3, [r5, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    4c36:	2301      	movs	r3, #1
    4c38:	60ab      	str	r3, [r5, #8]
    4c3a:	60eb      	str	r3, [r5, #12]

	/* switch off transmitter to save an energy */
	nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STOPTX);

	return 0;
}
    4c3c:	4640      	mov	r0, r8
    4c3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		err = endtx_stoptx_ppi_init(uarte, data);
    4c42:	4631      	mov	r1, r6
    4c44:	4628      	mov	r0, r5
    4c46:	f7fd fa3d 	bl	20c4 <endtx_stoptx_ppi_init>
		if (err < 0) {
    4c4a:	2800      	cmp	r0, #0
    4c4c:	dad6      	bge.n	4bfc <uarte_instance_init+0x2e>
			return err;
    4c4e:	4680      	mov	r8, r0
    4c50:	e7f4      	b.n	4c3c <uarte_instance_init+0x6e>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    4c52:	2308      	movs	r3, #8
    4c54:	f8c5 3500 	str.w	r3, [r5, #1280]	; 0x500
		if (!cfg->disable_rx) {
    4c58:	7a3b      	ldrb	r3, [r7, #8]
    4c5a:	2b00      	cmp	r3, #0
    4c5c:	d1d5      	bne.n	4c0a <uarte_instance_init+0x3c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4c5e:	f8c5 3110 	str.w	r3, [r5, #272]	; 0x110
    4c62:	f8d5 3110 	ldr.w	r3, [r5, #272]	; 0x110
			nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
    4c66:	f106 0315 	add.w	r3, r6, #21
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    4c6a:	f8c5 3534 	str.w	r3, [r5, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    4c6e:	2301      	movs	r3, #1
    4c70:	f8c5 3538 	str.w	r3, [r5, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    4c74:	602b      	str	r3, [r5, #0]
}
    4c76:	e7c8      	b.n	4c0a <uarte_instance_init+0x3c>
			return err;
    4c78:	4680      	mov	r8, r0
    4c7a:	e7df      	b.n	4c3c <uarte_instance_init+0x6e>

00004c7c <uarte_0_init>:
				.tx_buffer = uarte##idx##_tx_buffer,	       \
				.tx_buff_size = sizeof(uarte##idx##_tx_buffer),\
			};))

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
    4c7c:	b510      	push	{r4, lr}
    4c7e:	4604      	mov	r4, r0
    4c80:	2200      	movs	r2, #0
    4c82:	2101      	movs	r1, #1
    4c84:	2002      	movs	r0, #2
    4c86:	f7fc fb03 	bl	1290 <z_arm_irq_priority_set>
    4c8a:	2002      	movs	r0, #2
    4c8c:	f7fc fae2 	bl	1254 <arch_irq_enable>
    4c90:	2100      	movs	r1, #0
    4c92:	4620      	mov	r0, r4
    4c94:	f7ff ff9b 	bl	4bce <uarte_instance_init>
    4c98:	bd10      	pop	{r4, pc}

00004c9a <rx_flush>:
{
    4c9a:	b5f0      	push	{r4, r5, r6, r7, lr}
    4c9c:	b083      	sub	sp, #12
	return dev->config;
    4c9e:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    4ca0:	681c      	ldr	r4, [r3, #0]
    return p_reg->RXD.AMOUNT;
    4ca2:	f8d4 753c 	ldr.w	r7, [r4, #1340]	; 0x53c
	size_t flush_len = buf ? len : sizeof(tmp_buf);
    4ca6:	460d      	mov	r5, r1
    4ca8:	b311      	cbz	r1, 4cf0 <rx_flush+0x56>
    4caa:	4616      	mov	r6, r2
	if (buf) {
    4cac:	b315      	cbz	r5, 4cf4 <rx_flush+0x5a>
		memset(buf, dirty, len);
    4cae:	2100      	movs	r1, #0
    4cb0:	4628      	mov	r0, r5
    4cb2:	f7ff fb01 	bl	42b8 <memset>
		flush_buf = buf;
    4cb6:	462b      	mov	r3, r5
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    4cb8:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    4cbc:	f8c4 6538 	str.w	r6, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4cc0:	2300      	movs	r3, #0
    4cc2:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
    4cc6:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    4cca:	2301      	movs	r3, #1
    4ccc:	62e3      	str	r3, [r4, #44]	; 0x2c
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    4cce:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
	while (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
    4cd2:	2b00      	cmp	r3, #0
    4cd4:	d0fb      	beq.n	4cce <rx_flush+0x34>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4cd6:	2300      	movs	r3, #0
    4cd8:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
    4cdc:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
	if (!buf) {
    4ce0:	b155      	cbz	r5, 4cf8 <rx_flush+0x5e>
    return p_reg->RXD.AMOUNT;
    4ce2:	f8d4 053c 	ldr.w	r0, [r4, #1340]	; 0x53c
	if (rx_amount != prev_rx_amount) {
    4ce6:	4287      	cmp	r7, r0
    4ce8:	d00c      	beq.n	4d04 <rx_flush+0x6a>
		return rx_amount;
    4cea:	b2c0      	uxtb	r0, r0
}
    4cec:	b003      	add	sp, #12
    4cee:	bdf0      	pop	{r4, r5, r6, r7, pc}
	size_t flush_len = buf ? len : sizeof(tmp_buf);
    4cf0:	2605      	movs	r6, #5
    4cf2:	e7db      	b.n	4cac <rx_flush+0x12>
		flush_buf = tmp_buf;
    4cf4:	466b      	mov	r3, sp
    4cf6:	e7df      	b.n	4cb8 <rx_flush+0x1e>
    4cf8:	f8d4 053c 	ldr.w	r0, [r4, #1340]	; 0x53c
		return nrf_uarte_rx_amount_get(uarte);
    4cfc:	b2c0      	uxtb	r0, r0
    4cfe:	e7f5      	b.n	4cec <rx_flush+0x52>
			return rx_amount;
    4d00:	b2c0      	uxtb	r0, r0
    4d02:	e7f3      	b.n	4cec <rx_flush+0x52>
	for (int i = 0; i < flush_len; i++) {
    4d04:	2300      	movs	r3, #0
    4d06:	42b3      	cmp	r3, r6
    4d08:	d204      	bcs.n	4d14 <rx_flush+0x7a>
		if (buf[i] != dirty) {
    4d0a:	5cea      	ldrb	r2, [r5, r3]
    4d0c:	2a00      	cmp	r2, #0
    4d0e:	d1f7      	bne.n	4d00 <rx_flush+0x66>
	for (int i = 0; i < flush_len; i++) {
    4d10:	3301      	adds	r3, #1
    4d12:	e7f8      	b.n	4d06 <rx_flush+0x6c>
	return 0;
    4d14:	2000      	movs	r0, #0
    4d16:	e7e9      	b.n	4cec <rx_flush+0x52>

00004d18 <async_uart_release>:
{
    4d18:	b570      	push	{r4, r5, r6, lr}
    4d1a:	4604      	mov	r4, r0
	return dev->data;
    4d1c:	6902      	ldr	r2, [r0, #16]
	__asm__ volatile(
    4d1e:	f04f 0320 	mov.w	r3, #32
    4d22:	f3ef 8611 	mrs	r6, BASEPRI
    4d26:	f383 8812 	msr	BASEPRI_MAX, r3
    4d2a:	f3bf 8f6f 	isb	sy
	data->async->low_power_mask &= ~dir_mask;
    4d2e:	68d0      	ldr	r0, [r2, #12]
    4d30:	f8d0 30c8 	ldr.w	r3, [r0, #200]	; 0xc8
    4d34:	ea23 0301 	bic.w	r3, r3, r1
    4d38:	f8c0 30c8 	str.w	r3, [r0, #200]	; 0xc8
	if (!data->async->low_power_mask) {
    4d3c:	68d5      	ldr	r5, [r2, #12]
    4d3e:	f8d5 30c8 	ldr.w	r3, [r5, #200]	; 0xc8
    4d42:	b923      	cbnz	r3, 4d4e <async_uart_release+0x36>
		if (dir_mask == UARTE_LOW_POWER_RX) {
    4d44:	2902      	cmp	r1, #2
    4d46:	d007      	beq.n	4d58 <async_uart_release+0x40>
		uart_disable(dev);
    4d48:	4620      	mov	r0, r4
    4d4a:	f7ff fd27 	bl	479c <uart_disable>
	__asm__ volatile(
    4d4e:	f386 8811 	msr	BASEPRI, r6
    4d52:	f3bf 8f6f 	isb	sy
}
    4d56:	bd70      	pop	{r4, r5, r6, pc}
				rx_flush(dev, data->async->rx_flush_buffer,
    4d58:	2205      	movs	r2, #5
    4d5a:	f105 01cc 	add.w	r1, r5, #204	; 0xcc
    4d5e:	4620      	mov	r0, r4
    4d60:	f7ff ff9b 	bl	4c9a <rx_flush>
			data->async->rx_flush_cnt =
    4d64:	f885 00d1 	strb.w	r0, [r5, #209]	; 0xd1
    4d68:	e7ee      	b.n	4d48 <async_uart_release+0x30>

00004d6a <txstopped_isr>:
{
    4d6a:	b5f0      	push	{r4, r5, r6, r7, lr}
    4d6c:	b087      	sub	sp, #28
    4d6e:	4605      	mov	r5, r0
	return dev->data;
    4d70:	6904      	ldr	r4, [r0, #16]
	return dev->config;
    4d72:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    4d74:	681f      	ldr	r7, [r3, #0]
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
    4d76:	685b      	ldr	r3, [r3, #4]
    4d78:	f013 0f10 	tst.w	r3, #16
    4d7c:	d147      	bne.n	4e0e <txstopped_isr+0xa4>
	if (!data->async->tx_buf) {
    4d7e:	68e3      	ldr	r3, [r4, #12]
    4d80:	689b      	ldr	r3, [r3, #8]
    4d82:	2b00      	cmp	r3, #0
    4d84:	d041      	beq.n	4e0a <txstopped_isr+0xa0>
	__asm__ volatile(
    4d86:	f04f 0320 	mov.w	r3, #32
    4d8a:	f3ef 8211 	mrs	r2, BASEPRI
    4d8e:	f383 8812 	msr	BASEPRI_MAX, r3
    4d92:	f3bf 8f6f 	isb	sy
	size_t amount = (data->async->tx_amount >= 0) ?
    4d96:	68e3      	ldr	r3, [r4, #12]
    4d98:	f8d3 10c4 	ldr.w	r1, [r3, #196]	; 0xc4
			data->async->tx_amount : nrf_uarte_tx_amount_get(uarte);
    4d9c:	2900      	cmp	r1, #0
    4d9e:	db42      	blt.n	4e26 <txstopped_isr+0xbc>
    4da0:	f8d3 60c4 	ldr.w	r6, [r3, #196]	; 0xc4
	__asm__ volatile(
    4da4:	f382 8811 	msr	BASEPRI, r2
    4da8:	f3bf 8f6f 	isb	sy
	if (data->async->pending_tx) {
    4dac:	68e3      	ldr	r3, [r4, #12]
    4dae:	f893 20d4 	ldrb.w	r2, [r3, #212]	; 0xd4
    4db2:	2a00      	cmp	r2, #0
    4db4:	d13a      	bne.n	4e2c <txstopped_isr+0xc2>
	if (data->async->tx_buf != data->async->xfer_buf) {
    4db6:	6899      	ldr	r1, [r3, #8]
    4db8:	691a      	ldr	r2, [r3, #16]
    4dba:	4291      	cmp	r1, r2
    4dbc:	d004      	beq.n	4dc8 <txstopped_isr+0x5e>
		if (amount == data->async->xfer_len) {
    4dbe:	695a      	ldr	r2, [r3, #20]
    4dc0:	42b2      	cmp	r2, r6
    4dc2:	d044      	beq.n	4e4e <txstopped_isr+0xe4>
			amount += data->async->tx_cache_offset;
    4dc4:	6a1b      	ldr	r3, [r3, #32]
    4dc6:	441e      	add	r6, r3
	k_timer_stop(&data->async->tx_timeout_timer);
    4dc8:	68e0      	ldr	r0, [r4, #12]
    4dca:	3028      	adds	r0, #40	; 0x28
	z_impl_k_timer_stop(timer);
    4dcc:	f000 fb97 	bl	54fe <z_impl_k_timer_stop>
	struct uart_event evt = {
    4dd0:	2300      	movs	r3, #0
    4dd2:	9301      	str	r3, [sp, #4]
    4dd4:	9302      	str	r3, [sp, #8]
    4dd6:	9303      	str	r3, [sp, #12]
    4dd8:	9304      	str	r3, [sp, #16]
    4dda:	9305      	str	r3, [sp, #20]
		.data.tx.buf = data->async->tx_buf,
    4ddc:	68e3      	ldr	r3, [r4, #12]
    4dde:	689a      	ldr	r2, [r3, #8]
	struct uart_event evt = {
    4de0:	9202      	str	r2, [sp, #8]
    4de2:	9603      	str	r6, [sp, #12]
	if (amount == data->async->tx_size) {
    4de4:	68db      	ldr	r3, [r3, #12]
    4de6:	42b3      	cmp	r3, r6
    4de8:	d04c      	beq.n	4e84 <txstopped_isr+0x11a>
		evt.type = UART_TX_ABORTED;
    4dea:	2301      	movs	r3, #1
    4dec:	f88d 3004 	strb.w	r3, [sp, #4]
    p_reg->INTENCLR = mask;
    4df0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
    4df4:	f8c7 3308 	str.w	r3, [r7, #776]	; 0x308
	data->async->tx_buf = NULL;
    4df8:	68e2      	ldr	r2, [r4, #12]
    4dfa:	2300      	movs	r3, #0
    4dfc:	6093      	str	r3, [r2, #8]
	data->async->tx_size = 0;
    4dfe:	68e2      	ldr	r2, [r4, #12]
    4e00:	60d3      	str	r3, [r2, #12]
	user_callback(dev, &evt);
    4e02:	a901      	add	r1, sp, #4
    4e04:	4628      	mov	r0, r5
    4e06:	f7ff fcf1 	bl	47ec <user_callback>
}
    4e0a:	b007      	add	sp, #28
    4e0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4e0e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
    4e12:	f8c7 3308 	str.w	r3, [r7, #776]	; 0x308
		async_uart_release(dev, UARTE_LOW_POWER_TX);
    4e16:	2101      	movs	r1, #1
    4e18:	f7ff ff7e 	bl	4d18 <async_uart_release>
		if (!data->async->tx_size) {
    4e1c:	68e3      	ldr	r3, [r4, #12]
    4e1e:	68db      	ldr	r3, [r3, #12]
    4e20:	2b00      	cmp	r3, #0
    4e22:	d1ac      	bne.n	4d7e <txstopped_isr+0x14>
    4e24:	e7f1      	b.n	4e0a <txstopped_isr+0xa0>
    return p_reg->TXD.AMOUNT;
    4e26:	f8d7 654c 	ldr.w	r6, [r7, #1356]	; 0x54c
    4e2a:	e7bb      	b.n	4da4 <txstopped_isr+0x3a>
	__asm__ volatile(
    4e2c:	f04f 0320 	mov.w	r3, #32
    4e30:	f3ef 8611 	mrs	r6, BASEPRI
    4e34:	f383 8812 	msr	BASEPRI_MAX, r3
    4e38:	f3bf 8f6f 	isb	sy
		start_tx_locked(dev, data);
    4e3c:	4621      	mov	r1, r4
    4e3e:	4628      	mov	r0, r5
    4e40:	f7ff fcb9 	bl	47b6 <start_tx_locked>
	__asm__ volatile(
    4e44:	f386 8811 	msr	BASEPRI, r6
    4e48:	f3bf 8f6f 	isb	sy
		return;
    4e4c:	e7dd      	b.n	4e0a <txstopped_isr+0xa0>
			data->async->tx_cache_offset += amount;
    4e4e:	6a1a      	ldr	r2, [r3, #32]
    4e50:	4416      	add	r6, r2
    4e52:	621e      	str	r6, [r3, #32]
			if (setup_tx_cache(data)) {
    4e54:	4620      	mov	r0, r4
    4e56:	f7ff fea1 	bl	4b9c <setup_tx_cache>
    4e5a:	b910      	cbnz	r0, 4e62 <txstopped_isr+0xf8>
			amount = data->async->tx_cache_offset;
    4e5c:	68e3      	ldr	r3, [r4, #12]
    4e5e:	6a1e      	ldr	r6, [r3, #32]
    4e60:	e7b2      	b.n	4dc8 <txstopped_isr+0x5e>
	__asm__ volatile(
    4e62:	f04f 0320 	mov.w	r3, #32
    4e66:	f3ef 8611 	mrs	r6, BASEPRI
    4e6a:	f383 8812 	msr	BASEPRI_MAX, r3
    4e6e:	f3bf 8f6f 	isb	sy
				start_tx_locked(dev, data);
    4e72:	4621      	mov	r1, r4
    4e74:	4628      	mov	r0, r5
    4e76:	f7ff fc9e 	bl	47b6 <start_tx_locked>
	__asm__ volatile(
    4e7a:	f386 8811 	msr	BASEPRI, r6
    4e7e:	f3bf 8f6f 	isb	sy
				return;
    4e82:	e7c2      	b.n	4e0a <txstopped_isr+0xa0>
		evt.type = UART_TX_DONE;
    4e84:	2300      	movs	r3, #0
    4e86:	f88d 3004 	strb.w	r3, [sp, #4]
    4e8a:	e7b1      	b.n	4df0 <txstopped_isr+0x86>

00004e8c <rxto_isr>:
{
    4e8c:	b538      	push	{r3, r4, r5, lr}
    4e8e:	4604      	mov	r4, r0
	return dev->data;
    4e90:	6905      	ldr	r5, [r0, #16]
	notify_rx_buf_release(dev, &data->async->rx_buf, true);
    4e92:	68e9      	ldr	r1, [r5, #12]
    4e94:	2201      	movs	r2, #1
    4e96:	3160      	adds	r1, #96	; 0x60
    4e98:	f7ff fcc8 	bl	482c <notify_rx_buf_release>
	notify_rx_buf_release(dev, &data->async->rx_next_buf, true);
    4e9c:	68e9      	ldr	r1, [r5, #12]
    4e9e:	2201      	movs	r2, #1
    4ea0:	316c      	adds	r1, #108	; 0x6c
    4ea2:	4620      	mov	r0, r4
    4ea4:	f7ff fcc2 	bl	482c <notify_rx_buf_release>
	if (data->async->rx_enabled) {
    4ea8:	68eb      	ldr	r3, [r5, #12]
    4eaa:	f893 20d2 	ldrb.w	r2, [r3, #210]	; 0xd2
    4eae:	b15a      	cbz	r2, 4ec8 <rxto_isr+0x3c>
		data->async->rx_enabled = false;
    4eb0:	2200      	movs	r2, #0
    4eb2:	f883 20d2 	strb.w	r2, [r3, #210]	; 0xd2
	return dev->config;
    4eb6:	6863      	ldr	r3, [r4, #4]
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
    4eb8:	685b      	ldr	r3, [r3, #4]
    4eba:	f013 0f10 	tst.w	r3, #16
    4ebe:	d109      	bne.n	4ed4 <rxto_isr+0x48>
	notify_rx_disable(dev);
    4ec0:	4620      	mov	r0, r4
    4ec2:	f7ff fccc 	bl	485e <notify_rx_disable>
}
    4ec6:	bd38      	pop	{r3, r4, r5, pc}
		(void)rx_flush(dev, NULL, 0);
    4ec8:	2200      	movs	r2, #0
    4eca:	4611      	mov	r1, r2
    4ecc:	4620      	mov	r0, r4
    4ece:	f7ff fee4 	bl	4c9a <rx_flush>
    4ed2:	e7f0      	b.n	4eb6 <rxto_isr+0x2a>
		async_uart_release(dev, UARTE_LOW_POWER_RX);
    4ed4:	2102      	movs	r1, #2
    4ed6:	4620      	mov	r0, r4
    4ed8:	f7ff ff1e 	bl	4d18 <async_uart_release>
    4edc:	e7f0      	b.n	4ec0 <rxto_isr+0x34>

00004ede <uarte_nrfx_isr_async>:
{
    4ede:	b538      	push	{r3, r4, r5, lr}
	return dev->config;
    4ee0:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    4ee2:	681c      	ldr	r4, [r3, #0]
	return dev->data;
    4ee4:	6902      	ldr	r2, [r0, #16]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    4ee6:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
	    && nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXDRDY)) {
    4eea:	bb5b      	cbnz	r3, 4f44 <uarte_nrfx_isr_async+0x66>
    4eec:	4605      	mov	r5, r0
    4eee:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ERROR)) {
    4ef2:	bb9b      	cbnz	r3, 4f5c <uarte_nrfx_isr_async+0x7e>
    4ef4:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)
    4ef8:	b123      	cbz	r3, 4f04 <uarte_nrfx_isr_async+0x26>
    return p_reg->INTENSET & mask;
    4efa:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	    && nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDRX_MASK)) {
    4efe:	f013 0f10 	tst.w	r3, #16
    4f02:	d133      	bne.n	4f6c <uarte_nrfx_isr_async+0x8e>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    4f04:	f8d4 314c 	ldr.w	r3, [r4, #332]	; 0x14c
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXSTARTED) &&
    4f08:	b113      	cbz	r3, 4f10 <uarte_nrfx_isr_async+0x32>
    4f0a:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
    4f0e:	b3b3      	cbz	r3, 4f7e <uarte_nrfx_isr_async+0xa0>
    4f10:	f8d4 3144 	ldr.w	r3, [r4, #324]	; 0x144
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXTO) &&
    4f14:	b113      	cbz	r3, 4f1c <uarte_nrfx_isr_async+0x3e>
    4f16:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
    4f1a:	b3c3      	cbz	r3, 4f8e <uarte_nrfx_isr_async+0xb0>
    4f1c:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)
    4f20:	b123      	cbz	r3, 4f2c <uarte_nrfx_isr_async+0x4e>
    return p_reg->INTENSET & mask;
    4f22:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	    && nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK)) {
    4f26:	f413 7f80 	tst.w	r3, #256	; 0x100
    4f2a:	d138      	bne.n	4f9e <uarte_nrfx_isr_async+0xc0>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    4f2c:	f8d4 3158 	ldr.w	r3, [r4, #344]	; 0x158
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)
    4f30:	b19b      	cbz	r3, 4f5a <uarte_nrfx_isr_async+0x7c>
    return p_reg->INTENSET & mask;
    4f32:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	    && nrf_uarte_int_enable_check(uarte,
    4f36:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
    4f3a:	d00e      	beq.n	4f5a <uarte_nrfx_isr_async+0x7c>
		txstopped_isr(dev);
    4f3c:	4628      	mov	r0, r5
    4f3e:	f7ff ff14 	bl	4d6a <txstopped_isr>
    4f42:	e00a      	b.n	4f5a <uarte_nrfx_isr_async+0x7c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4f44:	2300      	movs	r3, #0
    4f46:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
    4f4a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
		data->async->rx_cnt.cnt++;
    4f4e:	68d2      	ldr	r2, [r2, #12]
    4f50:	f8d2 30c0 	ldr.w	r3, [r2, #192]	; 0xc0
    4f54:	3301      	adds	r3, #1
    4f56:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
}
    4f5a:	bd38      	pop	{r3, r4, r5, pc}
    4f5c:	2300      	movs	r3, #0
    4f5e:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
    4f62:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
		error_isr(dev);
    4f66:	f7ff fd22 	bl	49ae <error_isr>
    4f6a:	e7c3      	b.n	4ef4 <uarte_nrfx_isr_async+0x16>
    4f6c:	2300      	movs	r3, #0
    4f6e:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
    4f72:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
		endrx_isr(dev);
    4f76:	4628      	mov	r0, r5
    4f78:	f7ff fd62 	bl	4a40 <endrx_isr>
    4f7c:	e7c2      	b.n	4f04 <uarte_nrfx_isr_async+0x26>
    4f7e:	f8c4 314c 	str.w	r3, [r4, #332]	; 0x14c
    4f82:	f8d4 314c 	ldr.w	r3, [r4, #332]	; 0x14c
		rxstarted_isr(dev);
    4f86:	4628      	mov	r0, r5
    4f88:	f7fd f862 	bl	2050 <rxstarted_isr>
    4f8c:	e7c0      	b.n	4f10 <uarte_nrfx_isr_async+0x32>
    4f8e:	f8c4 3144 	str.w	r3, [r4, #324]	; 0x144
    4f92:	f8d4 3144 	ldr.w	r3, [r4, #324]	; 0x144
		rxto_isr(dev);
    4f96:	4628      	mov	r0, r5
    4f98:	f7ff ff78 	bl	4e8c <rxto_isr>
    4f9c:	e7be      	b.n	4f1c <uarte_nrfx_isr_async+0x3e>
		endtx_isr(dev);
    4f9e:	4628      	mov	r0, r5
    4fa0:	f7ff fb3f 	bl	4622 <endtx_isr>
    4fa4:	e7c2      	b.n	4f2c <uarte_nrfx_isr_async+0x4e>

00004fa6 <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
    4fa6:	4770      	bx	lr

00004fa8 <counter_sub>:
	return (a - b) & COUNTER_MAX;
    4fa8:	1a40      	subs	r0, r0, r1
}
    4faa:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    4fae:	4770      	bx	lr

00004fb0 <event_clear>:
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    4fb0:	f100 0350 	add.w	r3, r0, #80	; 0x50
    4fb4:	009b      	lsls	r3, r3, #2
    4fb6:	b29b      	uxth	r3, r3
    4fb8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    4fbc:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
    4fc0:	2200      	movs	r2, #0
    4fc2:	601a      	str	r2, [r3, #0]
    4fc4:	681b      	ldr	r3, [r3, #0]
}
    4fc6:	4770      	bx	lr

00004fc8 <absolute_time_to_cc>:
}
    4fc8:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    4fcc:	4770      	bx	lr

00004fce <full_int_lock>:
	__asm__ volatile(
    4fce:	f04f 0320 	mov.w	r3, #32
    4fd2:	f3ef 8011 	mrs	r0, BASEPRI
    4fd6:	f383 8812 	msr	BASEPRI_MAX, r3
    4fda:	f3bf 8f6f 	isb	sy
}
    4fde:	4770      	bx	lr

00004fe0 <full_int_unlock>:
	__asm__ volatile(
    4fe0:	f380 8811 	msr	BASEPRI, r0
    4fe4:	f3bf 8f6f 	isb	sy
}
    4fe8:	4770      	bx	lr

00004fea <set_absolute_alarm>:
{
    4fea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4fec:	4606      	mov	r6, r0
	uint32_t cc_val = abs_val & COUNTER_MAX;
    4fee:	f021 457f 	bic.w	r5, r1, #4278190080	; 0xff000000
	uint32_t prev_cc = get_comparator(chan);
    4ff2:	f7fd f8d9 	bl	21a8 <get_comparator>
    4ff6:	4607      	mov	r7, r0
    4ff8:	e019      	b.n	502e <set_absolute_alarm+0x44>
	z_impl_k_busy_wait(usec_to_wait);
    4ffa:	2013      	movs	r0, #19
    4ffc:	f000 fa6d 	bl	54da <z_impl_k_busy_wait>
}
    5000:	e022      	b.n	5048 <set_absolute_alarm+0x5e>
		event_clear(chan);
    5002:	4630      	mov	r0, r6
    5004:	f7ff ffd4 	bl	4fb0 <event_clear>
		event_enable(chan);
    5008:	4630      	mov	r0, r6
    500a:	f7fd f8d5 	bl	21b8 <event_enable>
		set_comparator(chan, cc_val);
    500e:	4629      	mov	r1, r5
    5010:	4630      	mov	r0, r6
    5012:	f7fd f8bf 	bl	2194 <set_comparator>
		now2 = counter();
    5016:	f7fd f8e3 	bl	21e0 <counter>
		 (counter_sub(cc_val, now2 + 2) > COUNTER_HALF_SPAN));
    501a:	4284      	cmp	r4, r0
    501c:	d01e      	beq.n	505c <set_absolute_alarm+0x72>
    501e:	1c81      	adds	r1, r0, #2
    5020:	4628      	mov	r0, r5
    5022:	f7ff ffc1 	bl	4fa8 <counter_sub>
	} while ((now2 != now) &&
    5026:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    502a:	d917      	bls.n	505c <set_absolute_alarm+0x72>
		prev_cc = cc_val;
    502c:	462f      	mov	r7, r5
		now = counter();
    502e:	f7fd f8d7 	bl	21e0 <counter>
    5032:	4604      	mov	r4, r0
		set_comparator(chan, now);
    5034:	4601      	mov	r1, r0
    5036:	4630      	mov	r0, r6
    5038:	f7fd f8ac 	bl	2194 <set_comparator>
		if (counter_sub(prev_cc, now) == 1) {
    503c:	4621      	mov	r1, r4
    503e:	4638      	mov	r0, r7
    5040:	f7ff ffb2 	bl	4fa8 <counter_sub>
    5044:	2801      	cmp	r0, #1
    5046:	d0d8      	beq.n	4ffa <set_absolute_alarm+0x10>
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
    5048:	1ca7      	adds	r7, r4, #2
    504a:	4639      	mov	r1, r7
    504c:	4628      	mov	r0, r5
    504e:	f7ff ffab 	bl	4fa8 <counter_sub>
    5052:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    5056:	d9d4      	bls.n	5002 <set_absolute_alarm+0x18>
			cc_val = now + 2;
    5058:	463d      	mov	r5, r7
    505a:	e7d2      	b.n	5002 <set_absolute_alarm+0x18>
}
    505c:	4628      	mov	r0, r5
    505e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00005060 <compare_set>:
{
    5060:	b5f0      	push	{r4, r5, r6, r7, lr}
    5062:	b083      	sub	sp, #12
    5064:	4604      	mov	r4, r0
    5066:	4617      	mov	r7, r2
    5068:	461d      	mov	r5, r3
	key = compare_int_lock(chan);
    506a:	f7fd f8bf 	bl	21ec <compare_int_lock>
    506e:	4606      	mov	r6, r0
	int ret = compare_set_nolocks(chan, target_time, handler, user_data);
    5070:	9b09      	ldr	r3, [sp, #36]	; 0x24
    5072:	9301      	str	r3, [sp, #4]
    5074:	9b08      	ldr	r3, [sp, #32]
    5076:	9300      	str	r3, [sp, #0]
    5078:	463a      	mov	r2, r7
    507a:	462b      	mov	r3, r5
    507c:	4620      	mov	r0, r4
    507e:	f7fd f9a3 	bl	23c8 <compare_set_nolocks>
    5082:	4605      	mov	r5, r0
	compare_int_unlock(chan, key);
    5084:	4631      	mov	r1, r6
    5086:	4620      	mov	r0, r4
    5088:	f7fd f914 	bl	22b4 <compare_int_unlock>
}
    508c:	4628      	mov	r0, r5
    508e:	b003      	add	sp, #12
    5090:	bdf0      	pop	{r4, r5, r6, r7, pc}

00005092 <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
    5092:	b508      	push	{r3, lr}
	z_spm_ns_fatal_error_handler();
#endif

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
		sys_arch_reboot(0);
    5094:	2000      	movs	r0, #0
    5096:	f7fc fc49 	bl	192c <sys_arch_reboot>

0000509a <nrfx_isr>:

#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
    509a:	b508      	push	{r3, lr}
	((nrfx_irq_handler_t)irq_handler)();
    509c:	4780      	blx	r0
}
    509e:	bd08      	pop	{r3, pc}

000050a0 <nrfx_busy_wait>:

void nrfx_busy_wait(uint32_t usec_to_wait)
{
    50a0:	b508      	push	{r3, lr}
	z_impl_k_busy_wait(usec_to_wait);
    50a2:	f000 fa1a 	bl	54da <z_impl_k_busy_wait>
	k_busy_wait(usec_to_wait);
}
    50a6:	bd08      	pop	{r3, pc}

000050a8 <nrfx_clock_enable>:
{
    50a8:	b508      	push	{r3, lr}
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
    50aa:	2000      	movs	r0, #0
    50ac:	f7fc f8e2 	bl	1274 <arch_irq_is_enabled>
    50b0:	b100      	cbz	r0, 50b4 <nrfx_clock_enable+0xc>
}
    50b2:	bd08      	pop	{r3, pc}
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
    50b4:	f7fc f8ce 	bl	1254 <arch_irq_enable>
    50b8:	e7fb      	b.n	50b2 <nrfx_clock_enable+0xa>

000050ba <z_device_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
    50ba:	b148      	cbz	r0, 50d0 <z_device_ready+0x16>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
    50bc:	68c3      	ldr	r3, [r0, #12]
    50be:	8818      	ldrh	r0, [r3, #0]
    50c0:	f3c0 0008 	ubfx	r0, r0, #0, #9
    50c4:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
    50c8:	bf14      	ite	ne
    50ca:	2000      	movne	r0, #0
    50cc:	2001      	moveq	r0, #1
    50ce:	4770      	bx	lr
		return false;
    50d0:	2000      	movs	r0, #0
}
    50d2:	4770      	bx	lr

000050d4 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    50d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    50d6:	4605      	mov	r5, r0
    50d8:	460e      	mov	r6, r1
	__asm__ volatile(
    50da:	f04f 0320 	mov.w	r3, #32
    50de:	f3ef 8711 	mrs	r7, BASEPRI
    50e2:	f383 8812 	msr	BASEPRI_MAX, r3
    50e6:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
    50ea:	f7fe fb17 	bl	371c <z_impl_z_current_get>
    50ee:	4604      	mov	r4, r0
	LOG_ERR("Current thread: %p (%s)", thread,
		log_strdup(thread_name_get(thread)));

	coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
    50f0:	4631      	mov	r1, r6
    50f2:	4628      	mov	r0, r5
    50f4:	f7ff ffcd 	bl	5092 <k_sys_fatal_error_handler>
	__asm__ volatile(
    50f8:	f387 8811 	msr	BASEPRI, r7
    50fc:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
    5100:	4620      	mov	r0, r4
    5102:	f7fc fb77 	bl	17f4 <z_impl_k_thread_abort>
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
    5106:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00005108 <setup_thread_stack>:
{
    5108:	b410      	push	{r4}
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    510a:	3207      	adds	r2, #7
    510c:	f022 0207 	bic.w	r2, r2, #7
    5110:	f102 0320 	add.w	r3, r2, #32

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
    5114:	f101 0420 	add.w	r4, r1, #32
	new_thread->stack_info.start = (uintptr_t)stack_buf_start;
    5118:	f8c0 4098 	str.w	r4, [r0, #152]	; 0x98
	new_thread->stack_info.size = stack_buf_size;
    511c:	f8c0 209c 	str.w	r2, [r0, #156]	; 0x9c
	new_thread->stack_info.delta = delta;
    5120:	2200      	movs	r2, #0
    5122:	f8c0 20a0 	str.w	r2, [r0, #160]	; 0xa0
}
    5126:	18c8      	adds	r0, r1, r3
    5128:	bc10      	pop	{r4}
    512a:	4770      	bx	lr

0000512c <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    512c:	f3ef 8005 	mrs	r0, IPSR
}
    5130:	3800      	subs	r0, #0
    5132:	bf18      	it	ne
    5134:	2001      	movne	r0, #1
    5136:	4770      	bx	lr

00005138 <z_impl_k_thread_start>:
{
    5138:	b508      	push	{r3, lr}
	z_sched_start(thread);
    513a:	f7fe f91f 	bl	337c <z_sched_start>
}
    513e:	bd08      	pop	{r3, pc}

00005140 <z_init_thread_base>:
#endif

void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
    5140:	b410      	push	{r4}
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
    5142:	2400      	movs	r4, #0
    5144:	6084      	str	r4, [r0, #8]
	thread_base->user_options = (uint8_t)options;
    5146:	7303      	strb	r3, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
    5148:	7342      	strb	r2, [r0, #13]

	thread_base->prio = priority;
    514a:	7381      	strb	r1, [r0, #14]

	thread_base->sched_locked = 0U;
    514c:	73c4      	strb	r4, [r0, #15]
	node->next = NULL;
    514e:	6184      	str	r4, [r0, #24]
	node->prev = NULL;
    5150:	61c4      	str	r4, [r0, #28]
#endif

	/* swap_data does not need to be initialized */

	z_init_thread_timeout(thread_base);
}
    5152:	bc10      	pop	{r4}
    5154:	4770      	bx	lr

00005156 <z_pm_save_idle_exit>:
{
    5156:	b508      	push	{r3, lr}
	pm_system_resume();
    5158:	f7fb ff3a 	bl	fd0 <pm_system_resume>
	sys_clock_idle_exit();
    515c:	f7ff ff23 	bl	4fa6 <sys_clock_idle_exit>
}
    5160:	bd08      	pop	{r3, pc}

00005162 <thread_active_elsewhere>:
}
    5162:	2000      	movs	r0, #0
    5164:	4770      	bx	lr

00005166 <pended_on_thread>:
}
    5166:	6880      	ldr	r0, [r0, #8]
    5168:	4770      	bx	lr

0000516a <z_sched_prio_cmp>:
	int32_t b1 = thread_1->base.prio;
    516a:	f990 300e 	ldrsb.w	r3, [r0, #14]
	int32_t b2 = thread_2->base.prio;
    516e:	f991 000e 	ldrsb.w	r0, [r1, #14]
	if (b1 != b2) {
    5172:	4283      	cmp	r3, r0
    5174:	d001      	beq.n	517a <z_sched_prio_cmp+0x10>
		return b2 - b1;
    5176:	1ac0      	subs	r0, r0, r3
    5178:	4770      	bx	lr
	return 0;
    517a:	2000      	movs	r0, #0
}
    517c:	4770      	bx	lr

0000517e <z_unpend_thread_no_timeout>:
{
    517e:	b538      	push	{r3, r4, r5, lr}
    5180:	4604      	mov	r4, r0
	LOCKED(&sched_spinlock) {
    5182:	2300      	movs	r3, #0
	__asm__ volatile(
    5184:	f04f 0220 	mov.w	r2, #32
    5188:	f3ef 8511 	mrs	r5, BASEPRI
    518c:	f382 8812 	msr	BASEPRI_MAX, r2
    5190:	f3bf 8f6f 	isb	sy
    5194:	b98b      	cbnz	r3, 51ba <z_unpend_thread_no_timeout+0x3c>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
    5196:	4620      	mov	r0, r4
    5198:	f7ff ffe5 	bl	5166 <pended_on_thread>
    519c:	4621      	mov	r1, r4
    519e:	f000 f822 	bl	51e6 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    51a2:	7b63      	ldrb	r3, [r4, #13]
    51a4:	f023 0302 	bic.w	r3, r3, #2
    51a8:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
    51aa:	2300      	movs	r3, #0
    51ac:	60a3      	str	r3, [r4, #8]
	__asm__ volatile(
    51ae:	f385 8811 	msr	BASEPRI, r5
    51b2:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    51b6:	2301      	movs	r3, #1
    51b8:	e7ec      	b.n	5194 <z_unpend_thread_no_timeout+0x16>
}
    51ba:	bd38      	pop	{r3, r4, r5, pc}

000051bc <z_reschedule_irqlock>:
{
    51bc:	b508      	push	{r3, lr}
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    51be:	4603      	mov	r3, r0
    51c0:	b920      	cbnz	r0, 51cc <z_reschedule_irqlock+0x10>
    51c2:	f3ef 8205 	mrs	r2, IPSR
    51c6:	b942      	cbnz	r2, 51da <z_reschedule_irqlock+0x1e>
    51c8:	2201      	movs	r2, #1
    51ca:	e000      	b.n	51ce <z_reschedule_irqlock+0x12>
    51cc:	2200      	movs	r2, #0
	if (resched(key)) {
    51ce:	b932      	cbnz	r2, 51de <z_reschedule_irqlock+0x22>
    51d0:	f383 8811 	msr	BASEPRI, r3
    51d4:	f3bf 8f6f 	isb	sy
}
    51d8:	bd08      	pop	{r3, pc}
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    51da:	2200      	movs	r2, #0
    51dc:	e7f7      	b.n	51ce <z_reschedule_irqlock+0x12>
	ret = arch_swap(key);
    51de:	4618      	mov	r0, r3
    51e0:	f7fc f886 	bl	12f0 <arch_swap>
	return ret;
    51e4:	e7f8      	b.n	51d8 <z_reschedule_irqlock+0x1c>

000051e6 <z_priq_dumb_remove>:
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
    51e6:	684a      	ldr	r2, [r1, #4]
	sys_dnode_t *const next = node->next;
    51e8:	680b      	ldr	r3, [r1, #0]

	prev->next = next;
    51ea:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    51ec:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    51ee:	2300      	movs	r3, #0
    51f0:	600b      	str	r3, [r1, #0]
	node->prev = NULL;
    51f2:	604b      	str	r3, [r1, #4]
}
    51f4:	4770      	bx	lr

000051f6 <z_priq_dumb_best>:
{
    51f6:	4603      	mov	r3, r0
	return list->head == list;
    51f8:	6800      	ldr	r0, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    51fa:	4283      	cmp	r3, r0
    51fc:	d000      	beq.n	5200 <z_priq_dumb_best+0xa>
}
    51fe:	4770      	bx	lr
	struct k_thread *thread = NULL;
    5200:	2000      	movs	r0, #0
	return thread;
    5202:	e7fc      	b.n	51fe <z_priq_dumb_best+0x8>

00005204 <z_ready_thread>:
{
    5204:	b538      	push	{r3, r4, r5, lr}
    5206:	4604      	mov	r4, r0
	LOCKED(&sched_spinlock) {
    5208:	2300      	movs	r3, #0
	__asm__ volatile(
    520a:	f04f 0220 	mov.w	r2, #32
    520e:	f3ef 8511 	mrs	r5, BASEPRI
    5212:	f382 8812 	msr	BASEPRI_MAX, r2
    5216:	f3bf 8f6f 	isb	sy
    521a:	e007      	b.n	522c <z_ready_thread+0x28>
			ready_thread(thread);
    521c:	4620      	mov	r0, r4
    521e:	f7fe f86d 	bl	32fc <ready_thread>
	__asm__ volatile(
    5222:	f385 8811 	msr	BASEPRI, r5
    5226:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    522a:	2301      	movs	r3, #1
    522c:	b92b      	cbnz	r3, 523a <z_ready_thread+0x36>
		if (!thread_active_elsewhere(thread)) {
    522e:	4620      	mov	r0, r4
    5230:	f7ff ff97 	bl	5162 <thread_active_elsewhere>
    5234:	2800      	cmp	r0, #0
    5236:	d1f4      	bne.n	5222 <z_ready_thread+0x1e>
    5238:	e7f0      	b.n	521c <z_ready_thread+0x18>
}
    523a:	bd38      	pop	{r3, r4, r5, pc}

0000523c <z_thread_timeout>:
{
    523c:	b570      	push	{r4, r5, r6, lr}
    523e:	4604      	mov	r4, r0
	struct k_thread *thread = CONTAINER_OF(timeout,
    5240:	f1a0 0518 	sub.w	r5, r0, #24
	LOCKED(&sched_spinlock) {
    5244:	2300      	movs	r3, #0
	__asm__ volatile(
    5246:	f04f 0220 	mov.w	r2, #32
    524a:	f3ef 8611 	mrs	r6, BASEPRI
    524e:	f382 8812 	msr	BASEPRI_MAX, r2
    5252:	f3bf 8f6f 	isb	sy
    5256:	e019      	b.n	528c <z_thread_timeout+0x50>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
    5258:	4628      	mov	r0, r5
    525a:	f7ff ff84 	bl	5166 <pended_on_thread>
    525e:	4629      	mov	r1, r5
    5260:	f7ff ffc1 	bl	51e6 <z_priq_dumb_remove>
    5264:	7b6b      	ldrb	r3, [r5, #13]
    5266:	f023 0302 	bic.w	r3, r3, #2
    526a:	736b      	strb	r3, [r5, #13]
	thread->base.pended_on = NULL;
    526c:	2300      	movs	r3, #0
    526e:	60ab      	str	r3, [r5, #8]
	thread->base.thread_state &= ~_THREAD_PRESTART;
    5270:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
    5274:	f003 03eb 	and.w	r3, r3, #235	; 0xeb
    5278:	f804 3c0b 	strb.w	r3, [r4, #-11]
			ready_thread(thread);
    527c:	4628      	mov	r0, r5
    527e:	f7fe f83d 	bl	32fc <ready_thread>
	__asm__ volatile(
    5282:	f386 8811 	msr	BASEPRI, r6
    5286:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    528a:	2301      	movs	r3, #1
    528c:	b94b      	cbnz	r3, 52a2 <z_thread_timeout+0x66>
		bool killed = ((thread->base.thread_state & _THREAD_DEAD) ||
    528e:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
		if (!killed) {
    5292:	f013 0f28 	tst.w	r3, #40	; 0x28
    5296:	d1f4      	bne.n	5282 <z_thread_timeout+0x46>
			if (thread->base.pended_on != NULL) {
    5298:	f854 3c10 	ldr.w	r3, [r4, #-16]
    529c:	2b00      	cmp	r3, #0
    529e:	d1db      	bne.n	5258 <z_thread_timeout+0x1c>
    52a0:	e7e6      	b.n	5270 <z_thread_timeout+0x34>
}
    52a2:	bd70      	pop	{r4, r5, r6, pc}

000052a4 <add_to_waitq_locked>:
{
    52a4:	b570      	push	{r4, r5, r6, lr}
    52a6:	4605      	mov	r5, r0
    52a8:	460e      	mov	r6, r1
	unready_thread(thread);
    52aa:	f7fe f885 	bl	33b8 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
    52ae:	7b6b      	ldrb	r3, [r5, #13]
    52b0:	f043 0302 	orr.w	r3, r3, #2
    52b4:	736b      	strb	r3, [r5, #13]
	if (wait_q != NULL) {
    52b6:	b1b6      	cbz	r6, 52e6 <add_to_waitq_locked+0x42>
		thread->base.pended_on = wait_q;
    52b8:	60ae      	str	r6, [r5, #8]
	return list->head == list;
    52ba:	6834      	ldr	r4, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    52bc:	42a6      	cmp	r6, r4
    52be:	d019      	beq.n	52f4 <add_to_waitq_locked+0x50>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    52c0:	b164      	cbz	r4, 52dc <add_to_waitq_locked+0x38>
		if (z_sched_prio_cmp(thread, t) > 0) {
    52c2:	4621      	mov	r1, r4
    52c4:	4628      	mov	r0, r5
    52c6:	f7ff ff50 	bl	516a <z_sched_prio_cmp>
    52ca:	2800      	cmp	r0, #0
    52cc:	dc0c      	bgt.n	52e8 <add_to_waitq_locked+0x44>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    52ce:	b12c      	cbz	r4, 52dc <add_to_waitq_locked+0x38>
	return (node == list->tail) ? NULL : node->next;
    52d0:	6873      	ldr	r3, [r6, #4]
    52d2:	429c      	cmp	r4, r3
    52d4:	d002      	beq.n	52dc <add_to_waitq_locked+0x38>
    52d6:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    52d8:	2c00      	cmp	r4, #0
    52da:	d1f1      	bne.n	52c0 <add_to_waitq_locked+0x1c>
	sys_dnode_t *const tail = list->tail;
    52dc:	6873      	ldr	r3, [r6, #4]
	node->next = list;
    52de:	602e      	str	r6, [r5, #0]
	node->prev = tail;
    52e0:	606b      	str	r3, [r5, #4]
	tail->next = node;
    52e2:	601d      	str	r5, [r3, #0]
	list->tail = node;
    52e4:	6075      	str	r5, [r6, #4]
}
    52e6:	bd70      	pop	{r4, r5, r6, pc}
	sys_dnode_t *const prev = successor->prev;
    52e8:	6863      	ldr	r3, [r4, #4]
	node->prev = prev;
    52ea:	606b      	str	r3, [r5, #4]
	node->next = successor;
    52ec:	602c      	str	r4, [r5, #0]
	prev->next = node;
    52ee:	601d      	str	r5, [r3, #0]
	successor->prev = node;
    52f0:	6065      	str	r5, [r4, #4]
}
    52f2:	e7f8      	b.n	52e6 <add_to_waitq_locked+0x42>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    52f4:	2400      	movs	r4, #0
    52f6:	e7e3      	b.n	52c0 <add_to_waitq_locked+0x1c>

000052f8 <pend>:
{
    52f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    52fc:	4605      	mov	r5, r0
    52fe:	460f      	mov	r7, r1
    5300:	4691      	mov	r9, r2
    5302:	4698      	mov	r8, r3
	LOCKED(&sched_spinlock) {
    5304:	2400      	movs	r4, #0
	__asm__ volatile(
    5306:	f04f 0320 	mov.w	r3, #32
    530a:	f3ef 8611 	mrs	r6, BASEPRI
    530e:	f383 8812 	msr	BASEPRI_MAX, r3
    5312:	f3bf 8f6f 	isb	sy
    5316:	b94c      	cbnz	r4, 532c <pend+0x34>
		add_to_waitq_locked(thread, wait_q);
    5318:	4639      	mov	r1, r7
    531a:	4628      	mov	r0, r5
    531c:	f7ff ffc2 	bl	52a4 <add_to_waitq_locked>
	__asm__ volatile(
    5320:	f386 8811 	msr	BASEPRI, r6
    5324:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    5328:	2401      	movs	r4, #1
    532a:	e7f4      	b.n	5316 <pend+0x1e>
	add_thread_timeout(thread, timeout);
    532c:	464a      	mov	r2, r9
    532e:	4643      	mov	r3, r8
    5330:	4628      	mov	r0, r5
    5332:	f7fd fe97 	bl	3064 <add_thread_timeout>
}
    5336:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0000533a <z_unpend1_no_timeout>:
{
    533a:	b570      	push	{r4, r5, r6, lr}
    533c:	4606      	mov	r6, r0
	LOCKED(&sched_spinlock) {
    533e:	2300      	movs	r3, #0
	__asm__ volatile(
    5340:	f04f 0220 	mov.w	r2, #32
    5344:	f3ef 8511 	mrs	r5, BASEPRI
    5348:	f382 8812 	msr	BASEPRI_MAX, r2
    534c:	f3bf 8f6f 	isb	sy
	struct k_thread *thread = NULL;
    5350:	461c      	mov	r4, r3
    5352:	e00f      	b.n	5374 <z_unpend1_no_timeout+0x3a>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
    5354:	f7ff ff07 	bl	5166 <pended_on_thread>
    5358:	4621      	mov	r1, r4
    535a:	f7ff ff44 	bl	51e6 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    535e:	7b63      	ldrb	r3, [r4, #13]
    5360:	f023 0302 	bic.w	r3, r3, #2
    5364:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
    5366:	2300      	movs	r3, #0
    5368:	60a3      	str	r3, [r4, #8]
	__asm__ volatile(
    536a:	f385 8811 	msr	BASEPRI, r5
    536e:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    5372:	2301      	movs	r3, #1
    5374:	b933      	cbnz	r3, 5384 <z_unpend1_no_timeout+0x4a>
		thread = _priq_wait_best(&wait_q->waitq);
    5376:	4630      	mov	r0, r6
    5378:	f7ff ff3d 	bl	51f6 <z_priq_dumb_best>
		if (thread != NULL) {
    537c:	4604      	mov	r4, r0
    537e:	2800      	cmp	r0, #0
    5380:	d1e8      	bne.n	5354 <z_unpend1_no_timeout+0x1a>
    5382:	e7f2      	b.n	536a <z_unpend1_no_timeout+0x30>
}
    5384:	4620      	mov	r0, r4
    5386:	bd70      	pop	{r4, r5, r6, pc}

00005388 <z_unpend_first_thread>:
{
    5388:	b570      	push	{r4, r5, r6, lr}
    538a:	4606      	mov	r6, r0
	LOCKED(&sched_spinlock) {
    538c:	2300      	movs	r3, #0
	__asm__ volatile(
    538e:	f04f 0220 	mov.w	r2, #32
    5392:	f3ef 8511 	mrs	r5, BASEPRI
    5396:	f382 8812 	msr	BASEPRI_MAX, r2
    539a:	f3bf 8f6f 	isb	sy
	struct k_thread *thread = NULL;
    539e:	461c      	mov	r4, r3
    53a0:	e013      	b.n	53ca <z_unpend_first_thread+0x42>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
    53a2:	f7ff fee0 	bl	5166 <pended_on_thread>
    53a6:	4621      	mov	r1, r4
    53a8:	f7ff ff1d 	bl	51e6 <z_priq_dumb_remove>
    53ac:	7b63      	ldrb	r3, [r4, #13]
    53ae:	f023 0302 	bic.w	r3, r3, #2
    53b2:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
    53b4:	2300      	movs	r3, #0
    53b6:	60a3      	str	r3, [r4, #8]
	return z_abort_timeout(&thread->base.timeout);
    53b8:	f104 0018 	add.w	r0, r4, #24
    53bc:	f000 f82a 	bl	5414 <z_abort_timeout>
	__asm__ volatile(
    53c0:	f385 8811 	msr	BASEPRI, r5
    53c4:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    53c8:	2301      	movs	r3, #1
    53ca:	b933      	cbnz	r3, 53da <z_unpend_first_thread+0x52>
		thread = _priq_wait_best(&wait_q->waitq);
    53cc:	4630      	mov	r0, r6
    53ce:	f7ff ff12 	bl	51f6 <z_priq_dumb_best>
		if (thread != NULL) {
    53d2:	4604      	mov	r4, r0
    53d4:	2800      	cmp	r0, #0
    53d6:	d1e4      	bne.n	53a2 <z_unpend_first_thread+0x1a>
    53d8:	e7f2      	b.n	53c0 <z_unpend_first_thread+0x38>
}
    53da:	4620      	mov	r0, r4
    53dc:	bd70      	pop	{r4, r5, r6, pc}

000053de <init_ready_q>:
	sys_dlist_init(&rq->runq);
    53de:	1d03      	adds	r3, r0, #4
	list->head = (sys_dnode_t *)list;
    53e0:	6043      	str	r3, [r0, #4]
	list->tail = (sys_dnode_t *)list;
    53e2:	6083      	str	r3, [r0, #8]
}
    53e4:	4770      	bx	lr

000053e6 <remove_timeout>:
{
    53e6:	b538      	push	{r3, r4, r5, lr}
    53e8:	4604      	mov	r4, r0
	if (next(t) != NULL) {
    53ea:	f7fe f9e9 	bl	37c0 <next>
    53ee:	b148      	cbz	r0, 5404 <remove_timeout+0x1e>
    53f0:	4602      	mov	r2, r0
		next(t)->dticks += t->dticks;
    53f2:	6920      	ldr	r0, [r4, #16]
    53f4:	6965      	ldr	r5, [r4, #20]
    53f6:	6913      	ldr	r3, [r2, #16]
    53f8:	6951      	ldr	r1, [r2, #20]
    53fa:	181b      	adds	r3, r3, r0
    53fc:	eb45 0101 	adc.w	r1, r5, r1
    5400:	6113      	str	r3, [r2, #16]
    5402:	6151      	str	r1, [r2, #20]
	sys_dnode_t *const prev = node->prev;
    5404:	6862      	ldr	r2, [r4, #4]
	sys_dnode_t *const next = node->next;
    5406:	6823      	ldr	r3, [r4, #0]
	prev->next = next;
    5408:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    540a:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    540c:	2300      	movs	r3, #0
    540e:	6023      	str	r3, [r4, #0]
	node->prev = NULL;
    5410:	6063      	str	r3, [r4, #4]
}
    5412:	bd38      	pop	{r3, r4, r5, pc}

00005414 <z_abort_timeout>:
{
    5414:	b570      	push	{r4, r5, r6, lr}
    5416:	4604      	mov	r4, r0
	LOCKED(&timeout_lock) {
    5418:	2300      	movs	r3, #0
	__asm__ volatile(
    541a:	f04f 0220 	mov.w	r2, #32
    541e:	f3ef 8611 	mrs	r6, BASEPRI
    5422:	f382 8812 	msr	BASEPRI_MAX, r2
    5426:	f3bf 8f6f 	isb	sy
	int ret = -EINVAL;
    542a:	f06f 0015 	mvn.w	r0, #21
    542e:	e008      	b.n	5442 <z_abort_timeout+0x2e>
			remove_timeout(to);
    5430:	4620      	mov	r0, r4
    5432:	f7ff ffd8 	bl	53e6 <remove_timeout>
			ret = 0;
    5436:	4628      	mov	r0, r5
	__asm__ volatile(
    5438:	f386 8811 	msr	BASEPRI, r6
    543c:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
    5440:	2301      	movs	r3, #1
    5442:	461d      	mov	r5, r3
    5444:	b91b      	cbnz	r3, 544e <z_abort_timeout+0x3a>
	return node->next != NULL;
    5446:	6823      	ldr	r3, [r4, #0]
		if (sys_dnode_is_linked(&to->node)) {
    5448:	2b00      	cmp	r3, #0
    544a:	d1f1      	bne.n	5430 <z_abort_timeout+0x1c>
    544c:	e7f4      	b.n	5438 <z_abort_timeout+0x24>
}
    544e:	bd70      	pop	{r4, r5, r6, pc}

00005450 <z_get_next_timeout_expiry>:
{
    5450:	b510      	push	{r4, lr}
	LOCKED(&timeout_lock) {
    5452:	2300      	movs	r3, #0
	__asm__ volatile(
    5454:	f04f 0220 	mov.w	r2, #32
    5458:	f3ef 8411 	mrs	r4, BASEPRI
    545c:	f382 8812 	msr	BASEPRI_MAX, r2
    5460:	f3bf 8f6f 	isb	sy
	int32_t ret = (int32_t) K_TICKS_FOREVER;
    5464:	f04f 30ff 	mov.w	r0, #4294967295
	LOCKED(&timeout_lock) {
    5468:	b93b      	cbnz	r3, 547a <z_get_next_timeout_expiry+0x2a>
		ret = next_timeout();
    546a:	f7fe f9c1 	bl	37f0 <next_timeout>
	__asm__ volatile(
    546e:	f384 8811 	msr	BASEPRI, r4
    5472:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
    5476:	2301      	movs	r3, #1
    5478:	e7f6      	b.n	5468 <z_get_next_timeout_expiry+0x18>
}
    547a:	bd10      	pop	{r4, pc}

0000547c <z_set_timeout_expiry>:
{
    547c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    547e:	4606      	mov	r6, r0
    5480:	460f      	mov	r7, r1
	LOCKED(&timeout_lock) {
    5482:	2300      	movs	r3, #0
	__asm__ volatile(
    5484:	f04f 0220 	mov.w	r2, #32
    5488:	f3ef 8511 	mrs	r5, BASEPRI
    548c:	f382 8812 	msr	BASEPRI_MAX, r2
    5490:	f3bf 8f6f 	isb	sy
    5494:	e00a      	b.n	54ac <z_set_timeout_expiry+0x30>
			      || (ticks <= next_to);
    5496:	2401      	movs	r4, #1
		bool sooner = (next_to == K_TICKS_FOREVER)
    5498:	f004 0401 	and.w	r4, r4, #1
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
    549c:	2801      	cmp	r0, #1
    549e:	dd00      	ble.n	54a2 <z_set_timeout_expiry+0x26>
    54a0:	b97c      	cbnz	r4, 54c2 <z_set_timeout_expiry+0x46>
	__asm__ volatile(
    54a2:	f385 8811 	msr	BASEPRI, r5
    54a6:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
    54aa:	2301      	movs	r3, #1
    54ac:	461c      	mov	r4, r3
    54ae:	b97b      	cbnz	r3, 54d0 <z_set_timeout_expiry+0x54>
		int next_to = next_timeout();
    54b0:	f7fe f99e 	bl	37f0 <next_timeout>
			      || (ticks <= next_to);
    54b4:	f1b0 3fff 	cmp.w	r0, #4294967295
    54b8:	d0ed      	beq.n	5496 <z_set_timeout_expiry+0x1a>
    54ba:	42b0      	cmp	r0, r6
    54bc:	dbec      	blt.n	5498 <z_set_timeout_expiry+0x1c>
    54be:	2401      	movs	r4, #1
    54c0:	e7ea      	b.n	5498 <z_set_timeout_expiry+0x1c>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
    54c2:	4639      	mov	r1, r7
    54c4:	42b0      	cmp	r0, r6
    54c6:	bfa8      	it	ge
    54c8:	4630      	movge	r0, r6
    54ca:	f7fd f879 	bl	25c0 <sys_clock_set_timeout>
    54ce:	e7e8      	b.n	54a2 <z_set_timeout_expiry+0x26>
}
    54d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000054d2 <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
    54d2:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
    54d4:	f7fe fabe 	bl	3a54 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
    54d8:	bd08      	pop	{r3, pc}

000054da <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
    54da:	b900      	cbnz	r0, 54de <z_impl_k_busy_wait+0x4>
    54dc:	4770      	bx	lr
{
    54de:	b508      	push	{r3, lr}
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
    54e0:	f7fc fa3a 	bl	1958 <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
    54e4:	bd08      	pop	{r3, pc}

000054e6 <k_timer_init>:
	timer->expiry_fn = expiry_fn;
    54e6:	6201      	str	r1, [r0, #32]
	timer->stop_fn = stop_fn;
    54e8:	6242      	str	r2, [r0, #36]	; 0x24
	timer->status = 0U;
    54ea:	2300      	movs	r3, #0
    54ec:	6303      	str	r3, [r0, #48]	; 0x30
	sys_dlist_init(&w->waitq);
    54ee:	f100 0218 	add.w	r2, r0, #24
	list->head = (sys_dnode_t *)list;
    54f2:	6182      	str	r2, [r0, #24]
	list->tail = (sys_dnode_t *)list;
    54f4:	61c2      	str	r2, [r0, #28]
	node->next = NULL;
    54f6:	6003      	str	r3, [r0, #0]
	node->prev = NULL;
    54f8:	6043      	str	r3, [r0, #4]
	timer->user_data = NULL;
    54fa:	6343      	str	r3, [r0, #52]	; 0x34
}
    54fc:	4770      	bx	lr

000054fe <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
    54fe:	b510      	push	{r4, lr}
    5500:	4604      	mov	r4, r0
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, stop, timer);

	int inactive = z_abort_timeout(&timer->timeout) != 0;
    5502:	f7ff ff87 	bl	5414 <z_abort_timeout>

	if (inactive) {
    5506:	b9a0      	cbnz	r0, 5532 <z_impl_k_timer_stop+0x34>
		return;
	}

	if (timer->stop_fn != NULL) {
    5508:	6a63      	ldr	r3, [r4, #36]	; 0x24
    550a:	b10b      	cbz	r3, 5510 <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
    550c:	4620      	mov	r0, r4
    550e:	4798      	blx	r3
	}

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);
    5510:	f104 0018 	add.w	r0, r4, #24
    5514:	f7ff ff11 	bl	533a <z_unpend1_no_timeout>

		if (pending_thread != NULL) {
    5518:	b158      	cbz	r0, 5532 <z_impl_k_timer_stop+0x34>
			z_ready_thread(pending_thread);
    551a:	f7ff fe73 	bl	5204 <z_ready_thread>
	__asm__ volatile(
    551e:	f04f 0320 	mov.w	r3, #32
    5522:	f3ef 8011 	mrs	r0, BASEPRI
    5526:	f383 8812 	msr	BASEPRI_MAX, r3
    552a:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
    552e:	f7ff fe45 	bl	51bc <z_reschedule_irqlock>
			z_reschedule_unlocked();
		}
	}
}
    5532:	bd10      	pop	{r4, pc}

00005534 <boot_banner>:
#else
	printk("*** Booting Zephyr OS version %s %s ***\n",
	       KERNEL_VERSION_STRING, BOOT_DELAY_BANNER);
#endif
#endif
}
    5534:	4770      	bx	lr

00005536 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
    5536:	4770      	bx	lr

00005538 <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
    5538:	f7fd b8de 	b.w	26f8 <SystemInit>
