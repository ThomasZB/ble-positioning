/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * File Name          : freertos.c
  * Description        : Code for freertos applications
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2022 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */

/* Includes ------------------------------------------------------------------*/
#include "FreeRTOS.h"
#include "task.h"
#include "main.h"
#include "cmsis_os.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include "stdio.h"
#include "usart.h"
#include "adc.h"
#include "lcd.h"
#include "lvgl.h"
#include "lv_port_disp.h"
#include "demos/lv_demos.h"
#include "demos/widgets/lv_demo_widgets.h"
#include "semphr.h"
#include "key.h"
#include "lv_port_indev.h"
#include "mpu6050.h"
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */

/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
/* USER CODE BEGIN Variables */
extern SemaphoreHandle_t KeyPressedSemaphore;

/* USER CODE END Variables */
/* Definitions for defaultTask */
osThreadId_t defaultTaskHandle;
const osThreadAttr_t defaultTask_attributes = {
    .name = "defaultTask",
    .stack_size = 128 * 4,
    .priority = (osPriority_t) osPriorityNormal,
};
/* Definitions for SysStatusTask */
osThreadId_t SysStatusTaskHandle;
const osThreadAttr_t SysStatusTask_attributes = {
    .name = "SysStatusTask",
    .stack_size = 256 * 4,
    .priority = (osPriority_t) osPriorityNormal,
};
/* Definitions for NordicComTask */
osThreadId_t NordicComTaskHandle;
const osThreadAttr_t NordicComTask_attributes = {
    .name = "NordicComTask",
    .stack_size = 256 * 4,
    .priority = (osPriority_t) osPriorityLow,
};
/* Definitions for LittleVGLTask */
osThreadId_t LittleVGLTaskHandle;
const osThreadAttr_t LittleVGLTask_attributes = {
    .name = "LittleVGLTask",
    .stack_size = 2048 * 4,
    .priority = (osPriority_t) osPriorityHigh,
};
/* Definitions for KeyGetTask */
osThreadId_t KeyGetTaskHandle;
const osThreadAttr_t KeyGetTask_attributes = {
    .name = "KeyGetTask",
    .stack_size = 128 * 4,
    .priority = (osPriority_t) osPriorityHigh,
};
/* Definitions for MPU6050Test */
osThreadId_t MPU6050TestHandle;
const osThreadAttr_t MPU6050Test_attributes = {
    .name = "MPU6050Test",
    .stack_size = 256 * 4,
    .priority = (osPriority_t) osPriorityLow,
};

/* Private function prototypes -----------------------------------------------*/
/* USER CODE BEGIN FunctionPrototypes */

/* USER CODE END FunctionPrototypes */

void StartDefaultTask(void *argument);
void SysStatusTask_Func(void *argument);
void NordicTask(void *argument);
void LittleVGLTaskFunc(void *argument);
void KeyGetTaskFunc(void *argument);
void MPU6050TestFunc(void *argument);

void MX_FREERTOS_Init(void); /* (MISRA C 2004 rule 8.1) */

/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
    /* USER CODE BEGIN Init */

    /* USER CODE END Init */

    /* USER CODE BEGIN RTOS_MUTEX */
    /* add mutexes, ... */
    /* USER CODE END RTOS_MUTEX */

    /* USER CODE BEGIN RTOS_SEMAPHORES */
    /* add semaphores, ... */
    /* USER CODE END RTOS_SEMAPHORES */

    /* USER CODE BEGIN RTOS_TIMERS */
    /* start timers, add new ones, ... */
    /* USER CODE END RTOS_TIMERS */

    /* USER CODE BEGIN RTOS_QUEUES */
    /* add queues, ... */
    /* USER CODE END RTOS_QUEUES */

    /* Create the thread(s) */
    /* creation of defaultTask */
    defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);

    /* creation of SysStatusTask */
    SysStatusTaskHandle = osThreadNew(SysStatusTask_Func, NULL, &SysStatusTask_attributes);

    /* creation of NordicComTask */
    NordicComTaskHandle = osThreadNew(NordicTask, NULL, &NordicComTask_attributes);

    /* creation of LittleVGLTask */
    LittleVGLTaskHandle = osThreadNew(LittleVGLTaskFunc, NULL, &LittleVGLTask_attributes);

    /* creation of KeyGetTask */
    KeyGetTaskHandle = osThreadNew(KeyGetTaskFunc, NULL, &KeyGetTask_attributes);

    /* creation of MPU6050Test */
    MPU6050TestHandle = osThreadNew(MPU6050TestFunc, NULL, &MPU6050Test_attributes);

    /* USER CODE BEGIN RTOS_THREADS */
    /* add threads, ... */
    /* USER CODE END RTOS_THREADS */

    /* USER CODE BEGIN RTOS_EVENTS */
    /* add events, ... */
    /* USER CODE END RTOS_EVENTS */

}

/* USER CODE BEGIN Header_StartDefaultTask */
/**
  * @brief  Function implementing the defaultTask thread.
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
    /* USER CODE BEGIN StartDefaultTask */
    /* Infinite loop */
    for(;;)
    {
        osDelay(100);
    }
    /* USER CODE END StartDefaultTask */
}

/* USER CODE BEGIN Header_SysStatusTask_Func */
uint8_t relu100(float in) {
    if (in > 100) {
        return 100;
    } else if (in < 0) {
        return 0;
    } else
    {
        return in;
    }
}
/**
* @brief Function implementing the SysStatusTask thread.
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_SysStatusTask_Func */
__weak void SysStatusTask_Func(void *argument)
{
    /* USER CODE BEGIN SysStatusTask_Func */
    uint8_t electicity;
    float voltage;
    /* Infinite loop */
    for(;;)
    {
        voltage = 2.0*adc_getvoltage();
        electicity = relu100((voltage-3.45)/0.0075);
        printf("current voltage %.2f\r\n", voltage);
        printf("electicity:%d\r\n", electicity);
        osDelay(FREERTOS_S(50));
    }
    /* USER CODE END SysStatusTask_Func */
}

/* USER CODE BEGIN Header_NordicTask */
/**
* @brief Function implementing the NordicComTask thread.
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_NordicTask */
void NordicTask(void *argument)
{
    /* USER CODE BEGIN NordicTask */
    uint16_t data_len;
    /* Infinite loop */

    for(;;)
    {
        if (uart_data.len > 0) {
            data_len = uart_data.len;
            uart_data.len = 0;
            /* 接收buf重新回到0 */
            UART_Start_Receive_IT(&huart1, uart_data.data, 1);
            //HAL_UART_Transmit(&huart3, (uint8_t *)uart_data.data, data_len, 1000);
        }
        osDelay(FREERTOS_MS(32));
    }
    /* USER CODE END NordicTask */
}

/* USER CODE BEGIN Header_LittleVGLTaskFunc */
/**
* @brief Function implementing the LittleVGLTask thread.
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_LittleVGLTaskFunc */
void LittleVGLTaskFunc(void *argument)
{
    /* USER CODE BEGIN LittleVGLTaskFunc */
    lv_init();
    lv_port_disp_init();
    lv_port_indev_init();
    lv_demo_keypad_encoder();
    /* Infinite loop */
    for(;;)
    {
        lv_timer_handler();
        osDelay(FREERTOS_MS(32));
    }
    /* USER CODE END LittleVGLTaskFunc */
}

/* USER CODE BEGIN Header_KeyGetTaskFunc */
/**
* @brief Function implementing the KeyGetTask thread.
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_KeyGetTaskFunc */
void KeyGetTaskFunc(void *argument)
{
    /* USER CODE BEGIN KeyGetTaskFunc */
    KeyPressedSemaphore = xSemaphoreCreateBinary();
    /* Infinite loop */
    for(;;)
    {
        xSemaphoreTake(KeyPressedSemaphore, portMAX_DELAY);
        osDelay(FREERTOS_MS(4));
        /* 根据输入的按键进行判断 */
        if (whitch_key_input == KEY_Pin) {
            if (HAL_GPIO_ReadPin(KEY_GPIO_Port, KEY_Pin) == 0) {
                key_status = 1;
                printf("key pressed\r\n");
            }
        } else if (whitch_key_input == E5E8_K_Pin) {
            if (HAL_GPIO_ReadPin(E5E8_K_GPIO_Port, E5E8_K_Pin) == 0) {
                e5e8_status.key = 1;
                encoder_handler(0, 1);
                printf("e5e8 key pressed\r\n");
            }
        } else if (whitch_key_input == E5E8_A_Pin) {
            if (HAL_GPIO_ReadPin(E5E8_A_GPIO_Port, E5E8_A_Pin) == 0) {
                /* 根据另一个引脚的高低电平判断是往哪边旋转 */
                if (HAL_GPIO_ReadPin(E5E8_B_GPIO_Port, E5E8_B_Pin) == 1) {
                    e5e8_status.left = 1;
                    encoder_handler(1, 0);
                    printf("e5e8 turn left\r\n");
                } else {
                    e5e8_status.right = 1;
                    encoder_handler(-1, 0);
                    printf("e5e8 turn right\r\n");
                }
            }
        }
    }
    /* USER CODE END KeyGetTaskFunc */
}

/* USER CODE BEGIN Header_MPU6050TestFunc */
/**
* @brief Function implementing the MPU6050Test thread.
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_MPU6050TestFunc */
void MPU6050TestFunc(void *argument)
{
    /* USER CODE BEGIN MPU6050TestFunc */
    uint8_t i=0;
    float pitch,roll,yaw; 		//欧拉角
    short aacx,aacy,aacz;		//加速度传感器原始数据
    short gyrox,gyroy,gyroz;	//陀螺仪原始数据
    short temp;					//温度
	//float a1, a2, a3;
	MPU_Init();
    osDelay(8);
	while(mpu_dmp_init())
	{
		printf("MPU6050 Error\r\n");
		osDelay(2000);
	}
    printf("mpu6050 init succeed!\r\n");
    /* Infinite loop */
    for(;;)
    {
        i = mpu_dmp_get_data(&pitch,&roll,&yaw);
        if (i==0) {
//            temp=MPU_Get_Temperature();					//得到温度值
//            MPU_Get_Accelerometer(&aacx,&aacy,&aacz);	//得到加速度传感器数据

            MPU_Get_Gyroscope(&gyrox,&gyroy,&gyroz);	//得到陀螺仪数据
//            printf("temprature:%d\r\n", temp);
//            printf("aacx:%d, aacy:%d, aacz:%d\r\n", aacx,aacy,aacz);
            printf("gyrox:%d, gyroy:%d, gyroz:%d\r\n", gyrox,gyroy,gyroz);
            //printf("pitch:%f, roll:%f, yaw:%f\r\n", pitch,roll,yaw);
			  //MPU6050_Get_Gyroscope(&a1,&a2, &a3);
			  //printf("a1:%f, a2:%f, a3:%f\r\n", a1, a2, a3);

        } else {
            printf("mpu6050 data get failed (-%d)\r\n", i);
        }
        osDelay(FREERTOS_MS(20));
    }
    /* USER CODE END MPU6050TestFunc */
}

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */

/* USER CODE END Application */

